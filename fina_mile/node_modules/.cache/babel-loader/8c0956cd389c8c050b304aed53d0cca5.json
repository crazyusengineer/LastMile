{"ast":null,"code":"import { SELECTION_CHANGE, SelectionMode, SELECTION_ITEMS_CHANGE } from './Selection.types';\nimport { EventGroup } from '../EventGroup';\n/**\n * {@docCategory Selection}\n */\nvar Selection = /** @class */function () {\n  /**\n   * Create a new Selection. If `TItem` does not have a `key` property, you must provide an options\n   * object with a `getKey` implementation. Providing options is optional otherwise.\n   * (At most one `options` object is accepted.)\n   */\n  function Selection() {\n    var options = []; // Otherwise, arguments require options with `getKey`.\n    for (var _i = 0 // Otherwise, arguments require options with `getKey`.\n    ; _i < arguments.length // Otherwise, arguments require options with `getKey`.\n    ; _i++ // Otherwise, arguments require options with `getKey`.\n    ) {\n      options[_i] = arguments[_i]; // Otherwise, arguments require options with `getKey`.\n    }\n\n    var _a = options[0] || {},\n      onSelectionChanged = _a.onSelectionChanged,\n      onItemsChanged = _a.onItemsChanged,\n      getKey = _a.getKey,\n      _b = _a.canSelectItem,\n      canSelectItem = _b === void 0 ? function () {\n        return true;\n      } : _b,\n      items = _a.items,\n      _c = _a.selectionMode,\n      selectionMode = _c === void 0 ? SelectionMode.multiple : _c;\n    this.mode = selectionMode;\n    this._getKey = getKey || defaultGetKey;\n    this._changeEventSuppressionCount = 0;\n    this._exemptedCount = 0;\n    this._anchoredIndex = 0;\n    this._unselectableCount = 0;\n    this._onSelectionChanged = onSelectionChanged;\n    this._onItemsChanged = onItemsChanged;\n    this._canSelectItem = canSelectItem;\n    this._keyToIndexMap = {};\n    this._isModal = false;\n    this.setItems(items || [], true);\n    this.count = this.getSelectedCount();\n  }\n  Selection.prototype.canSelectItem = function (item, index) {\n    if (typeof index === 'number' && index < 0) {\n      return false;\n    }\n    return this._canSelectItem(item, index);\n  };\n  Selection.prototype.getKey = function (item, index) {\n    var key = this._getKey(item, index);\n    return typeof key === 'number' || key ? \"\" + key : '';\n  };\n  Selection.prototype.setChangeEvents = function (isEnabled, suppressChange) {\n    this._changeEventSuppressionCount += isEnabled ? -1 : 1;\n    if (this._changeEventSuppressionCount === 0 && this._hasChanged) {\n      this._hasChanged = false;\n      if (!suppressChange) {\n        this._change();\n      }\n    }\n  };\n  Selection.prototype.isModal = function () {\n    return this._isModal;\n  };\n  Selection.prototype.setModal = function (isModal) {\n    if (this._isModal !== isModal) {\n      this.setChangeEvents(false);\n      this._isModal = isModal;\n      if (!isModal) {\n        this.setAllSelected(false);\n      }\n      this._change();\n      this.setChangeEvents(true);\n    }\n  };\n  /**\n   * Selection needs the items, call this method to set them. If the set\n   * of items is the same, this will re-evaluate selection and index maps.\n   * Otherwise, shouldClear should be set to true, so that selection is\n   * cleared.\n   */\n  Selection.prototype.setItems = function (items, shouldClear) {\n    if (shouldClear === void 0) {\n      shouldClear = true;\n    }\n    var newKeyToIndexMap = {};\n    var newUnselectableIndices = {};\n    var hasSelectionChanged = false;\n    this.setChangeEvents(false);\n    // Reset the unselectable count.\n    this._unselectableCount = 0;\n    var haveItemsChanged = false;\n    // Build lookup table for quick selection evaluation.\n    for (var i = 0; i < items.length; i++) {\n      var item = items[i];\n      if (item) {\n        var key = this.getKey(item, i);\n        if (key) {\n          if (!haveItemsChanged && (!(key in this._keyToIndexMap) || this._keyToIndexMap[key] !== i)) {\n            haveItemsChanged = true;\n          }\n          newKeyToIndexMap[key] = i;\n        }\n      }\n      newUnselectableIndices[i] = item && !this.canSelectItem(item);\n      if (newUnselectableIndices[i]) {\n        this._unselectableCount++;\n      }\n    }\n    if (shouldClear || items.length === 0) {\n      this._setAllSelected(false, true);\n    }\n    // Check the exemption list for discrepencies.\n    var newExemptedIndicies = {};\n    var newExemptedCount = 0;\n    for (var indexProperty in this._exemptedIndices) {\n      if (this._exemptedIndices.hasOwnProperty(indexProperty)) {\n        var index = Number(indexProperty);\n        var item = this._items[index];\n        var exemptKey = item ? this.getKey(item, Number(index)) : undefined;\n        var newIndex = exemptKey ? newKeyToIndexMap[exemptKey] : index;\n        if (newIndex === undefined) {\n          // The item has likely been replaced or removed.\n          hasSelectionChanged = true;\n        } else {\n          // We know the new index of the item. update the existing exemption table.\n          newExemptedIndicies[newIndex] = true;\n          newExemptedCount++;\n          hasSelectionChanged = hasSelectionChanged || newIndex !== index;\n        }\n      }\n    }\n    if (this._items && this._exemptedCount === 0 && items.length !== this._items.length && this._isAllSelected) {\n      // If everything was selected but the number of items has changed, selection has changed.\n      hasSelectionChanged = true;\n    }\n    if (!haveItemsChanged) {\n      for (var _i = 0, _a = Object.keys(this._keyToIndexMap); _i < _a.length; _i++) {\n        var key = _a[_i];\n        if (!(key in newKeyToIndexMap)) {\n          haveItemsChanged = true;\n          break;\n        }\n      }\n    }\n    this._exemptedIndices = newExemptedIndicies;\n    this._exemptedCount = newExemptedCount;\n    this._keyToIndexMap = newKeyToIndexMap;\n    this._unselectableIndices = newUnselectableIndices;\n    this._items = items;\n    this._selectedItems = null;\n    if (hasSelectionChanged) {\n      this._updateCount();\n    }\n    if (haveItemsChanged) {\n      EventGroup.raise(this, SELECTION_ITEMS_CHANGE);\n      if (this._onItemsChanged) {\n        this._onItemsChanged();\n      }\n    }\n    if (hasSelectionChanged) {\n      this._change();\n    }\n    this.setChangeEvents(true);\n  };\n  Selection.prototype.getItems = function () {\n    return this._items;\n  };\n  Selection.prototype.getSelection = function () {\n    if (!this._selectedItems) {\n      this._selectedItems = [];\n      var items = this._items;\n      if (items) {\n        for (var i = 0; i < items.length; i++) {\n          if (this.isIndexSelected(i)) {\n            this._selectedItems.push(items[i]);\n          }\n        }\n      }\n    }\n    return this._selectedItems;\n  };\n  Selection.prototype.getSelectedCount = function () {\n    return this._isAllSelected ? this._items.length - this._exemptedCount - this._unselectableCount : this._exemptedCount;\n  };\n  Selection.prototype.getSelectedIndices = function () {\n    if (!this._selectedIndices) {\n      this._selectedIndices = [];\n      var items = this._items;\n      if (items) {\n        for (var i = 0; i < items.length; i++) {\n          if (this.isIndexSelected(i)) {\n            this._selectedIndices.push(i);\n          }\n        }\n      }\n    }\n    return this._selectedIndices;\n  };\n  Selection.prototype.getItemIndex = function (key) {\n    var index = this._keyToIndexMap[key];\n    return index !== null && index !== void 0 ? index : -1;\n  };\n  Selection.prototype.isRangeSelected = function (fromIndex, count) {\n    if (count === 0) {\n      return false;\n    }\n    var endIndex = fromIndex + count;\n    for (var i = fromIndex; i < endIndex; i++) {\n      if (!this.isIndexSelected(i)) {\n        return false;\n      }\n    }\n    return true;\n  };\n  Selection.prototype.isAllSelected = function () {\n    var selectableCount = this._items.length - this._unselectableCount;\n    // In single mode, we can only have a max of 1 item.\n    if (this.mode === SelectionMode.single) {\n      selectableCount = Math.min(selectableCount, 1);\n    }\n    return this.count > 0 && this._isAllSelected && this._exemptedCount === 0 || !this._isAllSelected && this._exemptedCount === selectableCount && selectableCount > 0;\n  };\n  Selection.prototype.isKeySelected = function (key) {\n    var index = this._keyToIndexMap[key];\n    return this.isIndexSelected(index);\n  };\n  Selection.prototype.isIndexSelected = function (index) {\n    return !!(this.count > 0 && this._isAllSelected && !this._exemptedIndices[index] && !this._unselectableIndices[index] || !this._isAllSelected && this._exemptedIndices[index]);\n  };\n  Selection.prototype.setAllSelected = function (isAllSelected) {\n    if (isAllSelected && this.mode !== SelectionMode.multiple) {\n      return;\n    }\n    var selectableCount = this._items ? this._items.length - this._unselectableCount : 0;\n    this.setChangeEvents(false);\n    if (selectableCount > 0 && (this._exemptedCount > 0 || isAllSelected !== this._isAllSelected)) {\n      this._exemptedIndices = {};\n      if (isAllSelected !== this._isAllSelected || this._exemptedCount > 0) {\n        this._exemptedCount = 0;\n        this._isAllSelected = isAllSelected;\n        this._change();\n      }\n      this._updateCount();\n    }\n    this.setChangeEvents(true);\n  };\n  Selection.prototype.setKeySelected = function (key, isSelected, shouldAnchor) {\n    var index = this._keyToIndexMap[key];\n    if (index >= 0) {\n      this.setIndexSelected(index, isSelected, shouldAnchor);\n    }\n  };\n  Selection.prototype.setIndexSelected = function (index, isSelected, shouldAnchor) {\n    if (this.mode === SelectionMode.none) {\n      return;\n    }\n    // Clamp the index.\n    index = Math.min(Math.max(0, index), this._items.length - 1);\n    // No-op on out of bounds selections.\n    if (index < 0 || index >= this._items.length) {\n      return;\n    }\n    this.setChangeEvents(false);\n    var isExempt = this._exemptedIndices[index];\n    var canSelect = !this._unselectableIndices[index];\n    if (canSelect) {\n      if (isSelected && this.mode === SelectionMode.single) {\n        // If this is single-select, the previous selection should be removed.\n        this._setAllSelected(false, true);\n      }\n      // Determine if we need to remove the exemption.\n      if (isExempt && (isSelected && this._isAllSelected || !isSelected && !this._isAllSelected)) {\n        delete this._exemptedIndices[index];\n        this._exemptedCount--;\n      }\n      // Determine if we need to add the exemption.\n      if (!isExempt && (isSelected && !this._isAllSelected || !isSelected && this._isAllSelected)) {\n        this._exemptedIndices[index] = true;\n        this._exemptedCount++;\n      }\n      if (shouldAnchor) {\n        this._anchoredIndex = index;\n      }\n    }\n    this._updateCount();\n    this.setChangeEvents(true);\n  };\n  Selection.prototype.setRangeSelected = function (fromIndex, count, isSelected, shouldAnchor) {\n    if (this.mode === SelectionMode.none) {\n      return;\n    }\n    // Clamp the index.\n    fromIndex = Math.min(Math.max(0, fromIndex), this._items.length - 1);\n    // Clamp the range.\n    count = Math.min(Math.max(0, count), this._items.length - fromIndex);\n    // No-op on out of bounds selections.\n    if (fromIndex < 0 || fromIndex >= this._items.length || count === 0) {\n      return;\n    }\n    this.setChangeEvents(false);\n    var anchorIndex = this._anchoredIndex || 0;\n    var startIndex = fromIndex;\n    var endIndex = fromIndex + count - 1;\n    var newAnchorIndex = anchorIndex >= endIndex ? startIndex : endIndex;\n    for (; startIndex <= endIndex; startIndex++) {\n      this.setIndexSelected(startIndex, isSelected, shouldAnchor ? startIndex === newAnchorIndex : false);\n    }\n    this.setChangeEvents(true);\n  };\n  Selection.prototype.selectToKey = function (key, clearSelection) {\n    this.selectToIndex(this._keyToIndexMap[key], clearSelection);\n  };\n  Selection.prototype.selectToRange = function (fromIndex, count, clearSelection) {\n    if (this.mode === SelectionMode.none) {\n      return;\n    }\n    if (this.mode === SelectionMode.single) {\n      if (count === 1) {\n        this.setIndexSelected(fromIndex, true, true);\n      }\n      return;\n    }\n    var anchorIndex = this._anchoredIndex || 0;\n    var startIndex = Math.min(fromIndex, anchorIndex);\n    var endIndex = Math.max(fromIndex + count - 1, anchorIndex);\n    this.setChangeEvents(false);\n    if (clearSelection) {\n      this._setAllSelected(false, true);\n    }\n    for (; startIndex <= endIndex; startIndex++) {\n      this.setIndexSelected(startIndex, true, false);\n    }\n    this.setChangeEvents(true);\n  };\n  Selection.prototype.selectToIndex = function (index, clearSelection) {\n    if (this.mode === SelectionMode.none) {\n      return;\n    }\n    if (this.mode === SelectionMode.single) {\n      this.setIndexSelected(index, true, true);\n      return;\n    }\n    var anchorIndex = this._anchoredIndex || 0;\n    var startIndex = Math.min(index, anchorIndex);\n    var endIndex = Math.max(index, anchorIndex);\n    this.setChangeEvents(false);\n    if (clearSelection) {\n      this._setAllSelected(false, true);\n    }\n    for (; startIndex <= endIndex; startIndex++) {\n      this.setIndexSelected(startIndex, true, false);\n    }\n    this.setChangeEvents(true);\n  };\n  Selection.prototype.toggleAllSelected = function () {\n    this.setAllSelected(!this.isAllSelected());\n  };\n  Selection.prototype.toggleKeySelected = function (key) {\n    this.setKeySelected(key, !this.isKeySelected(key), true);\n  };\n  Selection.prototype.toggleIndexSelected = function (index) {\n    this.setIndexSelected(index, !this.isIndexSelected(index), true);\n  };\n  Selection.prototype.toggleRangeSelected = function (fromIndex, count) {\n    if (this.mode === SelectionMode.none) {\n      return;\n    }\n    var isRangeSelected = this.isRangeSelected(fromIndex, count);\n    var endIndex = fromIndex + count;\n    if (this.mode === SelectionMode.single && count > 1) {\n      return;\n    }\n    this.setChangeEvents(false);\n    for (var i = fromIndex; i < endIndex; i++) {\n      this.setIndexSelected(i, !isRangeSelected, false);\n    }\n    this.setChangeEvents(true);\n  };\n  Selection.prototype._updateCount = function (preserveModalState) {\n    if (preserveModalState === void 0) {\n      preserveModalState = false;\n    }\n    var count = this.getSelectedCount();\n    if (count !== this.count) {\n      this.count = count;\n      this._change();\n    }\n    if (!this.count && !preserveModalState) {\n      this.setModal(false);\n    }\n  };\n  Selection.prototype._setAllSelected = function (isAllSelected, preserveModalState) {\n    if (preserveModalState === void 0) {\n      preserveModalState = false;\n    }\n    if (isAllSelected && this.mode !== SelectionMode.multiple) {\n      return;\n    }\n    var selectableCount = this._items ? this._items.length - this._unselectableCount : 0;\n    this.setChangeEvents(false);\n    if (selectableCount > 0 && (this._exemptedCount > 0 || isAllSelected !== this._isAllSelected)) {\n      this._exemptedIndices = {};\n      if (isAllSelected !== this._isAllSelected || this._exemptedCount > 0) {\n        this._exemptedCount = 0;\n        this._isAllSelected = isAllSelected;\n        this._change();\n      }\n      this._updateCount(preserveModalState);\n    }\n    this.setChangeEvents(true);\n  };\n  Selection.prototype._change = function () {\n    if (this._changeEventSuppressionCount === 0) {\n      this._selectedItems = null;\n      this._selectedIndices = undefined;\n      EventGroup.raise(this, SELECTION_CHANGE);\n      if (this._onSelectionChanged) {\n        this._onSelectionChanged();\n      }\n    } else {\n      this._hasChanged = true;\n    }\n  };\n  return Selection;\n}();\nexport { Selection };\nfunction defaultGetKey(item, index) {\n  // 0 may be used as a key\n  var _a = (item || {}).key,\n    key = _a === void 0 ? \"\" + index : _a;\n  return key;\n}","map":{"version":3,"mappings":"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","names":["SELECTION_CHANGE","SelectionMode","SELECTION_ITEMS_CHANGE","EventGroup","_i","options","onSelectionChanged","onItemsChanged","getKey","_b","canSelectItem","items","_c","selectionMode","multiple","mode","_getKey","defaultGetKey","_changeEventSuppressionCount","_exemptedCount","_anchoredIndex","_unselectableCount","_onSelectionChanged","_onItemsChanged","_canSelectItem","_keyToIndexMap","_isModal","setItems","count","getSelectedCount","Selection","item","index","key","isEnabled","suppressChange","_hasChanged","_change","isModal","setChangeEvents","setAllSelected","shouldClear","newKeyToIndexMap","newUnselectableIndices","hasSelectionChanged","haveItemsChanged","i","length","_setAllSelected","newExemptedIndicies","newExemptedCount","indexProperty","_exemptedIndices","hasOwnProperty","Number","_items","exemptKey","undefined","newIndex","_isAllSelected","_a","keys","_unselectableIndices","_selectedItems","_updateCount","raise","isIndexSelected","push","_selectedIndices","fromIndex","endIndex","selectableCount","single","Math","min","isAllSelected","isSelected","shouldAnchor","setIndexSelected","none","max","isExempt","canSelect","anchorIndex","startIndex","newAnchorIndex","clearSelection","selectToIndex","setKeySelected","isKeySelected","isRangeSelected","preserveModalState","setModal"],"sources":["/Users/edward/Zhuo/NYU/FA22/design_project/project/node_modules/@fluentui/react/node_modules/@fluentui/utilities/lib/src/selection/Selection.ts"],"sourcesContent":["import { SELECTION_CHANGE, SelectionMode, SELECTION_ITEMS_CHANGE } from './Selection.types';\nimport { EventGroup } from '../EventGroup';\nimport type { IObjectWithKey, ISelection } from './Selection.types';\n\n/**\n * {@docCategory Selection}\n */\nexport interface ISelectionOptions<TItem = IObjectWithKey> {\n  onSelectionChanged?: () => void;\n  onItemsChanged?: () => void;\n  /** Custom logic to generate item keys. Required if `TItem` does not have a `key` property. */\n  getKey?: (item: TItem, index?: number) => string | number;\n  canSelectItem?: (item: TItem, index?: number) => boolean;\n  selectionMode?: SelectionMode;\n  items?: TItem[];\n}\n\n/**\n * Selection options with required `getKey` property.\n * {@docCategory Selection}\n */\nexport type ISelectionOptionsWithRequiredGetKey<TItem> = ISelectionOptions<TItem> &\n  Required<Pick<ISelectionOptions<TItem>, 'getKey'>>;\n\n/**\n * {@docCategory Selection}\n */\nexport class Selection<TItem = IObjectWithKey> implements ISelection<TItem> {\n  /** Number of items selected. Do not modify. */\n  public count!: number;\n  public readonly mode!: SelectionMode;\n\n  private _getKey!: (item: TItem, index?: number) => string | number;\n  private _canSelectItem!: (item: TItem, index?: number) => boolean;\n\n  private _changeEventSuppressionCount: number;\n  private _items!: TItem[];\n  private _selectedItems!: TItem[] | null;\n  private _selectedIndices: number[] | undefined;\n  private _isAllSelected!: boolean;\n  private _exemptedIndices!: { [index: string]: boolean };\n  private _exemptedCount: number;\n  private _keyToIndexMap!: { [key: string]: number };\n  private _anchoredIndex: number;\n  private _onSelectionChanged: (() => void) | undefined;\n  private _onItemsChanged: (() => void) | undefined;\n  private _hasChanged!: boolean;\n  private _unselectableIndices!: { [index: string]: boolean };\n  private _unselectableCount: number;\n  private _isModal: boolean;\n\n  /**\n   * Create a new Selection. If `TItem` does not have a `key` property, you must provide an options\n   * object with a `getKey` implementation. Providing options is optional otherwise.\n   * (At most one `options` object is accepted.)\n   */\n  constructor(\n    ...options: TItem extends IObjectWithKey // If the item type has a built-in key...\n      ? [] | [ISelectionOptions<TItem>] // Then the arguments can be empty or have the options without `getKey`\n      : [ISelectionOptionsWithRequiredGetKey<TItem>] // Otherwise, arguments require options with `getKey`.\n  ) {\n    const {\n      onSelectionChanged,\n      onItemsChanged,\n      getKey,\n      canSelectItem = () => true,\n      items,\n      selectionMode = SelectionMode.multiple,\n    } = options[0] || ({} as ISelectionOptions<TItem>);\n\n    this.mode = selectionMode;\n\n    this._getKey = getKey || defaultGetKey;\n\n    this._changeEventSuppressionCount = 0;\n    this._exemptedCount = 0;\n    this._anchoredIndex = 0;\n    this._unselectableCount = 0;\n\n    this._onSelectionChanged = onSelectionChanged;\n    this._onItemsChanged = onItemsChanged;\n    this._canSelectItem = canSelectItem;\n    this._keyToIndexMap = {};\n\n    this._isModal = false;\n\n    this.setItems(items || [], true);\n\n    this.count = this.getSelectedCount();\n  }\n\n  public canSelectItem(item: TItem, index?: number): boolean {\n    if (typeof index === 'number' && index < 0) {\n      return false;\n    }\n\n    return this._canSelectItem(item, index);\n  }\n\n  public getKey(item: TItem, index?: number): string {\n    const key = this._getKey(item, index);\n\n    return typeof key === 'number' || key ? `${key}` : '';\n  }\n\n  public setChangeEvents(isEnabled: boolean, suppressChange?: boolean): void {\n    this._changeEventSuppressionCount += isEnabled ? -1 : 1;\n\n    if (this._changeEventSuppressionCount === 0 && this._hasChanged) {\n      this._hasChanged = false;\n\n      if (!suppressChange) {\n        this._change();\n      }\n    }\n  }\n\n  public isModal(): boolean {\n    return this._isModal;\n  }\n\n  public setModal(isModal: boolean): void {\n    if (this._isModal !== isModal) {\n      this.setChangeEvents(false);\n\n      this._isModal = isModal;\n\n      if (!isModal) {\n        this.setAllSelected(false);\n      }\n\n      this._change();\n\n      this.setChangeEvents(true);\n    }\n  }\n\n  /**\n   * Selection needs the items, call this method to set them. If the set\n   * of items is the same, this will re-evaluate selection and index maps.\n   * Otherwise, shouldClear should be set to true, so that selection is\n   * cleared.\n   */\n  public setItems(items: TItem[], shouldClear: boolean = true): void {\n    const newKeyToIndexMap: { [key: string]: number } = {};\n    const newUnselectableIndices: { [key: string]: boolean } = {};\n    let hasSelectionChanged = false;\n\n    this.setChangeEvents(false);\n\n    // Reset the unselectable count.\n    this._unselectableCount = 0;\n\n    let haveItemsChanged = false;\n\n    // Build lookup table for quick selection evaluation.\n    for (let i = 0; i < items.length; i++) {\n      const item = items[i];\n\n      if (item) {\n        const key = this.getKey(item, i);\n\n        if (key) {\n          if (!haveItemsChanged && (!(key in this._keyToIndexMap) || this._keyToIndexMap[key] !== i)) {\n            haveItemsChanged = true;\n          }\n\n          newKeyToIndexMap[key] = i;\n        }\n      }\n\n      newUnselectableIndices[i] = item && !this.canSelectItem(item);\n      if (newUnselectableIndices[i]) {\n        this._unselectableCount++;\n      }\n    }\n\n    if (shouldClear || items.length === 0) {\n      this._setAllSelected(false, true);\n    }\n\n    // Check the exemption list for discrepencies.\n    const newExemptedIndicies: { [key: string]: boolean } = {};\n    let newExemptedCount = 0;\n\n    for (const indexProperty in this._exemptedIndices) {\n      if (this._exemptedIndices.hasOwnProperty(indexProperty)) {\n        const index = Number(indexProperty);\n        const item = this._items[index];\n        const exemptKey = item ? this.getKey(item, Number(index)) : undefined;\n        const newIndex = exemptKey ? newKeyToIndexMap[exemptKey] : index;\n\n        if (newIndex === undefined) {\n          // The item has likely been replaced or removed.\n          hasSelectionChanged = true;\n        } else {\n          // We know the new index of the item. update the existing exemption table.\n          newExemptedIndicies[newIndex] = true;\n          newExemptedCount++;\n          hasSelectionChanged = hasSelectionChanged || newIndex !== index;\n        }\n      }\n    }\n\n    if (this._items && this._exemptedCount === 0 && items.length !== this._items.length && this._isAllSelected) {\n      // If everything was selected but the number of items has changed, selection has changed.\n      hasSelectionChanged = true;\n    }\n\n    if (!haveItemsChanged) {\n      for (const key of Object.keys(this._keyToIndexMap)) {\n        if (!(key in newKeyToIndexMap)) {\n          haveItemsChanged = true;\n          break;\n        }\n      }\n    }\n\n    this._exemptedIndices = newExemptedIndicies;\n    this._exemptedCount = newExemptedCount;\n    this._keyToIndexMap = newKeyToIndexMap;\n    this._unselectableIndices = newUnselectableIndices;\n    this._items = items;\n    this._selectedItems = null;\n\n    if (hasSelectionChanged) {\n      this._updateCount();\n    }\n\n    if (haveItemsChanged) {\n      EventGroup.raise(this, SELECTION_ITEMS_CHANGE);\n\n      if (this._onItemsChanged) {\n        this._onItemsChanged();\n      }\n    }\n\n    if (hasSelectionChanged) {\n      this._change();\n    }\n\n    this.setChangeEvents(true);\n  }\n\n  public getItems(): TItem[] {\n    return this._items;\n  }\n\n  public getSelection(): TItem[] {\n    if (!this._selectedItems) {\n      this._selectedItems = [];\n\n      const items = this._items;\n\n      if (items) {\n        for (let i = 0; i < items.length; i++) {\n          if (this.isIndexSelected(i)) {\n            this._selectedItems.push(items[i]);\n          }\n        }\n      }\n    }\n\n    return this._selectedItems;\n  }\n\n  public getSelectedCount(): number {\n    return this._isAllSelected\n      ? this._items.length - this._exemptedCount - this._unselectableCount\n      : this._exemptedCount;\n  }\n\n  public getSelectedIndices(): number[] {\n    if (!this._selectedIndices) {\n      this._selectedIndices = [];\n\n      const items = this._items;\n\n      if (items) {\n        for (let i = 0; i < items.length; i++) {\n          if (this.isIndexSelected(i)) {\n            this._selectedIndices.push(i);\n          }\n        }\n      }\n    }\n\n    return this._selectedIndices;\n  }\n\n  public getItemIndex(key: string): number {\n    const index = this._keyToIndexMap[key];\n\n    return index ?? -1;\n  }\n\n  public isRangeSelected(fromIndex: number, count: number): boolean {\n    if (count === 0) {\n      return false;\n    }\n\n    const endIndex = fromIndex + count;\n\n    for (let i = fromIndex; i < endIndex; i++) {\n      if (!this.isIndexSelected(i)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public isAllSelected(): boolean {\n    let selectableCount = this._items.length - this._unselectableCount;\n\n    // In single mode, we can only have a max of 1 item.\n    if (this.mode === SelectionMode.single) {\n      selectableCount = Math.min(selectableCount, 1);\n    }\n\n    return (\n      (this.count > 0 && this._isAllSelected && this._exemptedCount === 0) ||\n      (!this._isAllSelected && this._exemptedCount === selectableCount && selectableCount > 0)\n    );\n  }\n\n  public isKeySelected(key: string): boolean {\n    const index = this._keyToIndexMap[key];\n\n    return this.isIndexSelected(index);\n  }\n\n  public isIndexSelected(index: number): boolean {\n    return !!(\n      (this.count > 0 && this._isAllSelected && !this._exemptedIndices[index] && !this._unselectableIndices[index]) ||\n      (!this._isAllSelected && this._exemptedIndices[index])\n    );\n  }\n\n  public setAllSelected(isAllSelected: boolean): void {\n    if (isAllSelected && this.mode !== SelectionMode.multiple) {\n      return;\n    }\n\n    const selectableCount = this._items ? this._items.length - this._unselectableCount : 0;\n\n    this.setChangeEvents(false);\n\n    if (selectableCount > 0 && (this._exemptedCount > 0 || isAllSelected !== this._isAllSelected)) {\n      this._exemptedIndices = {};\n\n      if (isAllSelected !== this._isAllSelected || this._exemptedCount > 0) {\n        this._exemptedCount = 0;\n        this._isAllSelected = isAllSelected;\n        this._change();\n      }\n\n      this._updateCount();\n    }\n\n    this.setChangeEvents(true);\n  }\n\n  public setKeySelected(key: string, isSelected: boolean, shouldAnchor: boolean): void {\n    const index = this._keyToIndexMap[key];\n\n    if (index >= 0) {\n      this.setIndexSelected(index, isSelected, shouldAnchor);\n    }\n  }\n\n  public setIndexSelected(index: number, isSelected: boolean, shouldAnchor: boolean): void {\n    if (this.mode === SelectionMode.none) {\n      return;\n    }\n\n    // Clamp the index.\n    index = Math.min(Math.max(0, index), this._items.length - 1);\n\n    // No-op on out of bounds selections.\n    if (index < 0 || index >= this._items.length) {\n      return;\n    }\n\n    this.setChangeEvents(false);\n\n    const isExempt = this._exemptedIndices[index];\n    const canSelect = !this._unselectableIndices[index];\n\n    if (canSelect) {\n      if (isSelected && this.mode === SelectionMode.single) {\n        // If this is single-select, the previous selection should be removed.\n        this._setAllSelected(false, true);\n      }\n\n      // Determine if we need to remove the exemption.\n      if (isExempt && ((isSelected && this._isAllSelected) || (!isSelected && !this._isAllSelected))) {\n        delete this._exemptedIndices[index];\n        this._exemptedCount--;\n      }\n\n      // Determine if we need to add the exemption.\n      if (!isExempt && ((isSelected && !this._isAllSelected) || (!isSelected && this._isAllSelected))) {\n        this._exemptedIndices[index] = true;\n        this._exemptedCount++;\n      }\n\n      if (shouldAnchor) {\n        this._anchoredIndex = index;\n      }\n    }\n\n    this._updateCount();\n\n    this.setChangeEvents(true);\n  }\n\n  public setRangeSelected(fromIndex: number, count: number, isSelected: boolean, shouldAnchor: boolean): void {\n    if (this.mode === SelectionMode.none) {\n      return;\n    }\n\n    // Clamp the index.\n    fromIndex = Math.min(Math.max(0, fromIndex), this._items.length - 1);\n\n    // Clamp the range.\n    count = Math.min(Math.max(0, count), this._items.length - fromIndex);\n\n    // No-op on out of bounds selections.\n    if (fromIndex < 0 || fromIndex >= this._items.length || count === 0) {\n      return;\n    }\n\n    this.setChangeEvents(false);\n\n    const anchorIndex = this._anchoredIndex || 0;\n    let startIndex = fromIndex;\n    const endIndex = fromIndex + count - 1;\n\n    const newAnchorIndex = anchorIndex >= endIndex ? startIndex : endIndex;\n\n    for (; startIndex <= endIndex; startIndex++) {\n      this.setIndexSelected(startIndex, isSelected, shouldAnchor ? startIndex === newAnchorIndex : false);\n    }\n\n    this.setChangeEvents(true);\n  }\n\n  public selectToKey(key: string, clearSelection?: boolean): void {\n    this.selectToIndex(this._keyToIndexMap[key], clearSelection);\n  }\n\n  public selectToRange(fromIndex: number, count: number, clearSelection?: boolean): void {\n    if (this.mode === SelectionMode.none) {\n      return;\n    }\n\n    if (this.mode === SelectionMode.single) {\n      if (count === 1) {\n        this.setIndexSelected(fromIndex, true, true);\n      }\n      return;\n    }\n\n    const anchorIndex = this._anchoredIndex || 0;\n    let startIndex = Math.min(fromIndex, anchorIndex);\n    const endIndex = Math.max(fromIndex + count - 1, anchorIndex);\n\n    this.setChangeEvents(false);\n\n    if (clearSelection) {\n      this._setAllSelected(false, true);\n    }\n\n    for (; startIndex <= endIndex; startIndex++) {\n      this.setIndexSelected(startIndex, true, false);\n    }\n\n    this.setChangeEvents(true);\n  }\n\n  public selectToIndex(index: number, clearSelection?: boolean): void {\n    if (this.mode === SelectionMode.none) {\n      return;\n    }\n\n    if (this.mode === SelectionMode.single) {\n      this.setIndexSelected(index, true, true);\n      return;\n    }\n\n    const anchorIndex = this._anchoredIndex || 0;\n    let startIndex = Math.min(index, anchorIndex);\n    const endIndex = Math.max(index, anchorIndex);\n\n    this.setChangeEvents(false);\n\n    if (clearSelection) {\n      this._setAllSelected(false, true);\n    }\n\n    for (; startIndex <= endIndex; startIndex++) {\n      this.setIndexSelected(startIndex, true, false);\n    }\n\n    this.setChangeEvents(true);\n  }\n\n  public toggleAllSelected(): void {\n    this.setAllSelected(!this.isAllSelected());\n  }\n\n  public toggleKeySelected(key: string): void {\n    this.setKeySelected(key, !this.isKeySelected(key), true);\n  }\n\n  public toggleIndexSelected(index: number): void {\n    this.setIndexSelected(index, !this.isIndexSelected(index), true);\n  }\n\n  public toggleRangeSelected(fromIndex: number, count: number): void {\n    if (this.mode === SelectionMode.none) {\n      return;\n    }\n\n    const isRangeSelected = this.isRangeSelected(fromIndex, count);\n    const endIndex = fromIndex + count;\n\n    if (this.mode === SelectionMode.single && count > 1) {\n      return;\n    }\n\n    this.setChangeEvents(false);\n    for (let i = fromIndex; i < endIndex; i++) {\n      this.setIndexSelected(i, !isRangeSelected, false);\n    }\n    this.setChangeEvents(true);\n  }\n\n  private _updateCount(preserveModalState: boolean = false): void {\n    const count = this.getSelectedCount();\n\n    if (count !== this.count) {\n      this.count = count;\n      this._change();\n    }\n\n    if (!this.count && !preserveModalState) {\n      this.setModal(false);\n    }\n  }\n\n  private _setAllSelected(isAllSelected: boolean, preserveModalState: boolean = false): void {\n    if (isAllSelected && this.mode !== SelectionMode.multiple) {\n      return;\n    }\n\n    const selectableCount = this._items ? this._items.length - this._unselectableCount : 0;\n\n    this.setChangeEvents(false);\n\n    if (selectableCount > 0 && (this._exemptedCount > 0 || isAllSelected !== this._isAllSelected)) {\n      this._exemptedIndices = {};\n\n      if (isAllSelected !== this._isAllSelected || this._exemptedCount > 0) {\n        this._exemptedCount = 0;\n        this._isAllSelected = isAllSelected;\n        this._change();\n      }\n\n      this._updateCount(preserveModalState);\n    }\n\n    this.setChangeEvents(true);\n  }\n\n  private _change(): void {\n    if (this._changeEventSuppressionCount === 0) {\n      this._selectedItems = null;\n      this._selectedIndices = undefined;\n\n      EventGroup.raise(this, SELECTION_CHANGE);\n\n      if (this._onSelectionChanged) {\n        this._onSelectionChanged();\n      }\n    } else {\n      this._hasChanged = true;\n    }\n  }\n}\n\nfunction defaultGetKey<TItem = IObjectWithKey>(item: TItem, index?: number): string | number {\n  // 0 may be used as a key\n  const { key = `${index}` } = (item || {}) as IObjectWithKey;\n  return key;\n}\n"]},"metadata":{},"sourceType":"module"}