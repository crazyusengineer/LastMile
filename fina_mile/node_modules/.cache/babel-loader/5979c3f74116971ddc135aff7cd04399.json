{"ast":null,"code":"import { __spreadArray } from \"tslib\";\nimport { Stylesheet } from './Stylesheet';\nimport { kebabRules } from './transforms/kebabRules';\nimport { prefixRules } from './transforms/prefixRules';\nimport { provideUnits } from './transforms/provideUnits';\nimport { rtlifyRules } from './transforms/rtlifyRules';\nimport { tokenizeWithParentheses } from './tokenizeWithParentheses';\nvar DISPLAY_NAME = 'displayName';\nfunction getDisplayName(rules) {\n  var rootStyle = rules && rules['&'];\n  return rootStyle ? rootStyle.displayName : undefined;\n}\nvar globalSelectorRegExp = /\\:global\\((.+?)\\)/g;\n/**\n * Finds comma separated selectors in a :global() e.g. \":global(.class1, .class2, .class3)\"\n * and wraps them each in their own global \":global(.class1), :global(.class2), :global(.class3)\"\n *\n * @param selectorWithGlobals The selector to process\n * @returns The updated selector\n */\nfunction expandCommaSeparatedGlobals(selectorWithGlobals) {\n  // We the selector does not have a :global() we can shortcut\n  if (!globalSelectorRegExp.test(selectorWithGlobals)) {\n    return selectorWithGlobals;\n  }\n  var replacementInfo = [];\n  var findGlobal = /\\:global\\((.+?)\\)/g;\n  var match = null;\n  // Create a result list for global selectors so we can replace them.\n  while (match = findGlobal.exec(selectorWithGlobals)) {\n    // Only if the found selector is a comma separated list we'll process it.\n    if (match[1].indexOf(',') > -1) {\n      replacementInfo.push([match.index, match.index + match[0].length,\n      // Wrap each of the found selectors in :global()\n      match[1].split(',').map(function (v) {\n        return \":global(\" + v.trim() + \")\";\n      }).join(', ')]);\n    }\n  }\n  // Replace the found selectors with their wrapped variants in reverse order\n  return replacementInfo.reverse().reduce(function (selector, _a) {\n    var matchIndex = _a[0],\n      matchEndIndex = _a[1],\n      replacement = _a[2];\n    var prefix = selector.slice(0, matchIndex);\n    var suffix = selector.slice(matchEndIndex);\n    return prefix + replacement + suffix;\n  }, selectorWithGlobals);\n}\nfunction expandSelector(newSelector, currentSelector) {\n  if (newSelector.indexOf(':global(') >= 0) {\n    return newSelector.replace(globalSelectorRegExp, '$1');\n  } else if (newSelector.indexOf(':') === 0) {\n    return currentSelector + newSelector;\n  } else if (newSelector.indexOf('&') < 0) {\n    return currentSelector + ' ' + newSelector;\n  }\n  return newSelector;\n}\nfunction extractSelector(currentSelector, rules, selector, value) {\n  if (rules === void 0) {\n    rules = {\n      __order: []\n    };\n  }\n  if (selector.indexOf('@') === 0) {\n    selector = selector + '{' + currentSelector;\n    extractRules([value], rules, selector);\n  } else if (selector.indexOf(',') > -1) {\n    expandCommaSeparatedGlobals(selector).split(',').map(function (s) {\n      return s.trim();\n    }).forEach(function (separatedSelector) {\n      return extractRules([value], rules, expandSelector(separatedSelector, currentSelector));\n    });\n  } else {\n    extractRules([value], rules, expandSelector(selector, currentSelector));\n  }\n}\nfunction extractRules(args, rules, currentSelector) {\n  if (rules === void 0) {\n    rules = {\n      __order: []\n    };\n  }\n  if (currentSelector === void 0) {\n    currentSelector = '&';\n  }\n  var stylesheet = Stylesheet.getInstance();\n  var currentRules = rules[currentSelector];\n  if (!currentRules) {\n    currentRules = {};\n    rules[currentSelector] = currentRules;\n    rules.__order.push(currentSelector);\n  }\n  for (var _i = 0, args_1 = args; _i < args_1.length; _i++) {\n    var arg = args_1[_i];\n    // If the arg is a string, we need to look up the class map and merge.\n    if (typeof arg === 'string') {\n      var expandedRules = stylesheet.argsFromClassName(arg);\n      if (expandedRules) {\n        extractRules(expandedRules, rules, currentSelector);\n      }\n      // Else if the arg is an array, we need to recurse in.\n    } else if (Array.isArray(arg)) {\n      extractRules(arg, rules, currentSelector);\n    } else {\n      for (var prop in arg) {\n        if (arg.hasOwnProperty(prop)) {\n          var propValue = arg[prop];\n          if (prop === 'selectors') {\n            // every child is a selector.\n            var selectors = arg.selectors;\n            for (var newSelector in selectors) {\n              if (selectors.hasOwnProperty(newSelector)) {\n                extractSelector(currentSelector, rules, newSelector, selectors[newSelector]);\n              }\n            }\n          } else if (typeof propValue === 'object') {\n            // prop is a selector.\n            if (propValue !== null) {\n              extractSelector(currentSelector, rules, prop, propValue);\n            }\n          } else {\n            if (propValue !== undefined) {\n              // Else, add the rule to the currentSelector.\n              if (prop === 'margin' || prop === 'padding') {\n                expandQuads(currentRules, prop, propValue);\n              } else {\n                currentRules[prop] = propValue;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return rules;\n}\nfunction expandQuads(currentRules, name, value) {\n  var parts = typeof value === 'string' ? tokenizeWithParentheses(value) : [value];\n  if (parts.length === 0) {\n    parts.push(value);\n  }\n  if (parts[parts.length - 1] === '!important') {\n    // Remove !important from parts, and append it to each part individually\n    parts = parts.slice(0, -1).map(function (p) {\n      return p + ' !important';\n    });\n  }\n  currentRules[name + 'Top'] = parts[0];\n  currentRules[name + 'Right'] = parts[1] || parts[0];\n  currentRules[name + 'Bottom'] = parts[2] || parts[0];\n  currentRules[name + 'Left'] = parts[3] || parts[1] || parts[0];\n}\nfunction getKeyForRules(options, rules) {\n  var serialized = [options.rtl ? 'rtl' : 'ltr'];\n  var hasProps = false;\n  for (var _i = 0, _a = rules.__order; _i < _a.length; _i++) {\n    var selector = _a[_i];\n    serialized.push(selector);\n    var rulesForSelector = rules[selector];\n    for (var propName in rulesForSelector) {\n      if (rulesForSelector.hasOwnProperty(propName) && rulesForSelector[propName] !== undefined) {\n        hasProps = true;\n        serialized.push(propName, rulesForSelector[propName]);\n      }\n    }\n  }\n  return hasProps ? serialized.join('') : undefined;\n}\nfunction repeatString(target, count) {\n  if (count <= 0) {\n    return '';\n  }\n  if (count === 1) {\n    return target;\n  }\n  return target + repeatString(target, count - 1);\n}\nexport function serializeRuleEntries(options, ruleEntries) {\n  if (!ruleEntries) {\n    return '';\n  }\n  var allEntries = [];\n  for (var entry in ruleEntries) {\n    if (ruleEntries.hasOwnProperty(entry) && entry !== DISPLAY_NAME && ruleEntries[entry] !== undefined) {\n      allEntries.push(entry, ruleEntries[entry]);\n    }\n  }\n  // Apply transforms.\n  for (var i = 0; i < allEntries.length; i += 2) {\n    kebabRules(allEntries, i);\n    provideUnits(allEntries, i);\n    rtlifyRules(options, allEntries, i);\n    prefixRules(allEntries, i);\n  }\n  // Apply punctuation.\n  for (var i = 1; i < allEntries.length; i += 4) {\n    allEntries.splice(i, 1, ':', allEntries[i], ';');\n  }\n  return allEntries.join('');\n}\nexport function styleToRegistration(options) {\n  var args = [];\n  for (var _i = 1; _i < arguments.length; _i++) {\n    args[_i - 1] = arguments[_i];\n  }\n  var rules = extractRules(args);\n  var key = getKeyForRules(options, rules);\n  if (key) {\n    var stylesheet = Stylesheet.getInstance();\n    var registration = {\n      className: stylesheet.classNameFromKey(key),\n      key: key,\n      args: args\n    };\n    if (!registration.className) {\n      registration.className = stylesheet.getClassName(getDisplayName(rules));\n      var rulesToInsert = [];\n      for (var _a = 0, _b = rules.__order; _a < _b.length; _a++) {\n        var selector = _b[_a];\n        rulesToInsert.push(selector, serializeRuleEntries(options, rules[selector]));\n      }\n      registration.rulesToInsert = rulesToInsert;\n    }\n    return registration;\n  }\n  return undefined;\n}\n/**\n * Insert style to stylesheet.\n * @param registration Style registration.\n * @param specificityMultiplier Number of times classname selector is repeated in the css rule.\n * This is to increase css specificity in case it's needed. Default to 1.\n */\nexport function applyRegistration(registration, specificityMultiplier) {\n  if (specificityMultiplier === void 0) {\n    specificityMultiplier = 1;\n  }\n  var stylesheet = Stylesheet.getInstance();\n  var className = registration.className,\n    key = registration.key,\n    args = registration.args,\n    rulesToInsert = registration.rulesToInsert;\n  if (rulesToInsert) {\n    // rulesToInsert is an ordered array of selector/rule pairs.\n    for (var i = 0; i < rulesToInsert.length; i += 2) {\n      var rules = rulesToInsert[i + 1];\n      if (rules) {\n        var selector = rulesToInsert[i];\n        selector = selector.replace(/&/g, repeatString(\".\" + registration.className, specificityMultiplier));\n        // Insert. Note if a media query, we must close the query with a final bracket.\n        var processedRule = selector + \"{\" + rules + \"}\" + (selector.indexOf('@') === 0 ? '}' : '');\n        stylesheet.insertRule(processedRule);\n      }\n    }\n    stylesheet.cacheClassName(className, key, args, rulesToInsert);\n  }\n}\nexport function styleToClassName(options) {\n  var args = [];\n  for (var _i = 1; _i < arguments.length; _i++) {\n    args[_i - 1] = arguments[_i];\n  }\n  var registration = styleToRegistration.apply(void 0, __spreadArray([options], args));\n  if (registration) {\n    applyRegistration(registration, options.specificityMultiplier);\n    return registration.className;\n  }\n  return '';\n}","map":{"version":3,"mappings":"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","names":["Stylesheet","kebabRules","prefixRules","provideUnits","rtlifyRules","tokenizeWithParentheses","DISPLAY_NAME","getDisplayName","rules","rootStyle","displayName","undefined","globalSelectorRegExp","expandCommaSeparatedGlobals","selectorWithGlobals","test","replacementInfo","findGlobal","match","exec","indexOf","push","index","length","split","map","v","trim","join","reverse","reduce","selector","_a","matchIndex","matchEndIndex","replacement","prefix","slice","suffix","expandSelector","newSelector","currentSelector","replace","extractSelector","value","__order","extractRules","s","forEach","separatedSelector","args","stylesheet","getInstance","currentRules","args_1","_i","arg","expandedRules","argsFromClassName","Array","isArray","prop","hasOwnProperty","propValue","selectors","expandQuads","name","parts","getKeyForRules","options","serialized","rtl","hasProps","rulesForSelector","propName","repeatString","target","count","serializeRuleEntries","ruleEntries","allEntries","entry","i","splice","styleToRegistration","key","registration","className","classNameFromKey","getClassName","rulesToInsert","_b","applyRegistration","specificityMultiplier","processedRule","insertRule","cacheClassName","styleToClassName"],"sources":["/Users/edward/Zhuo/NYU/FA22/design_project/project/node_modules/@fluentui/merge-styles/src/styleToClassName.ts"],"sourcesContent":["import { IStyle } from './IStyle';\nimport { IRawStyle } from './IRawStyle';\n\nimport { Stylesheet } from './Stylesheet';\nimport { kebabRules } from './transforms/kebabRules';\nimport { prefixRules } from './transforms/prefixRules';\nimport { provideUnits } from './transforms/provideUnits';\nimport { rtlifyRules } from './transforms/rtlifyRules';\nimport { IStyleOptions } from './IStyleOptions';\nimport { tokenizeWithParentheses } from './tokenizeWithParentheses';\n\nconst DISPLAY_NAME = 'displayName';\n\ntype IDictionary = { [key: string]: any };\n\ninterface IRuleSet {\n  __order: string[];\n  [key: string]: IDictionary;\n}\n\nfunction getDisplayName(rules?: { [key: string]: IRawStyle }): string | undefined {\n  const rootStyle: IStyle = rules && rules['&'];\n\n  return rootStyle ? (rootStyle as IRawStyle).displayName : undefined;\n}\n\nconst globalSelectorRegExp = /\\:global\\((.+?)\\)/g;\n\ntype ReplacementInfo = [number, number, string];\n\n/**\n * Finds comma separated selectors in a :global() e.g. \":global(.class1, .class2, .class3)\"\n * and wraps them each in their own global \":global(.class1), :global(.class2), :global(.class3)\"\n *\n * @param selectorWithGlobals The selector to process\n * @returns The updated selector\n */\nfunction expandCommaSeparatedGlobals(selectorWithGlobals: string): string {\n  // We the selector does not have a :global() we can shortcut\n  if (!globalSelectorRegExp.test(selectorWithGlobals)) {\n    return selectorWithGlobals;\n  }\n\n  const replacementInfo: ReplacementInfo[] = [];\n\n  const findGlobal = /\\:global\\((.+?)\\)/g;\n  let match = null;\n  // Create a result list for global selectors so we can replace them.\n  while ((match = findGlobal.exec(selectorWithGlobals))) {\n    // Only if the found selector is a comma separated list we'll process it.\n    if (match[1].indexOf(',') > -1) {\n      replacementInfo.push([\n        match.index,\n        match.index + match[0].length,\n        // Wrap each of the found selectors in :global()\n        match[1]\n          .split(',')\n          .map((v: string) => `:global(${v.trim()})`)\n          .join(', '),\n      ]);\n    }\n  }\n\n  // Replace the found selectors with their wrapped variants in reverse order\n  return replacementInfo\n    .reverse()\n    .reduce((selector: string, [matchIndex, matchEndIndex, replacement]: ReplacementInfo) => {\n      const prefix = selector.slice(0, matchIndex);\n      const suffix = selector.slice(matchEndIndex);\n\n      return prefix + replacement + suffix;\n    }, selectorWithGlobals);\n}\n\nfunction expandSelector(newSelector: string, currentSelector: string): string {\n  if (newSelector.indexOf(':global(') >= 0) {\n    return newSelector.replace(globalSelectorRegExp, '$1');\n  } else if (newSelector.indexOf(':') === 0) {\n    return currentSelector + newSelector;\n  } else if (newSelector.indexOf('&') < 0) {\n    return currentSelector + ' ' + newSelector;\n  }\n\n  return newSelector;\n}\n\nfunction extractSelector(currentSelector: string, rules: IRuleSet = { __order: [] }, selector: string, value: IStyle) {\n  if (selector.indexOf('@') === 0) {\n    selector = selector + '{' + currentSelector;\n    extractRules([value], rules, selector);\n  } else if (selector.indexOf(',') > -1) {\n    expandCommaSeparatedGlobals(selector)\n      .split(',')\n      .map((s: string) => s.trim())\n      .forEach((separatedSelector: string) =>\n        extractRules([value], rules, expandSelector(separatedSelector, currentSelector)),\n      );\n  } else {\n    extractRules([value], rules, expandSelector(selector, currentSelector));\n  }\n}\n\nfunction extractRules(args: IStyle[], rules: IRuleSet = { __order: [] }, currentSelector: string = '&'): IRuleSet {\n  const stylesheet = Stylesheet.getInstance();\n  let currentRules: IDictionary | undefined = rules[currentSelector] as IDictionary;\n\n  if (!currentRules) {\n    currentRules = {};\n    rules[currentSelector] = currentRules;\n    rules.__order.push(currentSelector);\n  }\n\n  for (const arg of args) {\n    // If the arg is a string, we need to look up the class map and merge.\n    if (typeof arg === 'string') {\n      const expandedRules = stylesheet.argsFromClassName(arg);\n\n      if (expandedRules) {\n        extractRules(expandedRules, rules, currentSelector);\n      }\n      // Else if the arg is an array, we need to recurse in.\n    } else if (Array.isArray(arg)) {\n      extractRules(arg, rules, currentSelector);\n    } else {\n      for (const prop in arg as any) {\n        if ((arg as any).hasOwnProperty(prop)) {\n          const propValue = (arg as any)[prop];\n\n          if (prop === 'selectors') {\n            // every child is a selector.\n            const selectors: { [key: string]: IStyle } = (arg as any).selectors;\n\n            for (const newSelector in selectors) {\n              if (selectors.hasOwnProperty(newSelector)) {\n                extractSelector(currentSelector, rules, newSelector, selectors[newSelector]);\n              }\n            }\n          } else if (typeof propValue === 'object') {\n            // prop is a selector.\n            if (propValue !== null) {\n              extractSelector(currentSelector, rules, prop, propValue);\n            }\n          } else {\n            if (propValue !== undefined) {\n              // Else, add the rule to the currentSelector.\n              if (prop === 'margin' || prop === 'padding') {\n                expandQuads(currentRules, prop, propValue);\n              } else {\n                (currentRules as any)[prop] = propValue;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return rules;\n}\n\nfunction expandQuads(currentRules: IDictionary, name: string, value: string): void {\n  let parts = typeof value === 'string' ? tokenizeWithParentheses(value) : [value];\n\n  if (parts.length === 0) {\n    parts.push(value);\n  }\n\n  if (parts[parts.length - 1] === '!important') {\n    // Remove !important from parts, and append it to each part individually\n    parts = parts.slice(0, -1).map(p => p + ' !important');\n  }\n\n  currentRules[name + 'Top'] = parts[0];\n  currentRules[name + 'Right'] = parts[1] || parts[0];\n  currentRules[name + 'Bottom'] = parts[2] || parts[0];\n  currentRules[name + 'Left'] = parts[3] || parts[1] || parts[0];\n}\n\nfunction getKeyForRules(options: IStyleOptions, rules: IRuleSet): string | undefined {\n  const serialized: string[] = [options.rtl ? 'rtl' : 'ltr'];\n  let hasProps = false;\n\n  for (const selector of rules.__order) {\n    serialized.push(selector);\n    const rulesForSelector = rules[selector];\n\n    for (const propName in rulesForSelector) {\n      if (rulesForSelector.hasOwnProperty(propName) && rulesForSelector[propName] !== undefined) {\n        hasProps = true;\n        serialized.push(propName, rulesForSelector[propName]);\n      }\n    }\n  }\n\n  return hasProps ? serialized.join('') : undefined;\n}\n\nfunction repeatString(target: string, count: number): string {\n  if (count <= 0) {\n    return '';\n  }\n\n  if (count === 1) {\n    return target;\n  }\n\n  return target + repeatString(target, count - 1);\n}\n\nexport function serializeRuleEntries(options: IStyleOptions, ruleEntries: { [key: string]: string | number }): string {\n  if (!ruleEntries) {\n    return '';\n  }\n\n  const allEntries: (string | number)[] = [];\n\n  for (const entry in ruleEntries) {\n    if (ruleEntries.hasOwnProperty(entry) && entry !== DISPLAY_NAME && ruleEntries[entry] !== undefined) {\n      allEntries.push(entry, ruleEntries[entry]);\n    }\n  }\n\n  // Apply transforms.\n  for (let i = 0; i < allEntries.length; i += 2) {\n    kebabRules(allEntries, i);\n    provideUnits(allEntries, i);\n    rtlifyRules(options, allEntries, i);\n    prefixRules(allEntries, i);\n  }\n\n  // Apply punctuation.\n  for (let i = 1; i < allEntries.length; i += 4) {\n    allEntries.splice(i, 1, ':', allEntries[i], ';');\n  }\n\n  return allEntries.join('');\n}\n\nexport interface IRegistration {\n  className: string;\n  key: string;\n  args: IStyle[];\n  rulesToInsert: string[];\n}\n\nexport function styleToRegistration(options: IStyleOptions, ...args: IStyle[]): IRegistration | undefined {\n  const rules: IRuleSet = extractRules(args);\n  const key = getKeyForRules(options, rules);\n\n  if (key) {\n    const stylesheet = Stylesheet.getInstance();\n    const registration: Partial<IRegistration> = {\n      className: stylesheet.classNameFromKey(key),\n      key,\n      args,\n    };\n\n    if (!registration.className) {\n      registration.className = stylesheet.getClassName(getDisplayName(rules));\n      const rulesToInsert: string[] = [];\n\n      for (const selector of rules.__order) {\n        rulesToInsert.push(selector, serializeRuleEntries(options, rules[selector]));\n      }\n      registration.rulesToInsert = rulesToInsert;\n    }\n\n    return registration as IRegistration;\n  }\n\n  return undefined;\n}\n\n/**\n * Insert style to stylesheet.\n * @param registration Style registration.\n * @param specificityMultiplier Number of times classname selector is repeated in the css rule.\n * This is to increase css specificity in case it's needed. Default to 1.\n */\nexport function applyRegistration(registration: IRegistration, specificityMultiplier: number = 1): void {\n  const stylesheet = Stylesheet.getInstance();\n  const { className, key, args, rulesToInsert } = registration;\n\n  if (rulesToInsert) {\n    // rulesToInsert is an ordered array of selector/rule pairs.\n    for (let i = 0; i < rulesToInsert.length; i += 2) {\n      const rules = rulesToInsert[i + 1];\n      if (rules) {\n        let selector = rulesToInsert[i];\n        selector = selector.replace(/&/g, repeatString(`.${registration.className}`, specificityMultiplier));\n\n        // Insert. Note if a media query, we must close the query with a final bracket.\n        const processedRule = `${selector}{${rules}}${selector.indexOf('@') === 0 ? '}' : ''}`;\n        stylesheet.insertRule(processedRule);\n      }\n    }\n    stylesheet.cacheClassName(className!, key!, args!, rulesToInsert);\n  }\n}\n\nexport function styleToClassName(options: IStyleOptions, ...args: IStyle[]): string {\n  const registration = styleToRegistration(options, ...args);\n  if (registration) {\n    applyRegistration(registration, options.specificityMultiplier);\n\n    return registration.className;\n  }\n\n  return '';\n}\n"]},"metadata":{},"sourceType":"module"}