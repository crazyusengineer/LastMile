{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { Customizations, getWindow } from '@fluentui/utilities';\nimport { loadTheme as legacyLoadTheme } from '@microsoft/load-themed-styles';\nimport { createTheme } from '@fluentui/theme';\nexport { createTheme } from '@fluentui/theme';\nvar _theme = createTheme({});\nvar _onThemeChangeCallbacks = [];\nexport var ThemeSettingName = 'theme';\nexport function initializeThemeInCustomizations() {\n  var _a;\n  var _b, _c;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  var win = getWindow();\n  if ((_b = win === null || win === void 0 ? void 0 : win.FabricConfig) === null || _b === void 0 ? void 0 : _b.legacyTheme) {\n    // does everything the `else` clause does and more, such as invoke legacy theming\n    loadTheme(win.FabricConfig.legacyTheme);\n  } else if (!Customizations.getSettings([ThemeSettingName]).theme) {\n    if ((_c = win === null || win === void 0 ? void 0 : win.FabricConfig) === null || _c === void 0 ? void 0 : _c.theme) {\n      _theme = createTheme(win.FabricConfig.theme);\n    }\n    // Set the default theme.\n    Customizations.applySettings((_a = {}, _a[ThemeSettingName] = _theme, _a));\n  }\n}\ninitializeThemeInCustomizations();\n/**\n * Gets the theme object\n * @param depComments - Whether to include deprecated tags as comments for deprecated slots.\n */\nexport function getTheme(depComments) {\n  if (depComments === void 0) {\n    depComments = false;\n  }\n  if (depComments === true) {\n    _theme = createTheme({}, depComments);\n  }\n  return _theme;\n}\n/**\n * Registers a callback that gets called whenever the theme changes.\n * This should only be used when the component cannot automatically get theme changes through its state.\n * This will not register duplicate callbacks.\n */\nexport function registerOnThemeChangeCallback(callback) {\n  if (_onThemeChangeCallbacks.indexOf(callback) === -1) {\n    _onThemeChangeCallbacks.push(callback);\n  }\n}\n/**\n * See registerOnThemeChangeCallback().\n * Removes previously registered callbacks.\n */\nexport function removeOnThemeChangeCallback(callback) {\n  var i = _onThemeChangeCallbacks.indexOf(callback);\n  if (i === -1) {\n    return;\n  }\n  _onThemeChangeCallbacks.splice(i, 1);\n}\n/**\n * Applies the theme, while filling in missing slots.\n * @param theme - Partial theme object.\n * @param depComments - Whether to include deprecated tags as comments for deprecated slots.\n */\nexport function loadTheme(theme, depComments) {\n  var _a;\n  if (depComments === void 0) {\n    depComments = false;\n  }\n  _theme = createTheme(theme, depComments);\n  // Invoke the legacy method of theming the page as well.\n  legacyLoadTheme(__assign(__assign(__assign(__assign({}, _theme.palette), _theme.semanticColors), _theme.effects), _loadFonts(_theme)));\n  Customizations.applySettings((_a = {}, _a[ThemeSettingName] = _theme, _a));\n  _onThemeChangeCallbacks.forEach(function (callback) {\n    try {\n      callback(_theme);\n    } catch (e) {\n      // don't let a bad callback break everything else\n    }\n  });\n  return _theme;\n}\n/**\n * Loads font variables into a JSON object.\n * @param theme - The theme object\n */\nfunction _loadFonts(theme) {\n  var lines = {};\n  for (var _i = 0, _a = Object.keys(theme.fonts); _i < _a.length; _i++) {\n    var fontName = _a[_i];\n    var font = theme.fonts[fontName];\n    for (var _b = 0, _c = Object.keys(font); _b < _c.length; _b++) {\n      var propName = _c[_b];\n      var name_1 = fontName + propName.charAt(0).toUpperCase() + propName.slice(1);\n      var value = font[propName];\n      if (propName === 'fontSize' && typeof value === 'number') {\n        // if it's a number, convert it to px by default like our theming system does\n        value = value + 'px';\n      }\n      lines[name_1] = value;\n    }\n  }\n  return lines;\n}","map":{"version":3,"mappings":"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","names":["Customizations","getWindow","loadTheme","legacyLoadTheme","createTheme","_theme","_onThemeChangeCallbacks","ThemeSettingName","initializeThemeInCustomizations","win","FabricConfig","legacyTheme","getSettings","theme","applySettings","_a","getTheme","depComments","registerOnThemeChangeCallback","callback","indexOf","push","removeOnThemeChangeCallback","i","splice","palette","semanticColors","effects","_loadFonts","forEach","e","lines","keys","fonts","_i","fontName","font","_c","_b","propName","name_1","charAt","toUpperCase","slice","value"],"sources":["/Users/edward/Zhuo/NYU/FA22/design_project/project/node_modules/@fluentui/style-utilities/lib/src/styles/theme.ts"],"sourcesContent":["import { Customizations, getWindow } from '@fluentui/utilities';\nimport { loadTheme as legacyLoadTheme } from '@microsoft/load-themed-styles';\nimport { createTheme } from '@fluentui/theme';\nimport type { ITheme, IPartialTheme, IFontStyles } from '../interfaces/index';\nimport type { IRawStyle } from '@fluentui/merge-styles';\n\nexport { createTheme } from '@fluentui/theme';\n\nlet _theme: ITheme = createTheme({});\nlet _onThemeChangeCallbacks: Array<(theme: ITheme) => void> = [];\n\nexport const ThemeSettingName = 'theme';\n\nexport function initializeThemeInCustomizations(): void {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const win: any = getWindow();\n\n  if (win?.FabricConfig?.legacyTheme) {\n    // does everything the `else` clause does and more, such as invoke legacy theming\n    loadTheme(win.FabricConfig.legacyTheme);\n  } else if (!Customizations.getSettings([ThemeSettingName]).theme) {\n    if (win?.FabricConfig?.theme) {\n      _theme = createTheme(win.FabricConfig.theme);\n    }\n\n    // Set the default theme.\n    Customizations.applySettings({ [ThemeSettingName]: _theme });\n  }\n}\n\ninitializeThemeInCustomizations();\n\n/**\n * Gets the theme object\n * @param depComments - Whether to include deprecated tags as comments for deprecated slots.\n */\nexport function getTheme(depComments: boolean = false): ITheme {\n  if (depComments === true) {\n    _theme = createTheme({}, depComments);\n  }\n  return _theme;\n}\n\n/**\n * Registers a callback that gets called whenever the theme changes.\n * This should only be used when the component cannot automatically get theme changes through its state.\n * This will not register duplicate callbacks.\n */\nexport function registerOnThemeChangeCallback(callback: (theme: ITheme) => void): void {\n  if (_onThemeChangeCallbacks.indexOf(callback) === -1) {\n    _onThemeChangeCallbacks.push(callback);\n  }\n}\n\n/**\n * See registerOnThemeChangeCallback().\n * Removes previously registered callbacks.\n */\nexport function removeOnThemeChangeCallback(callback: (theme: ITheme) => void): void {\n  const i = _onThemeChangeCallbacks.indexOf(callback);\n  if (i === -1) {\n    return;\n  }\n\n  _onThemeChangeCallbacks.splice(i, 1);\n}\n\n/**\n * Applies the theme, while filling in missing slots.\n * @param theme - Partial theme object.\n * @param depComments - Whether to include deprecated tags as comments for deprecated slots.\n */\nexport function loadTheme(theme: IPartialTheme, depComments: boolean = false): ITheme {\n  _theme = createTheme(theme, depComments);\n\n  // Invoke the legacy method of theming the page as well.\n  legacyLoadTheme({ ..._theme.palette, ..._theme.semanticColors, ..._theme.effects, ..._loadFonts(_theme) });\n\n  Customizations.applySettings({ [ThemeSettingName]: _theme });\n\n  _onThemeChangeCallbacks.forEach((callback: (theme: ITheme) => void) => {\n    try {\n      callback(_theme);\n    } catch (e) {\n      // don't let a bad callback break everything else\n    }\n  });\n\n  return _theme;\n}\n\n/**\n * Loads font variables into a JSON object.\n * @param theme - The theme object\n */\nfunction _loadFonts(theme: ITheme): { [name: string]: string } {\n  const lines: { [key: string]: string } = {};\n\n  for (const fontName of Object.keys(theme.fonts)) {\n    const font: IRawStyle = theme.fonts[fontName as keyof IFontStyles];\n\n    for (const propName of Object.keys(font)) {\n      const name: string = fontName + propName.charAt(0).toUpperCase() + propName.slice(1);\n      let value = font[propName as keyof IRawStyle] as string;\n\n      if (propName === 'fontSize' && typeof value === 'number') {\n        // if it's a number, convert it to px by default like our theming system does\n        value = value + 'px';\n      }\n      lines[name] = value;\n    }\n  }\n  return lines;\n}\n"]},"metadata":{},"sourceType":"module"}