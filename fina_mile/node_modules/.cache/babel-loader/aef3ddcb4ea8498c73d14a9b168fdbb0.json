{"ast":null,"code":"import * as React from 'react';\n/**\n * Hook which synchronously executes a callback when the component is about to unmount.\n *\n * @param callback - Function to call during unmount.\n */\nexport var useUnmount = function (callback) {\n  var unmountRef = React.useRef(callback);\n  unmountRef.current = callback;\n  React.useEffect(function () {\n    return function () {\n      var _a;\n      (_a = unmountRef.current) === null || _a === void 0 ? void 0 : _a.call(unmountRef);\n    };\n  }, []);\n};","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B;;;;;AAKA,OAAO,IAAMC,UAAU,GAAG,UAACC,QAAoB;EAC7C,IAAMC,UAAU,GAAGH,KAAK,CAACI,MAAM,CAACF,QAAQ,CAAC;EACzCC,UAAU,CAACE,OAAO,GAAGH,QAAQ;EAC7BF,KAAK,CAACM,SAAS,CACb;IAAM;;MACJ,gBAAU,CAACD,OAAO,+CAAlBF,UAAU,CAAY;IACxB,CAAC;EAFK,CAEL,EACD,EAAE,CACH;AACH,CAAC","names":["React","useUnmount","callback","unmountRef","useRef","current","useEffect"],"sources":["/Users/edward/Zhuo/NYU/FA22/design_project/project/node_modules/@fluentui/react/node_modules/@fluentui/react-hooks/src/useUnmount.ts"],"sourcesContent":["import * as React from 'react';\n\n/**\n * Hook which synchronously executes a callback when the component is about to unmount.\n *\n * @param callback - Function to call during unmount.\n */\nexport const useUnmount = (callback: () => void) => {\n  const unmountRef = React.useRef(callback);\n  unmountRef.current = callback;\n  React.useEffect(\n    () => () => {\n      unmountRef.current?.();\n    },\n    [],\n  );\n};\n"]},"metadata":{},"sourceType":"module"}