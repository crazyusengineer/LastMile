{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { classNames, MS_ICON } from './Icon.styles';\nimport { css, getNativeProps, htmlElementProperties, memoizeFunction } from '../../Utilities';\nimport { getIcon } from '../../Styling';\nexport var getIconContent = memoizeFunction(function (iconName) {\n  var _a = getIcon(iconName) || {\n      subset: {},\n      code: undefined\n    },\n    code = _a.code,\n    subset = _a.subset;\n  if (!code) {\n    return null;\n  }\n  return {\n    children: code,\n    iconClassName: subset.className,\n    fontFamily: subset.fontFace && subset.fontFace.fontFamily,\n    mergeImageProps: subset.mergeImageProps\n  };\n}, undefined, true /*ignoreNullOrUndefinedResult */);\n/**\n * Fast icon component which only supports font glyphs (not images) and can't be targeted by customizations.\n * To style the icon, use `className` or reference `ms-Icon` in CSS.\n * {@docCategory Icon}\n */\nexport var FontIcon = function (props) {\n  var iconName = props.iconName,\n    className = props.className,\n    _a = props.style,\n    style = _a === void 0 ? {} : _a;\n  var iconContent = getIconContent(iconName) || {};\n  var iconClassName = iconContent.iconClassName,\n    children = iconContent.children,\n    fontFamily = iconContent.fontFamily,\n    mergeImageProps = iconContent.mergeImageProps;\n  var nativeProps = getNativeProps(props, htmlElementProperties);\n  var accessibleName = props['aria-label'] || props.title;\n  var containerProps = props['aria-label'] || props['aria-labelledby'] || props.title ? {\n    role: mergeImageProps ? undefined : 'img'\n  } : {\n    'aria-hidden': true\n  };\n  var finalChildren = children;\n  if (mergeImageProps) {\n    if (typeof children === 'object' && typeof children.props === 'object' && accessibleName) {\n      finalChildren = React.cloneElement(children, {\n        alt: accessibleName\n      });\n    }\n  }\n  return React.createElement(\"i\", __assign({\n    \"data-icon-name\": iconName\n  }, containerProps, nativeProps, mergeImageProps ? {\n    title: undefined,\n    'aria-label': undefined\n  } : {}, {\n    className: css(MS_ICON, classNames.root, iconClassName, !iconName && classNames.placeholder, className),\n    // Apply the font family this way to ensure it doesn't get overridden by Fabric Core ms-Icon styles\n    // https://github.com/microsoft/fluentui/issues/10449\n    style: __assign({\n      fontFamily: fontFamily\n    }, style)\n  }), finalChildren);\n};\n/**\n * Memoized helper for rendering a FontIcon.\n * @param iconName - The name of the icon to use from the icon font.\n * @param className - Class name for styling the icon.\n * @param ariaLabel - Label for the icon for the benefit of screen readers.\n * {@docCategory Icon}\n */\nexport var getFontIcon = memoizeFunction(function (iconName, className, ariaLabel) {\n  return FontIcon({\n    iconName: iconName,\n    className: className,\n    'aria-label': ariaLabel\n  });\n});","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,UAAU,EAAEC,OAAO,QAAQ,eAAe;AACnD,SAASC,GAAG,EAAEC,cAAc,EAAEC,qBAAqB,EAAEC,eAAe,QAAQ,iBAAiB;AAC7F,SAASC,OAAO,QAAQ,eAAe;AAWvC,OAAO,IAAMC,cAAc,GAAGF,eAAe,CAC3C,UAACG,QAAiB;EACV,SAAuFF,OAAO,CAACE,QAAQ,CAAC,IAAI;MAChHC,MAAM,EAAE,EAAE;MACVC,IAAI,EAAEC;KACP;IAHOD,IAAI;IAAED,MAAM,YAGnB;EAED,IAAI,CAACC,IAAI,EAAE;IACT,OAAO,IAAI;;EAGb,OAAO;IACLE,QAAQ,EAAEF,IAAI;IACdG,aAAa,EAAEJ,MAAM,CAACK,SAAS;IAC/BC,UAAU,EAAEN,MAAM,CAACO,QAAQ,IAAIP,MAAM,CAACO,QAAQ,CAACD,UAAU;IACzDE,eAAe,EAAER,MAAM,CAACQ;GACzB;AACH,CAAC,EACDN,SAAS,EACT,IAAI,CAAC,iCACN;AAED;;;;;AAKA,OAAO,IAAMO,QAAQ,GAA4C,eAAK;EAC5D,YAAQ,GAA4BC,KAAK,SAAjC;IAAEL,SAAS,GAAiBK,KAAK,UAAtB;IAAEC,KAAeD,KAAK,MAAV;IAAVE,KAAK,mBAAG,EAAE;EACvC,IAAMC,WAAW,GAAGf,cAAc,CAACC,QAAQ,CAAC,IAAI,EAAE;EAC1C,iBAAa,GAA4Cc,WAAW,cAAvD;IAAEV,QAAQ,GAAkCU,WAAW,SAA7C;IAAEP,UAAU,GAAsBO,WAAW,WAAjC;IAAEL,eAAe,GAAKK,WAAW,gBAAhB;EAE5D,IAAMC,WAAW,GAAGpB,cAAc,CAAoCgB,KAAK,EAAEf,qBAAqB,CAAC;EACnG,IAAMoB,cAAc,GAAGL,KAAK,CAAC,YAAY,CAAC,IAAIA,KAAK,CAACM,KAAK;EACzD,IAAMC,cAAc,GAClBP,KAAK,CAAC,YAAY,CAAC,IAAIA,KAAK,CAAC,iBAAiB,CAAC,IAAIA,KAAK,CAACM,KAAK,GAC1D;IACEE,IAAI,EAAEV,eAAe,GAAGN,SAAS,GAAG;GACrC,GACD;IACE,aAAa,EAAE;GAChB;EAEP,IAAIiB,aAAa,GAAGhB,QAAQ;EAE5B,IAAIK,eAAe,EAAE;IACnB,IAAI,OAAOL,QAAQ,KAAK,QAAQ,IAAI,OAAOA,QAAQ,CAACO,KAAK,KAAK,QAAQ,IAAIK,cAAc,EAAE;MACxFI,aAAa,GAAG7B,KAAK,CAAC8B,YAAY,CAACjB,QAAQ,EAAE;QAAEkB,GAAG,EAAEN;MAAc,CAAE,CAAC;;;EAIzE,OACEzB;IAAA,kBACkBS;EAAQ,GACpBkB,cAAc,EACdH,WAAW,EACVN,eAAe,GAChB;IACEQ,KAAK,EAAEd,SAAS;IAChB,YAAY,EAAEA;GACf,GACD,EAAE,EAAC;IACPG,SAAS,EAAEZ,GAAG,CAACD,OAAO,EAAED,UAAU,CAAC+B,IAAI,EAAElB,aAAa,EAAE,CAACL,QAAQ,IAAIR,UAAU,CAACgC,WAAW,EAAElB,SAAS,CAAC;IACvG;IACA;IACAO,KAAK;MAAIN,UAAU;IAAA,GAAKM,KAAK;EAAA,IAE5BO,aAAa,CACZ;AAER,CAAC;AAED;;;;;;;AAOA,OAAO,IAAMK,WAAW,GAAG5B,eAAe,CAAC,UAACG,QAAgB,EAAEM,SAAkB,EAAEoB,SAAkB;EAClG,OAAOhB,QAAQ,CAAC;IAAEV,QAAQ;IAAEM,SAAS;IAAE,YAAY,EAAEoB;EAAS,CAAE,CAAC;AACnE,CAAC,CAAC","names":["React","classNames","MS_ICON","css","getNativeProps","htmlElementProperties","memoizeFunction","getIcon","getIconContent","iconName","subset","code","undefined","children","iconClassName","className","fontFamily","fontFace","mergeImageProps","FontIcon","props","_a","style","iconContent","nativeProps","accessibleName","title","containerProps","role","finalChildren","cloneElement","alt","root","placeholder","getFontIcon","ariaLabel"],"sources":["/Users/edward/Zhuo/NYU/FA22/design_project/project/node_modules/@fluentui/react/lib/components/src/components/Icon/FontIcon.tsx"],"sourcesContent":["import * as React from 'react';\nimport { classNames, MS_ICON } from './Icon.styles';\nimport { css, getNativeProps, htmlElementProperties, memoizeFunction } from '../../Utilities';\nimport { getIcon } from '../../Styling';\nimport type { IFontIconProps } from './Icon.types';\nimport type { IIconRecord, IIconSubsetRecord } from '../../Styling';\n\nexport interface IIconContent {\n  children?: string | JSX.Element;\n  iconClassName?: string;\n  fontFamily?: string;\n  mergeImageProps?: boolean;\n}\n\nexport const getIconContent = memoizeFunction(\n  (iconName?: string): IIconContent | null => {\n    const { code, subset }: Pick<IIconRecord, 'code'> & { subset: Partial<IIconSubsetRecord> } = getIcon(iconName) || {\n      subset: {},\n      code: undefined,\n    };\n\n    if (!code) {\n      return null;\n    }\n\n    return {\n      children: code,\n      iconClassName: subset.className,\n      fontFamily: subset.fontFace && subset.fontFace.fontFamily,\n      mergeImageProps: subset.mergeImageProps,\n    };\n  },\n  undefined,\n  true /*ignoreNullOrUndefinedResult */,\n);\n\n/**\n * Fast icon component which only supports font glyphs (not images) and can't be targeted by customizations.\n * To style the icon, use `className` or reference `ms-Icon` in CSS.\n * {@docCategory Icon}\n */\nexport const FontIcon: React.FunctionComponent<IFontIconProps> = props => {\n  const { iconName, className, style = {} } = props;\n  const iconContent = getIconContent(iconName) || {};\n  const { iconClassName, children, fontFamily, mergeImageProps } = iconContent;\n\n  const nativeProps = getNativeProps<React.HTMLAttributes<HTMLElement>>(props, htmlElementProperties);\n  const accessibleName = props['aria-label'] || props.title;\n  const containerProps =\n    props['aria-label'] || props['aria-labelledby'] || props.title\n      ? {\n          role: mergeImageProps ? undefined : 'img',\n        }\n      : {\n          'aria-hidden': true,\n        };\n\n  let finalChildren = children;\n\n  if (mergeImageProps) {\n    if (typeof children === 'object' && typeof children.props === 'object' && accessibleName) {\n      finalChildren = React.cloneElement(children, { alt: accessibleName });\n    }\n  }\n\n  return (\n    <i\n      data-icon-name={iconName}\n      {...containerProps}\n      {...nativeProps}\n      {...(mergeImageProps\n        ? {\n            title: undefined,\n            'aria-label': undefined,\n          }\n        : {})}\n      className={css(MS_ICON, classNames.root, iconClassName, !iconName && classNames.placeholder, className)}\n      // Apply the font family this way to ensure it doesn't get overridden by Fabric Core ms-Icon styles\n      // https://github.com/microsoft/fluentui/issues/10449\n      style={{ fontFamily, ...style }}\n    >\n      {finalChildren}\n    </i>\n  );\n};\n\n/**\n * Memoized helper for rendering a FontIcon.\n * @param iconName - The name of the icon to use from the icon font.\n * @param className - Class name for styling the icon.\n * @param ariaLabel - Label for the icon for the benefit of screen readers.\n * {@docCategory Icon}\n */\nexport const getFontIcon = memoizeFunction((iconName: string, className?: string, ariaLabel?: string) => {\n  return FontIcon({ iconName, className, 'aria-label': ariaLabel });\n});\n"]},"metadata":{},"sourceType":"module"}