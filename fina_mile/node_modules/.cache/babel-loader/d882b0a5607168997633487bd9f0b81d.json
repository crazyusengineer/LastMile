{"ast":null,"code":"import * as React from 'react';\nimport { useConst } from './useConst';\n/**\n *  Returns a wrapper function for `setTimeout` which automatically handles disposal.\n */\nexport var useSetTimeout = function () {\n  var timeoutIds = useConst({});\n  // Cleanup function.\n  React.useEffect(function () {\n    return function () {\n      for (var _i = 0, _a = Object.keys(timeoutIds); _i < _a.length; _i++) {\n        var id = _a[_i];\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        clearTimeout(id);\n      }\n    };\n  },\n  // useConst ensures this will never change, but react-hooks/exhaustive-deps doesn't know that\n  [timeoutIds]);\n  // Return wrapper which will auto cleanup.\n  return useConst({\n    setTimeout: function (func, duration) {\n      var id = setTimeout(func, duration);\n      timeoutIds[id] = 1;\n      return id;\n    },\n    clearTimeout: function (id) {\n      delete timeoutIds[id];\n      clearTimeout(id);\n    }\n  });\n};","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,QAAQ,QAAQ,YAAY;AAOrC;;;AAGA,OAAO,IAAMC,aAAa,GAAG;EAC3B,IAAMC,UAAU,GAAGF,QAAQ,CAAyB,EAAE,CAAC;EAEvD;EACAD,KAAK,CAACI,SAAS,CACb;IAAM;MACJ,KAAiB,UAAuB,EAAvBC,WAAM,CAACC,IAAI,CAACH,UAAU,CAAC,EAAvBI,cAAuB,EAAvBA,IAAuB,EAAE;QAArC,IAAMC,EAAE;QACX;QACAC,YAAY,CAACD,EAAS,CAAC;;IAE3B,CAAC;EALK,CAKL;EACD;EACA,CAACL,UAAU,CAAC,CACb;EAED;EACA,OAAOF,QAAQ,CAAC;IACdS,UAAU,EAAE,UAACC,IAAgB,EAAEC,QAAgB;MAC7C,IAAMJ,EAAE,GAAIE,UAAU,CAACC,IAAI,EAAEC,QAAQ,CAAuB;MAE5DT,UAAU,CAACK,EAAE,CAAC,GAAG,CAAC;MAElB,OAAOA,EAAE;IACX,CAAC;IAEDC,YAAY,EAAE,UAACD,EAAU;MACvB,OAAOL,UAAU,CAACK,EAAE,CAAC;MACrBC,YAAY,CAACD,EAAE,CAAC;IAClB;GACD,CAAC;AACJ,CAAC","names":["React","useConst","useSetTimeout","timeoutIds","useEffect","_a","keys","_i","id","clearTimeout","setTimeout","func","duration"],"sources":["/Users/edward/Zhuo/NYU/FA22/design_project/project/node_modules/@fluentui/react/node_modules/@fluentui/react-hooks/src/useSetTimeout.ts"],"sourcesContent":["import * as React from 'react';\nimport { useConst } from './useConst';\n\nexport type UseSetTimeoutReturnType = {\n  setTimeout: (callback: () => void, duration: number) => number;\n  clearTimeout: (id: number) => void;\n};\n\n/**\n *  Returns a wrapper function for `setTimeout` which automatically handles disposal.\n */\nexport const useSetTimeout = (): UseSetTimeoutReturnType => {\n  const timeoutIds = useConst<Record<number, number>>({});\n\n  // Cleanup function.\n  React.useEffect(\n    () => () => {\n      for (const id of Object.keys(timeoutIds)) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        clearTimeout(id as any);\n      }\n    },\n    // useConst ensures this will never change, but react-hooks/exhaustive-deps doesn't know that\n    [timeoutIds],\n  );\n\n  // Return wrapper which will auto cleanup.\n  return useConst({\n    setTimeout: (func: () => void, duration: number): number => {\n      const id = (setTimeout(func, duration) as unknown) as number;\n\n      timeoutIds[id] = 1;\n\n      return id;\n    },\n\n    clearTimeout: (id: number): void => {\n      delete timeoutIds[id];\n      clearTimeout(id);\n    },\n  });\n};\n"]},"metadata":{},"sourceType":"module"}