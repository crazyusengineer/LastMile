{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as React from 'react';\nimport { getWindow } from './dom/getWindow';\n/**\n * Utility component for delaying the render of a child component after a given delay. This component\n * requires a single child component; don't pass in many components. Wrap multiple components in a DIV\n * if necessary.\n *\n * @public\n * {@docCategory DelayedRender}\n */\nvar DelayedRender = /** @class */function (_super) {\n  __extends(DelayedRender, _super);\n  function DelayedRender(props) {\n    var _this = _super.call(this, props) || this;\n    _this.state = {\n      isRendered: getWindow() === undefined\n    };\n    return _this;\n  }\n  DelayedRender.prototype.componentDidMount = function () {\n    var _this = this;\n    var delay = this.props.delay;\n    this._timeoutId = window.setTimeout(function () {\n      _this.setState({\n        isRendered: true\n      });\n    }, delay);\n  };\n  DelayedRender.prototype.componentWillUnmount = function () {\n    if (this._timeoutId) {\n      clearTimeout(this._timeoutId);\n    }\n  };\n  DelayedRender.prototype.render = function () {\n    return this.state.isRendered ? React.Children.only(this.props.children) : null;\n  };\n  DelayedRender.defaultProps = {\n    delay: 0\n  };\n  return DelayedRender;\n}(React.Component);\nexport { DelayedRender };","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,SAAS,QAAQ,iBAAiB;AA2B3C;;;;;;;;AAQA;EAAmCC;EAOjC,uBAAYC,KAA0B;IAAtC,YACEC,kBAAMD,KAAK,CAAC;IACZE,KAAI,CAACC,KAAK,GAAG;MACXC,UAAU,EAAEN,SAAS,EAAE,KAAKO;KAC7B;;EACH;EAEOC,yCAAiB,GAAxB;IAAA;IACQ,SAAK,GAAK,IAAI,CAACN,KAAK,MAAf;IACX,IAAI,CAACO,UAAU,GAAGC,MAAM,CAACC,UAAU,CAAC;MAClCP,KAAI,CAACQ,QAAQ,CAAC;QACZN,UAAU,EAAE;OACb,CAAC;IACJ,CAAC,EAAEO,KAAK,CAAC;EACX,CAAC;EAEML,4CAAoB,GAA3B;IACE,IAAI,IAAI,CAACC,UAAU,EAAE;MACnBK,YAAY,CAAC,IAAI,CAACL,UAAU,CAAC;;EAEjC,CAAC;EAEMD,8BAAM,GAAb;IACE,OAAO,IAAI,CAACH,KAAK,CAACC,UAAU,GAAIP,KAAK,CAACgB,QAAQ,CAACC,IAAI,CAAC,IAAI,CAACd,KAAK,CAACe,QAAQ,CAA4B,GAAG,IAAI;EAC5G,CAAC;EA9BaT,0BAAY,GAAG;IAC3BK,KAAK,EAAE;GACR;EA6BH,oBAAC;CAAA,CAhCkCd,KAAK,CAACmB,SAAS;SAArCV,aAAa","names":["React","getWindow","__extends","props","_super","_this","state","isRendered","undefined","DelayedRender","_timeoutId","window","setTimeout","setState","delay","clearTimeout","Children","only","children","Component"],"sources":["/Users/edward/Zhuo/NYU/FA22/design_project/project/node_modules/@fluentui/react/node_modules/@fluentui/utilities/src/DelayedRender.tsx"],"sourcesContent":["import * as React from 'react';\nimport { getWindow } from './dom/getWindow';\n\n/**\n * DelayedRender component props.\n *\n * @public\n */\n// eslint-disable-next-line deprecation/deprecation\nexport interface IDelayedRenderProps extends React.Props<{}> {\n  /**\n   * Number of milliseconds to delay rendering children.\n   */\n  delay?: number;\n}\n\n/**\n * DelayedRender component state.\n *\n * @internal\n */\nexport interface IDelayedRenderState {\n  /**\n   * Whether the component is rendered or not.\n   */\n  isRendered: boolean;\n}\n\n/**\n * Utility component for delaying the render of a child component after a given delay. This component\n * requires a single child component; don't pass in many components. Wrap multiple components in a DIV\n * if necessary.\n *\n * @public\n * {@docCategory DelayedRender}\n */\nexport class DelayedRender extends React.Component<IDelayedRenderProps, IDelayedRenderState> {\n  public static defaultProps = {\n    delay: 0,\n  };\n\n  private _timeoutId: number | undefined;\n\n  constructor(props: IDelayedRenderProps) {\n    super(props);\n    this.state = {\n      isRendered: getWindow() === undefined,\n    };\n  }\n\n  public componentDidMount(): void {\n    let { delay } = this.props;\n    this._timeoutId = window.setTimeout(() => {\n      this.setState({\n        isRendered: true,\n      });\n    }, delay);\n  }\n\n  public componentWillUnmount(): void {\n    if (this._timeoutId) {\n      clearTimeout(this._timeoutId);\n    }\n  }\n\n  public render(): React.ReactElement<{}> | null {\n    return this.state.isRendered ? (React.Children.only(this.props.children) as React.ReactElement<{}>) : null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}