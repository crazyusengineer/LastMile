{"ast":null,"code":"import { __assign } from \"tslib\";\n/** Generates all the semantic slot colors based on the theme so far\n * We'll use these as fallbacks for semantic slots that the passed in theme did not define.\n * The caller must still mix in the customized semantic slots at the end.\n */\nexport function makeSemanticColors(p, e, s, isInverted, depComments) {\n  if (depComments === void 0) {\n    depComments = false;\n  }\n  var semanticColors = __assign({\n    primaryButtonBorder: 'transparent',\n    errorText: !isInverted ? '#a4262c' : '#F1707B',\n    messageText: !isInverted ? '#323130' : '#F3F2F1',\n    messageLink: !isInverted ? '#005A9E' : '#6CB8F6',\n    messageLinkHovered: !isInverted ? '#004578' : '#82C7FF',\n    infoIcon: !isInverted ? '#605e5c' : '#C8C6C4',\n    errorIcon: !isInverted ? '#A80000' : '#F1707B',\n    blockingIcon: !isInverted ? '#FDE7E9' : '#442726',\n    warningIcon: !isInverted ? '#797775' : '#C8C6C4',\n    severeWarningIcon: !isInverted ? '#D83B01' : '#FCE100',\n    successIcon: !isInverted ? '#107C10' : '#92C353',\n    infoBackground: !isInverted ? '#f3f2f1' : '#323130',\n    errorBackground: !isInverted ? '#FDE7E9' : '#442726',\n    blockingBackground: !isInverted ? '#FDE7E9' : '#442726',\n    warningBackground: !isInverted ? '#FFF4CE' : '#433519',\n    severeWarningBackground: !isInverted ? '#FED9CC' : '#4F2A0F',\n    successBackground: !isInverted ? '#DFF6DD' : '#393D1B',\n    // deprecated\n    warningHighlight: !isInverted ? '#ffb900' : '#fff100',\n    successText: !isInverted ? '#107C10' : '#92c353'\n  }, s);\n  var fullSemanticColors = getSemanticColors(p, e, semanticColors, isInverted);\n  return _fixDeprecatedSlots(fullSemanticColors, depComments);\n}\n/**\n * Map partial platte and effects to partial semantic colors.\n */\nexport function getSemanticColors(p, e, s, isInverted, depComments) {\n  if (depComments === void 0) {\n    depComments = false;\n  }\n  var result = {};\n  // map palette\n  var _a = p || {},\n    white = _a.white,\n    black = _a.black,\n    themePrimary = _a.themePrimary,\n    themeDark = _a.themeDark,\n    themeDarker = _a.themeDarker,\n    themeDarkAlt = _a.themeDarkAlt,\n    themeLighter = _a.themeLighter,\n    neutralLight = _a.neutralLight,\n    neutralLighter = _a.neutralLighter,\n    neutralDark = _a.neutralDark,\n    neutralQuaternary = _a.neutralQuaternary,\n    neutralQuaternaryAlt = _a.neutralQuaternaryAlt,\n    neutralPrimary = _a.neutralPrimary,\n    neutralSecondary = _a.neutralSecondary,\n    neutralSecondaryAlt = _a.neutralSecondaryAlt,\n    neutralTertiary = _a.neutralTertiary,\n    neutralTertiaryAlt = _a.neutralTertiaryAlt,\n    neutralLighterAlt = _a.neutralLighterAlt,\n    accent = _a.accent;\n  if (white) {\n    result.bodyBackground = white;\n    result.bodyFrameBackground = white;\n    result.accentButtonText = white;\n    result.buttonBackground = white;\n    result.primaryButtonText = white;\n    result.primaryButtonTextHovered = white;\n    result.primaryButtonTextPressed = white;\n    result.inputBackground = white;\n    result.inputForegroundChecked = white;\n    result.listBackground = white;\n    result.menuBackground = white;\n    result.cardStandoutBackground = white;\n  }\n  if (black) {\n    result.bodyTextChecked = black;\n    result.buttonTextCheckedHovered = black;\n  }\n  if (themePrimary) {\n    result.link = themePrimary;\n    result.primaryButtonBackground = themePrimary;\n    result.inputBackgroundChecked = themePrimary;\n    result.inputIcon = themePrimary;\n    result.inputFocusBorderAlt = themePrimary;\n    result.menuIcon = themePrimary;\n    result.menuHeader = themePrimary;\n    result.accentButtonBackground = themePrimary;\n  }\n  if (themeDark) {\n    result.primaryButtonBackgroundPressed = themeDark;\n    result.inputBackgroundCheckedHovered = themeDark;\n    result.inputIconHovered = themeDark;\n  }\n  if (themeDarker) {\n    result.linkHovered = themeDarker;\n  }\n  if (themeDarkAlt) {\n    result.primaryButtonBackgroundHovered = themeDarkAlt;\n  }\n  if (themeLighter) {\n    result.inputPlaceholderBackgroundChecked = themeLighter;\n  }\n  if (neutralLight) {\n    result.bodyBackgroundChecked = neutralLight;\n    result.bodyFrameDivider = neutralLight;\n    result.bodyDivider = neutralLight;\n    result.variantBorder = neutralLight;\n    result.buttonBackgroundCheckedHovered = neutralLight;\n    result.buttonBackgroundPressed = neutralLight;\n    result.listItemBackgroundChecked = neutralLight;\n    result.listHeaderBackgroundPressed = neutralLight;\n    result.menuItemBackgroundPressed = neutralLight;\n    // eslint-disable-next-line deprecation/deprecation\n    result.menuItemBackgroundChecked = neutralLight;\n  }\n  if (neutralLighter) {\n    result.bodyBackgroundHovered = neutralLighter;\n    result.buttonBackgroundHovered = neutralLighter;\n    result.buttonBackgroundDisabled = neutralLighter;\n    result.buttonBorderDisabled = neutralLighter;\n    result.primaryButtonBackgroundDisabled = neutralLighter;\n    result.disabledBackground = neutralLighter;\n    result.listItemBackgroundHovered = neutralLighter;\n    result.listHeaderBackgroundHovered = neutralLighter;\n    result.menuItemBackgroundHovered = neutralLighter;\n  }\n  if (neutralQuaternary) {\n    result.primaryButtonTextDisabled = neutralQuaternary;\n    result.disabledSubtext = neutralQuaternary;\n  }\n  if (neutralQuaternaryAlt) {\n    result.listItemBackgroundCheckedHovered = neutralQuaternaryAlt;\n  }\n  if (neutralTertiary) {\n    result.disabledBodyText = neutralTertiary;\n    result.variantBorderHovered = (s === null || s === void 0 ? void 0 : s.variantBorderHovered) || neutralTertiary;\n    result.buttonTextDisabled = neutralTertiary;\n    result.inputIconDisabled = neutralTertiary;\n    result.disabledText = neutralTertiary;\n  }\n  if (neutralPrimary) {\n    result.bodyText = neutralPrimary;\n    result.actionLink = neutralPrimary;\n    result.buttonText = neutralPrimary;\n    result.inputBorderHovered = neutralPrimary;\n    result.inputText = neutralPrimary;\n    result.listText = neutralPrimary;\n    result.menuItemText = neutralPrimary;\n  }\n  if (neutralLighterAlt) {\n    result.bodyStandoutBackground = neutralLighterAlt;\n    result.defaultStateBackground = neutralLighterAlt;\n  }\n  if (neutralDark) {\n    result.actionLinkHovered = neutralDark;\n    result.buttonTextHovered = neutralDark;\n    result.buttonTextChecked = neutralDark;\n    result.buttonTextPressed = neutralDark;\n    result.inputTextHovered = neutralDark;\n    result.menuItemTextHovered = neutralDark;\n  }\n  if (neutralSecondary) {\n    result.bodySubtext = neutralSecondary;\n    result.focusBorder = neutralSecondary;\n    result.inputBorder = neutralSecondary;\n    result.smallInputBorder = neutralSecondary;\n    result.inputPlaceholderText = neutralSecondary;\n  }\n  if (neutralSecondaryAlt) {\n    result.buttonBorder = neutralSecondaryAlt;\n  }\n  if (neutralTertiaryAlt) {\n    result.disabledBodySubtext = neutralTertiaryAlt;\n    result.disabledBorder = neutralTertiaryAlt;\n    result.buttonBackgroundChecked = neutralTertiaryAlt;\n    result.menuDivider = neutralTertiaryAlt;\n  }\n  if (accent) {\n    result.accentButtonBackground = accent;\n  }\n  // map effects\n  if (e === null || e === void 0 ? void 0 : e.elevation4) {\n    result.cardShadow = e.elevation4;\n  }\n  if (!isInverted && (e === null || e === void 0 ? void 0 : e.elevation8)) {\n    result.cardShadowHovered = e.elevation8;\n  } else if (result.variantBorderHovered) {\n    result.cardShadowHovered = '0 0 1px ' + result.variantBorderHovered;\n  }\n  result = __assign(__assign({}, result), s);\n  return result;\n}\nfunction _fixDeprecatedSlots(s, depComments) {\n  // Add @deprecated tag as comment if enabled\n  var dep = '';\n  if (depComments === true) {\n    dep = ' /* @deprecated */';\n  }\n  /* eslint-disable deprecation/deprecation */\n  s.listTextColor = s.listText + dep;\n  s.menuItemBackgroundChecked += dep;\n  s.warningHighlight += dep;\n  s.warningText = s.messageText + dep;\n  s.successText += dep;\n  /* eslint-enable deprecation/deprecation */\n  return s;\n}","map":{"version":3,"mappings":"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","names":["makeSemanticColors","p","e","s","isInverted","depComments","semanticColors","primaryButtonBorder","errorText","messageText","messageLink","messageLinkHovered","infoIcon","errorIcon","blockingIcon","warningIcon","severeWarningIcon","successIcon","infoBackground","errorBackground","blockingBackground","warningBackground","severeWarningBackground","successBackground","warningHighlight","successText","fullSemanticColors","getSemanticColors","_fixDeprecatedSlots","result","white","black","themePrimary","themeDark","themeDarker","themeDarkAlt","themeLighter","neutralLight","neutralLighter","neutralDark","neutralQuaternary","neutralQuaternaryAlt","neutralPrimary","neutralSecondary","neutralSecondaryAlt","neutralTertiary","neutralTertiaryAlt","neutralLighterAlt","accent","bodyBackground","bodyFrameBackground","accentButtonText","buttonBackground","primaryButtonText","primaryButtonTextHovered","primaryButtonTextPressed","inputBackground","inputForegroundChecked","listBackground","menuBackground","cardStandoutBackground","bodyTextChecked","buttonTextCheckedHovered","link","primaryButtonBackground","inputBackgroundChecked","inputIcon","inputFocusBorderAlt","menuIcon","menuHeader","accentButtonBackground","primaryButtonBackgroundPressed","inputBackgroundCheckedHovered","inputIconHovered","linkHovered","primaryButtonBackgroundHovered","inputPlaceholderBackgroundChecked","bodyBackgroundChecked","bodyFrameDivider","bodyDivider","variantBorder","buttonBackgroundCheckedHovered","buttonBackgroundPressed","listItemBackgroundChecked","listHeaderBackgroundPressed","menuItemBackgroundPressed","menuItemBackgroundChecked","bodyBackgroundHovered","buttonBackgroundHovered","buttonBackgroundDisabled","buttonBorderDisabled","primaryButtonBackgroundDisabled","disabledBackground","listItemBackgroundHovered","listHeaderBackgroundHovered","menuItemBackgroundHovered","primaryButtonTextDisabled","disabledSubtext","listItemBackgroundCheckedHovered","disabledBodyText","variantBorderHovered","buttonTextDisabled","inputIconDisabled","disabledText","bodyText","actionLink","buttonText","inputBorderHovered","inputText","listText","menuItemText","bodyStandoutBackground","defaultStateBackground","actionLinkHovered","buttonTextHovered","buttonTextChecked","buttonTextPressed","inputTextHovered","menuItemTextHovered","bodySubtext","focusBorder","inputBorder","smallInputBorder","inputPlaceholderText","buttonBorder","disabledBodySubtext","disabledBorder","buttonBackgroundChecked","menuDivider","elevation4","cardShadow","elevation8","cardShadowHovered","dep","listTextColor","warningText"],"sources":["/Users/edward/Zhuo/NYU/FA22/design_project/project/node_modules/@fluentui/react/node_modules/@fluentui/theme/lib/src/utilities/makeSemanticColors.ts"],"sourcesContent":["import type { IEffects, IPalette, ISemanticColors } from '../types/index';\n\n/** Generates all the semantic slot colors based on the theme so far\n * We'll use these as fallbacks for semantic slots that the passed in theme did not define.\n * The caller must still mix in the customized semantic slots at the end.\n */\nexport function makeSemanticColors(\n  p: IPalette,\n  e: IEffects,\n  s: Partial<ISemanticColors> | undefined,\n  isInverted: boolean,\n  depComments: boolean = false,\n): ISemanticColors {\n  const semanticColors: Partial<ISemanticColors> = {\n    primaryButtonBorder: 'transparent',\n\n    errorText: !isInverted ? '#a4262c' : '#F1707B',\n\n    messageText: !isInverted ? '#323130' : '#F3F2F1',\n    messageLink: !isInverted ? '#005A9E' : '#6CB8F6',\n    messageLinkHovered: !isInverted ? '#004578' : '#82C7FF',\n\n    infoIcon: !isInverted ? '#605e5c' : '#C8C6C4',\n    errorIcon: !isInverted ? '#A80000' : '#F1707B',\n    blockingIcon: !isInverted ? '#FDE7E9' : '#442726',\n    warningIcon: !isInverted ? '#797775' : '#C8C6C4',\n    severeWarningIcon: !isInverted ? '#D83B01' : '#FCE100',\n    successIcon: !isInverted ? '#107C10' : '#92C353',\n\n    infoBackground: !isInverted ? '#f3f2f1' : '#323130',\n    errorBackground: !isInverted ? '#FDE7E9' : '#442726',\n    blockingBackground: !isInverted ? '#FDE7E9' : '#442726',\n    warningBackground: !isInverted ? '#FFF4CE' : '#433519',\n    severeWarningBackground: !isInverted ? '#FED9CC' : '#4F2A0F',\n    successBackground: !isInverted ? '#DFF6DD' : '#393D1B',\n\n    // deprecated\n    warningHighlight: !isInverted ? '#ffb900' : '#fff100',\n    successText: !isInverted ? '#107C10' : '#92c353',\n\n    ...s,\n  };\n\n  const fullSemanticColors = getSemanticColors<ISemanticColors>(p, e, semanticColors, isInverted);\n  return _fixDeprecatedSlots(fullSemanticColors, depComments);\n}\n\n/**\n * Map partial platte and effects to partial semantic colors.\n */\nexport function getSemanticColors<TResult = Partial<ISemanticColors>>(\n  p: Partial<IPalette> | undefined,\n  e: Partial<IEffects> | undefined,\n  s: Partial<ISemanticColors> | undefined,\n  isInverted: boolean,\n  depComments: boolean = false,\n): TResult {\n  let result: Partial<ISemanticColors> = {};\n\n  // map palette\n  const {\n    white,\n    black,\n    themePrimary,\n    themeDark,\n    themeDarker,\n    themeDarkAlt,\n    themeLighter,\n    neutralLight,\n    neutralLighter,\n    neutralDark,\n    neutralQuaternary,\n    neutralQuaternaryAlt,\n    neutralPrimary,\n    neutralSecondary,\n    neutralSecondaryAlt,\n    neutralTertiary,\n    neutralTertiaryAlt,\n    neutralLighterAlt,\n    accent,\n  } = p || {};\n\n  if (white) {\n    result.bodyBackground = white;\n    result.bodyFrameBackground = white;\n    result.accentButtonText = white;\n    result.buttonBackground = white;\n    result.primaryButtonText = white;\n    result.primaryButtonTextHovered = white;\n    result.primaryButtonTextPressed = white;\n    result.inputBackground = white;\n    result.inputForegroundChecked = white;\n    result.listBackground = white;\n    result.menuBackground = white;\n    result.cardStandoutBackground = white;\n  }\n  if (black) {\n    result.bodyTextChecked = black;\n    result.buttonTextCheckedHovered = black;\n  }\n  if (themePrimary) {\n    result.link = themePrimary;\n    result.primaryButtonBackground = themePrimary;\n    result.inputBackgroundChecked = themePrimary;\n    result.inputIcon = themePrimary;\n    result.inputFocusBorderAlt = themePrimary;\n    result.menuIcon = themePrimary;\n    result.menuHeader = themePrimary;\n    result.accentButtonBackground = themePrimary;\n  }\n  if (themeDark) {\n    result.primaryButtonBackgroundPressed = themeDark;\n    result.inputBackgroundCheckedHovered = themeDark;\n    result.inputIconHovered = themeDark;\n  }\n  if (themeDarker) {\n    result.linkHovered = themeDarker;\n  }\n  if (themeDarkAlt) {\n    result.primaryButtonBackgroundHovered = themeDarkAlt;\n  }\n  if (themeLighter) {\n    result.inputPlaceholderBackgroundChecked = themeLighter;\n  }\n  if (neutralLight) {\n    result.bodyBackgroundChecked = neutralLight;\n    result.bodyFrameDivider = neutralLight;\n    result.bodyDivider = neutralLight;\n    result.variantBorder = neutralLight;\n    result.buttonBackgroundCheckedHovered = neutralLight;\n    result.buttonBackgroundPressed = neutralLight;\n    result.listItemBackgroundChecked = neutralLight;\n    result.listHeaderBackgroundPressed = neutralLight;\n    result.menuItemBackgroundPressed = neutralLight;\n    // eslint-disable-next-line deprecation/deprecation\n    result.menuItemBackgroundChecked = neutralLight;\n  }\n  if (neutralLighter) {\n    result.bodyBackgroundHovered = neutralLighter;\n    result.buttonBackgroundHovered = neutralLighter;\n    result.buttonBackgroundDisabled = neutralLighter;\n    result.buttonBorderDisabled = neutralLighter;\n    result.primaryButtonBackgroundDisabled = neutralLighter;\n    result.disabledBackground = neutralLighter;\n    result.listItemBackgroundHovered = neutralLighter;\n    result.listHeaderBackgroundHovered = neutralLighter;\n    result.menuItemBackgroundHovered = neutralLighter;\n  }\n  if (neutralQuaternary) {\n    result.primaryButtonTextDisabled = neutralQuaternary;\n    result.disabledSubtext = neutralQuaternary;\n  }\n  if (neutralQuaternaryAlt) {\n    result.listItemBackgroundCheckedHovered = neutralQuaternaryAlt;\n  }\n  if (neutralTertiary) {\n    result.disabledBodyText = neutralTertiary;\n    result.variantBorderHovered = s?.variantBorderHovered || neutralTertiary;\n    result.buttonTextDisabled = neutralTertiary;\n    result.inputIconDisabled = neutralTertiary;\n    result.disabledText = neutralTertiary;\n  }\n  if (neutralPrimary) {\n    result.bodyText = neutralPrimary;\n    result.actionLink = neutralPrimary;\n    result.buttonText = neutralPrimary;\n    result.inputBorderHovered = neutralPrimary;\n    result.inputText = neutralPrimary;\n    result.listText = neutralPrimary;\n    result.menuItemText = neutralPrimary;\n  }\n  if (neutralLighterAlt) {\n    result.bodyStandoutBackground = neutralLighterAlt;\n    result.defaultStateBackground = neutralLighterAlt;\n  }\n  if (neutralDark) {\n    result.actionLinkHovered = neutralDark;\n    result.buttonTextHovered = neutralDark;\n    result.buttonTextChecked = neutralDark;\n    result.buttonTextPressed = neutralDark;\n    result.inputTextHovered = neutralDark;\n    result.menuItemTextHovered = neutralDark;\n  }\n  if (neutralSecondary) {\n    result.bodySubtext = neutralSecondary;\n    result.focusBorder = neutralSecondary;\n    result.inputBorder = neutralSecondary;\n    result.smallInputBorder = neutralSecondary;\n    result.inputPlaceholderText = neutralSecondary;\n  }\n  if (neutralSecondaryAlt) {\n    result.buttonBorder = neutralSecondaryAlt;\n  }\n  if (neutralTertiaryAlt) {\n    result.disabledBodySubtext = neutralTertiaryAlt;\n    result.disabledBorder = neutralTertiaryAlt;\n    result.buttonBackgroundChecked = neutralTertiaryAlt;\n    result.menuDivider = neutralTertiaryAlt;\n  }\n  if (accent) {\n    result.accentButtonBackground = accent;\n  }\n\n  // map effects\n  if (e?.elevation4) {\n    result.cardShadow = e.elevation4;\n  }\n  if (!isInverted && e?.elevation8) {\n    result.cardShadowHovered = e.elevation8;\n  } else if (result.variantBorderHovered) {\n    result.cardShadowHovered = '0 0 1px ' + result.variantBorderHovered;\n  }\n\n  result = {\n    ...result,\n    // mix in customized semantic slots\n    ...s,\n  };\n\n  return result as TResult;\n}\n\nfunction _fixDeprecatedSlots(s: ISemanticColors, depComments: boolean): ISemanticColors {\n  // Add @deprecated tag as comment if enabled\n  let dep = '';\n  if (depComments === true) {\n    dep = ' /* @deprecated */';\n  }\n\n  /* eslint-disable deprecation/deprecation */\n  s.listTextColor = s.listText + dep;\n  s.menuItemBackgroundChecked += dep;\n  s.warningHighlight += dep;\n  s.warningText = s.messageText + dep;\n  s.successText += dep;\n  /* eslint-enable deprecation/deprecation */\n  return s;\n}\n"]},"metadata":{},"sourceType":"module"}