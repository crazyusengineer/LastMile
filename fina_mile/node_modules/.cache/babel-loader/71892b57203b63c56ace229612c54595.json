{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as React from 'react';\nimport { Customizations } from './Customizations';\nimport { CustomizerContext } from './CustomizerContext';\nimport { mergeCustomizations } from './mergeCustomizations';\n/**\n * The Customizer component allows for default props to be mixed into components which\n * are decorated with the customizable() decorator, or use the styled HOC. This enables\n * injection scenarios like:\n *\n * 1. render svg icons instead of the icon font within all buttons\n * 2. inject a custom theme object into a component\n *\n * Props are provided via the settings prop which should be one of the following:\n * - A json map which contains 1 or more name/value pairs representing injectable props.\n * - A function that receives the current settings and returns the new ones that apply to the scope\n *\n * @public\n *\n * @deprecated This component is deprecated for purpose of applying theme to components\n * as of `@fluentui/react` version 8. Use `ThemeProvider` for applying theme instead.\n */\nvar Customizer = /** @class */function (_super) {\n  __extends(Customizer, _super);\n  function Customizer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this._onCustomizationChange = function () {\n      return _this.forceUpdate();\n    };\n    return _this;\n  }\n  Customizer.prototype.componentDidMount = function () {\n    Customizations.observe(this._onCustomizationChange);\n  };\n  Customizer.prototype.componentWillUnmount = function () {\n    Customizations.unobserve(this._onCustomizationChange);\n  };\n  Customizer.prototype.render = function () {\n    var _this = this;\n    var contextTransform = this.props.contextTransform;\n    return React.createElement(CustomizerContext.Consumer, null, function (parentContext) {\n      var newContext = mergeCustomizations(_this.props, parentContext);\n      if (contextTransform) {\n        newContext = contextTransform(newContext);\n      }\n      return React.createElement(CustomizerContext.Provider, {\n        value: newContext\n      }, _this.props.children);\n    });\n  };\n  return Customizer;\n}(React.Component);\nexport { Customizer };","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,cAAc,QAAQ,kBAAkB;AACjD,SAASC,iBAAiB,QAAQ,qBAAqB;AACvD,SAASC,mBAAmB,QAAQ,uBAAuB;AAI3D;;;;;;;;;;;;;;;;;AAiBA;EAAgCC;EAAhC;IAAA;IA0BUC,4BAAsB,GAAG;MAAM,YAAI,CAACC,WAAW,EAAE;IAAlB,CAAkB;;EAC3D;EA1BSC,sCAAiB,GAAxB;IACEN,cAAc,CAACO,OAAO,CAAC,IAAI,CAACC,sBAAsB,CAAC;EACrD,CAAC;EAEMF,yCAAoB,GAA3B;IACEN,cAAc,CAACS,SAAS,CAAC,IAAI,CAACD,sBAAsB,CAAC;EACvD,CAAC;EAEMF,2BAAM,GAAb;IAAA;IACU,oBAAgB,GAAK,IAAI,CAACI,KAAK,iBAAf;IACxB,OACEX,oBAACE,iBAAiB,CAACU,QAAQ,QACxB,UAACC,aAAiC;MACjC,IAAIC,UAAU,GAAGX,mBAAmB,CAACE,KAAI,CAACM,KAAK,EAAEE,aAAa,CAAC;MAE/D,IAAIE,gBAAgB,EAAE;QACpBD,UAAU,GAAGC,gBAAgB,CAACD,UAAU,CAAC;;MAG3C,OAAOd,oBAACE,iBAAiB,CAACc,QAAQ;QAACC,KAAK,EAAEH;MAAU,GAAGT,KAAI,CAACM,KAAK,CAACO,QAAQ,CAA8B;IAC1G,CAAC,CAC0B;EAEjC,CAAC;EAGH,iBAAC;AAAD,CAAC,CA3B+BlB,KAAK,CAACmB,SAAS","names":["React","Customizations","CustomizerContext","mergeCustomizations","__extends","_this","forceUpdate","Customizer","observe","_onCustomizationChange","unobserve","props","Consumer","parentContext","newContext","contextTransform","Provider","value","children","Component"],"sources":["/Users/edward/Zhuo/NYU/FA22/design_project/project/node_modules/@fluentui/react/node_modules/@fluentui/utilities/lib/src/customizations/Customizer.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Customizations } from './Customizations';\nimport { CustomizerContext } from './CustomizerContext';\nimport { mergeCustomizations } from './mergeCustomizations';\nimport type { ICustomizerContext } from './CustomizerContext';\nimport type { ICustomizerProps } from './Customizer.types';\n\n/**\n * The Customizer component allows for default props to be mixed into components which\n * are decorated with the customizable() decorator, or use the styled HOC. This enables\n * injection scenarios like:\n *\n * 1. render svg icons instead of the icon font within all buttons\n * 2. inject a custom theme object into a component\n *\n * Props are provided via the settings prop which should be one of the following:\n * - A json map which contains 1 or more name/value pairs representing injectable props.\n * - A function that receives the current settings and returns the new ones that apply to the scope\n *\n * @public\n *\n * @deprecated This component is deprecated for purpose of applying theme to components\n * as of `@fluentui/react` version 8. Use `ThemeProvider` for applying theme instead.\n */\nexport class Customizer extends React.Component<ICustomizerProps> {\n  public componentDidMount(): void {\n    Customizations.observe(this._onCustomizationChange);\n  }\n\n  public componentWillUnmount(): void {\n    Customizations.unobserve(this._onCustomizationChange);\n  }\n\n  public render(): React.ReactElement<{}> {\n    const { contextTransform } = this.props;\n    return (\n      <CustomizerContext.Consumer>\n        {(parentContext: ICustomizerContext) => {\n          let newContext = mergeCustomizations(this.props, parentContext);\n\n          if (contextTransform) {\n            newContext = contextTransform(newContext);\n          }\n\n          return <CustomizerContext.Provider value={newContext}>{this.props.children}</CustomizerContext.Provider>;\n        }}\n      </CustomizerContext.Consumer>\n    );\n  }\n\n  private _onCustomizationChange = () => this.forceUpdate();\n}\n"]},"metadata":{},"sourceType":"module"}