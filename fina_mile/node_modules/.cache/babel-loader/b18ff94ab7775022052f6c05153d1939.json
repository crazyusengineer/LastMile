{"ast":null,"code":"import { __spreadArray } from \"tslib\";\n/**\n * Combine a set of styles together (but does not register css classes).\n * @param styleSets - One or more stylesets to be merged (each param can also be falsy).\n */\nexport function concatStyleSets() {\n  var styleSets = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    styleSets[_i] = arguments[_i];\n  }\n  if (styleSets && styleSets.length === 1 && styleSets[0] && !styleSets[0].subComponentStyles) {\n    return styleSets[0];\n  }\n  var mergedSet = {};\n  // We process sub component styles in two phases. First we collect them, then we combine them into 1 style function.\n  var workingSubcomponentStyles = {};\n  for (var _a = 0, styleSets_1 = styleSets; _a < styleSets_1.length; _a++) {\n    var currentSet = styleSets_1[_a];\n    if (currentSet) {\n      for (var prop in currentSet) {\n        if (currentSet.hasOwnProperty(prop)) {\n          if (prop === 'subComponentStyles' && currentSet.subComponentStyles !== undefined) {\n            // subcomponent styles - style functions or objects\n            var currentComponentStyles = currentSet.subComponentStyles;\n            for (var subCompProp in currentComponentStyles) {\n              if (currentComponentStyles.hasOwnProperty(subCompProp)) {\n                if (workingSubcomponentStyles.hasOwnProperty(subCompProp)) {\n                  workingSubcomponentStyles[subCompProp].push(currentComponentStyles[subCompProp]);\n                } else {\n                  workingSubcomponentStyles[subCompProp] = [currentComponentStyles[subCompProp]];\n                }\n              }\n            }\n            continue;\n          }\n          // the as any casts below is a workaround for ts 2.8.\n          // todo: remove cast to any in ts 2.9.\n          var mergedValue = mergedSet[prop];\n          var currentValue = currentSet[prop];\n          if (mergedValue === undefined) {\n            mergedSet[prop] = currentValue;\n          } else {\n            mergedSet[prop] = __spreadArray(__spreadArray([], Array.isArray(mergedValue) ? mergedValue : [mergedValue]), Array.isArray(currentValue) ? currentValue : [currentValue]);\n          }\n        }\n      }\n    }\n  }\n  if (Object.keys(workingSubcomponentStyles).length > 0) {\n    mergedSet.subComponentStyles = {};\n    var mergedSubStyles = mergedSet.subComponentStyles;\n    var _loop_1 = function (subCompProp) {\n      if (workingSubcomponentStyles.hasOwnProperty(subCompProp)) {\n        var workingSet_1 = workingSubcomponentStyles[subCompProp];\n        mergedSubStyles[subCompProp] = function (styleProps) {\n          return concatStyleSets.apply(void 0, workingSet_1.map(function (styleFunctionOrObject) {\n            return typeof styleFunctionOrObject === 'function' ? styleFunctionOrObject(styleProps) : styleFunctionOrObject;\n          }));\n        };\n      }\n    };\n    // now we process the subcomponent styles if there are any\n    for (var subCompProp in workingSubcomponentStyles) {\n      _loop_1(subCompProp);\n    }\n  }\n  return mergedSet;\n}","map":{"version":3,"mappings":";AAwGA;;;;AAIA,OAAM,SAAUA,eAAe;EAAC;OAAA,UAAsD,EAAtDC,qBAAsD,EAAtDA,IAAsD;IAAtDC;;EAC9B,IAAIA,SAAS,IAAIA,SAAS,CAACC,MAAM,KAAK,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,IAAI,CAAEA,SAAS,CAAC,CAAC,CAAe,CAACE,kBAAkB,EAAE;IAC1G,OAAOF,SAAS,CAAC,CAAC,CAA+B;;EAGnD,IAAMG,SAAS,GAA+B,EAAE;EAEhD;EACA,IAAMC,yBAAyB,GAA+D,EAAE;EAEhG,KAAyB,UAAS,EAATC,uBAAS,EAATC,uBAAS,EAATA,IAAS,EAAE;IAA/B,IAAMC,UAAU;IACnB,IAAIA,UAAU,EAAE;MACd,KAAK,IAAMC,IAAI,IAAID,UAAU,EAAE;QAC7B,IAAIA,UAAU,CAACE,cAAc,CAACD,IAAI,CAAC,EAAE;UACnC,IAAIA,IAAI,KAAK,oBAAoB,IAAID,UAAU,CAACL,kBAAkB,KAAKQ,SAAS,EAAE;YAChF;YAEA,IAAMC,sBAAsB,GAAGJ,UAAU,CAACL,kBAAkB;YAC5D,KAAK,IAAMU,WAAW,IAAID,sBAAsB,EAAE;cAChD,IAAIA,sBAAsB,CAACF,cAAc,CAACG,WAAW,CAAC,EAAE;gBACtD,IAAIR,yBAAyB,CAACK,cAAc,CAACG,WAAW,CAAC,EAAE;kBACzDR,yBAAyB,CAACQ,WAAW,CAAC,CAACC,IAAI,CAACF,sBAAsB,CAACC,WAAW,CAAC,CAAC;iBACjF,MAAM;kBACLR,yBAAyB,CAACQ,WAAW,CAAC,GAAG,CAACD,sBAAsB,CAACC,WAAW,CAAC,CAAC;;;;YAKpF;;UAGF;UACA;UACA,IAAME,WAAW,GAAYX,SAAiB,CAACK,IAAI,CAAC;UACpD,IAAMO,YAAY,GAAIR,UAAkB,CAACC,IAAI,CAAC;UAE9C,IAAIM,WAAW,KAAKJ,SAAS,EAAE;YAC5BP,SAAiB,CAACK,IAAI,CAAC,GAAGO,YAAY;WACxC,MAAM;YACJZ,SAAiB,CAACK,IAAI,CAAC,mCAElBQ,KAAK,CAACC,OAAO,CAACH,WAAW,CAAC,GAAGA,WAAW,GAAG,CAACA,WAAyB,CAAC,CAAC,EACvEE,KAAK,CAACC,OAAO,CAACF,YAAY,CAAC,GAAGA,YAAY,GAAG,CAACA,YAA0B,CAAC,CAC9E;;;;;;EAOX,IAAIG,MAAM,CAACC,IAAI,CAACf,yBAAyB,CAAC,CAACH,MAAM,GAAG,CAAC,EAAE;IACrDE,SAAS,CAACD,kBAAkB,GAAG,EAAE;IACjC,IAAMkB,eAAe,GAAGjB,SAAS,CAACD,kBAAkB;4BAGzCU,WAAW;MACpB,IAAIR,yBAAyB,CAACK,cAAc,CAACG,WAAW,CAAC,EAAE;QACzD,IAAMS,YAAU,GAAGjB,yBAAyB,CAACQ,WAAW,CAAC;QACzDQ,eAAe,CAACR,WAAW,CAAC,GAAG,UAACU,UAAe;UAC7C,OAAOxB,eAAe,eACjBuB,YAAU,CAACE,GAAG,CAAC,UAACC,qBAAuD;YACxE,cAAOA,qBAAqB,KAAK,UAAU,GAAGA,qBAAqB,CAACF,UAAU,CAAC,GAAGE,qBAAqB;UAAvG,CAAuG,CACxG;QAEL,CAAC;;;IAVL;IACA,KAAK,IAAMZ,WAAW,IAAIR,yBAAyB;cAAxCQ,WAAW;;;EAcxB,OAAOT,SAAS;AAClB","names":["concatStyleSets","_i","styleSets","length","subComponentStyles","mergedSet","workingSubcomponentStyles","styleSets_1","_a","currentSet","prop","hasOwnProperty","undefined","currentComponentStyles","subCompProp","push","mergedValue","currentValue","Array","isArray","Object","keys","mergedSubStyles","workingSet_1","styleProps","map","styleFunctionOrObject"],"sources":["/Users/edward/Zhuo/NYU/FA22/design_project/project/node_modules/@fluentui/merge-styles/src/concatStyleSets.ts"],"sourcesContent":["import { IStyleSet, IConcatenatedStyleSet } from './IStyleSet';\nimport { IStyleBase, IStyle } from './IStyle';\nimport { IStyleFunctionOrObject } from './IStyleFunction';\nimport { ObjectOnly } from './ObjectOnly';\n\n/**\n * Combine a set of styles together (but does not register css classes).\n * @param styleSet - The first style set to be concatenated.\n */\nexport function concatStyleSets<TStyleSet>(\n  styleSet: TStyleSet | false | null | undefined,\n): IConcatenatedStyleSet<ObjectOnly<TStyleSet>>;\n\n/**\n * Combine a set of styles together (but does not register css classes).\n * @param styleSet1 - The first style set to be concatenated.\n * @param styleSet2 - The second style set to be concatenated.\n */\nexport function concatStyleSets<TStyleSet1, TStyleSet2>(\n  styleSet1: TStyleSet1 | false | null | undefined,\n  styleSet2: TStyleSet2 | false | null | undefined,\n): IConcatenatedStyleSet<ObjectOnly<TStyleSet1> & ObjectOnly<TStyleSet2>>;\n\n/**\n * Combine a set of styles together (but does not register css classes).\n * @param styleSet1 - The first style set to be concatenated.\n * @param styleSet2 - The second style set to be concatenated.\n * @param styleSet3 - The third style set to be concatenated.\n */\nexport function concatStyleSets<TStyleSet1, TStyleSet2, TStyleSet3>(\n  styleSet1: TStyleSet1 | false | null | undefined,\n  styleSet2: TStyleSet2 | false | null | undefined,\n  styleSet3: TStyleSet3 | false | null | undefined,\n): IConcatenatedStyleSet<ObjectOnly<TStyleSet1> & ObjectOnly<TStyleSet2> & ObjectOnly<TStyleSet3>>;\n\n/**\n * Combine a set of styles together (but does not register css classes).\n * @param styleSet1 - The first style set to be concatenated.\n * @param styleSet2 - The second style set to be concatenated.\n * @param styleSet3 - The third style set to be concatenated.\n * @param styleSet4 - The fourth style set to be concatenated.\n */\nexport function concatStyleSets<TStyleSet1, TStyleSet2, TStyleSet3, TStyleSet4>(\n  styleSet1: TStyleSet1 | false | null | undefined,\n  styleSet2: TStyleSet2 | false | null | undefined,\n  styleSet3: TStyleSet3 | false | null | undefined,\n  styleSet4: TStyleSet4 | false | null | undefined,\n): IConcatenatedStyleSet<\n  ObjectOnly<TStyleSet1> & ObjectOnly<TStyleSet2> & ObjectOnly<TStyleSet3> & ObjectOnly<TStyleSet4>\n>;\n\n/**\n * Combine a set of styles together (but does not register css classes).\n * @param styleSet1 - The first style set to be concatenated.\n * @param styleSet2 - The second style set to be concatenated.\n * @param styleSet3 - The third style set to be concatenated.\n * @param styleSet4 - The fourth style set to be concatenated.\n * @param styleSet5 - The fifth set to be concatenated.\n */\nexport function concatStyleSets<TStyleSet1, TStyleSet2, TStyleSet3, TStyleSet4, TStyleSet5>(\n  styleSet1: TStyleSet1 | false | null | undefined,\n  styleSet2: TStyleSet2 | false | null | undefined,\n  styleSet3: TStyleSet3 | false | null | undefined,\n  styleSet4: TStyleSet4 | false | null | undefined,\n  styleSet5: TStyleSet5 | false | null | undefined,\n): IConcatenatedStyleSet<\n  ObjectOnly<TStyleSet1> &\n    ObjectOnly<TStyleSet2> &\n    ObjectOnly<TStyleSet3> &\n    ObjectOnly<TStyleSet4> &\n    ObjectOnly<TStyleSet5>\n>;\n\n/**\n * Combine a set of styles together (but does not register css classes).\n * @param styleSet1 - The first style set to be concatenated.\n * @param styleSet2 - The second style set to be concatenated.\n * @param styleSet3 - The third style set to be concatenated.\n * @param styleSet4 - The fourth style set to be concatenated.\n * @param styleSet5 - The fifth set to be concatenated.\n * @param styleSet6 - The sixth set to be concatenated.\n */\nexport function concatStyleSets<TStyleSet1, TStyleSet2, TStyleSet3, TStyleSet4, TStyleSet5, TStyleSet6>(\n  styleSet1: TStyleSet1 | false | null | undefined,\n  styleSet2: TStyleSet2 | false | null | undefined,\n  styleSet3: TStyleSet3 | false | null | undefined,\n  styleSet4: TStyleSet4 | false | null | undefined,\n  styleSet5: TStyleSet5 | false | null | undefined,\n  styleSet6: TStyleSet6 | false | null | undefined,\n): IConcatenatedStyleSet<\n  ObjectOnly<TStyleSet1> &\n    ObjectOnly<TStyleSet2> &\n    ObjectOnly<TStyleSet3> &\n    ObjectOnly<TStyleSet4> &\n    ObjectOnly<TStyleSet5> &\n    ObjectOnly<TStyleSet6>\n>;\n\n/**\n * Combine a set of styles together (but does not register css classes).\n * @param styleSets - One or more stylesets to be merged (each param can also be falsy).\n */\nexport function concatStyleSets(...styleSets: (IStyleSet | false | null | undefined)[]): IConcatenatedStyleSet<any>;\n\n/**\n * Combine a set of styles together (but does not register css classes).\n * @param styleSets - One or more stylesets to be merged (each param can also be falsy).\n */\nexport function concatStyleSets(...styleSets: (IStyleSet | false | null | undefined)[]): IConcatenatedStyleSet<any> {\n  if (styleSets && styleSets.length === 1 && styleSets[0] && !(styleSets[0] as IStyleSet).subComponentStyles) {\n    return styleSets[0] as IConcatenatedStyleSet<any>;\n  }\n\n  const mergedSet: IConcatenatedStyleSet<any> = {};\n\n  // We process sub component styles in two phases. First we collect them, then we combine them into 1 style function.\n  const workingSubcomponentStyles: { [key: string]: Array<IStyleFunctionOrObject<any, any>> } = {};\n\n  for (const currentSet of styleSets) {\n    if (currentSet) {\n      for (const prop in currentSet) {\n        if (currentSet.hasOwnProperty(prop)) {\n          if (prop === 'subComponentStyles' && currentSet.subComponentStyles !== undefined) {\n            // subcomponent styles - style functions or objects\n\n            const currentComponentStyles = currentSet.subComponentStyles;\n            for (const subCompProp in currentComponentStyles) {\n              if (currentComponentStyles.hasOwnProperty(subCompProp)) {\n                if (workingSubcomponentStyles.hasOwnProperty(subCompProp)) {\n                  workingSubcomponentStyles[subCompProp].push(currentComponentStyles[subCompProp]);\n                } else {\n                  workingSubcomponentStyles[subCompProp] = [currentComponentStyles[subCompProp]];\n                }\n              }\n            }\n\n            continue;\n          }\n\n          // the as any casts below is a workaround for ts 2.8.\n          // todo: remove cast to any in ts 2.9.\n          const mergedValue: IStyle = (mergedSet as any)[prop];\n          const currentValue = (currentSet as any)[prop];\n\n          if (mergedValue === undefined) {\n            (mergedSet as any)[prop] = currentValue;\n          } else {\n            (mergedSet as any)[prop] = [\n              // https://github.com/Microsoft/TypeScript/issues/25474\n              ...(Array.isArray(mergedValue) ? mergedValue : [mergedValue as IStyleBase]),\n              ...(Array.isArray(currentValue) ? currentValue : [currentValue as IStyleBase]),\n            ];\n          }\n        }\n      }\n    }\n  }\n\n  if (Object.keys(workingSubcomponentStyles).length > 0) {\n    mergedSet.subComponentStyles = {};\n    const mergedSubStyles = mergedSet.subComponentStyles;\n\n    // now we process the subcomponent styles if there are any\n    for (const subCompProp in workingSubcomponentStyles) {\n      if (workingSubcomponentStyles.hasOwnProperty(subCompProp)) {\n        const workingSet = workingSubcomponentStyles[subCompProp];\n        mergedSubStyles[subCompProp] = (styleProps: any) => {\n          return concatStyleSets(\n            ...workingSet.map((styleFunctionOrObject: IStyleFunctionOrObject<any, any>) =>\n              typeof styleFunctionOrObject === 'function' ? styleFunctionOrObject(styleProps) : styleFunctionOrObject,\n            ),\n          );\n        };\n      }\n    }\n  }\n\n  return mergedSet;\n}\n"]},"metadata":{},"sourceType":"module"}