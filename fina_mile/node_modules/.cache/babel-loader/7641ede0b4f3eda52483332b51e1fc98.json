{"ast":null,"code":"import * as React from 'react';\nimport { FocusRectsContext } from './useFocusRects';\nexport var FocusRectsProvider = function (props) {\n  var providerRef = props.providerRef,\n    layerRoot = props.layerRoot;\n  var registeredProviders = React.useState([])[0];\n  var parentContext = React.useContext(FocusRectsContext);\n  // Inherit the parent context if it exists, unless this is a layer root.\n  // This allows the topmost provider element in the DOM tree to handle the focus events.\n  // Since layers are in a separate HTML tree from their parent, they shouldn't use the parent's providerRef.\n  var inheritParentContext = parentContext !== undefined && !layerRoot;\n  var context = React.useMemo(function () {\n    return inheritParentContext ? undefined : {\n      providerRef: providerRef,\n      registeredProviders: registeredProviders,\n      registerProvider: function (ref) {\n        // Register this child provider with the current context, and any parent contexts\n        registeredProviders.push(ref);\n        parentContext === null || parentContext === void 0 ? void 0 : parentContext.registerProvider(ref);\n      },\n      unregisterProvider: function (ref) {\n        parentContext === null || parentContext === void 0 ? void 0 : parentContext.unregisterProvider(ref);\n        var i = registeredProviders.indexOf(ref);\n        if (i >= 0) {\n          registeredProviders.splice(i, 1);\n        }\n      }\n    };\n  }, [providerRef, registeredProviders, parentContext, inheritParentContext]);\n  React.useEffect(function () {\n    if (context) {\n      context.registerProvider(context.providerRef);\n      return function () {\n        return context.unregisterProvider(context.providerRef);\n      };\n    }\n  }, [context]);\n  // Create a new context provider if this is not inheriting from the parent.\n  if (context) {\n    return React.createElement(FocusRectsContext.Provider, {\n      value: context\n    }, props.children);\n  } else {\n    return React.createElement(React.Fragment, null, props.children);\n  }\n};","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,iBAAiB,QAAQ,iBAAiB;AAcnD,OAAO,IAAMC,kBAAkB,GAAsC,eAAK;EAChE,eAAW,GAAgBC,KAAK,YAArB;IAAEC,SAAS,GAAKD,KAAK,UAAV;EACvB,uBAAmB,GAAIH,KAAK,CAACK,QAAQ,CAAiC,EAAE,CAAC,GAAtD;EAC1B,IAAMC,aAAa,GAAGN,KAAK,CAACO,UAAU,CAACN,iBAAiB,CAAC;EAEzD;EACA;EACA;EACA,IAAMO,oBAAoB,GAAGF,aAAa,KAAKG,SAAS,IAAI,CAACL,SAAS;EAEtE,IAAMM,OAAO,GAAGV,KAAK,CAACW,OAAO,CAC3B;IACE,2BAAoB,GAChBF,SAAS,GACT;MACEG,WAAW;MACXC,mBAAmB;MACnBC,gBAAgB,EAAE,UAACC,GAAiC;QAClD;QACAF,mBAAmB,CAACG,IAAI,CAACD,GAAG,CAAC;QAC7BT,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEQ,gBAAgB,CAACC,GAAG,CAAC;MACtC,CAAC;MACDE,kBAAkB,EAAE,UAACF,GAAiC;QACpDT,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEW,kBAAkB,CAACF,GAAG,CAAC;QACtC,IAAMG,CAAC,GAAGL,mBAAmB,CAACM,OAAO,CAACJ,GAAG,CAAC;QAC1C,IAAIG,CAAC,IAAI,CAAC,EAAE;UACVL,mBAAmB,CAACO,MAAM,CAACF,CAAC,EAAE,CAAC,CAAC;;MAEpC;KACD;EAjBL,CAiBK,EACP,CAACN,WAAW,EAAEC,mBAAmB,EAAEP,aAAa,EAAEE,oBAAoB,CAAC,CACxE;EAEDR,KAAK,CAACqB,SAAS,CAAC;IACd,IAAIX,OAAO,EAAE;MACXA,OAAO,CAACI,gBAAgB,CAACJ,OAAO,CAACE,WAAW,CAAC;MAC7C,OAAO;QAAM,cAAO,CAACK,kBAAkB,CAACP,OAAO,CAACE,WAAW,CAAC;MAA/C,CAA+C;;EAEhE,CAAC,EAAE,CAACF,OAAO,CAAC,CAAC;EAEb;EACA,IAAIA,OAAO,EAAE;IACX,OAAOV,oBAACC,iBAAiB,CAACqB,QAAQ;MAACC,KAAK,EAAEb;IAAO,GAAGP,KAAK,CAACqB,QAAQ,CAA8B;GACjG,MAAM;IACL,OAAOxB,0CAAGG,KAAK,CAACqB,QAAQ,CAAI;;AAEhC,CAAC","names":["React","FocusRectsContext","FocusRectsProvider","props","layerRoot","useState","parentContext","useContext","inheritParentContext","undefined","context","useMemo","providerRef","registeredProviders","registerProvider","ref","push","unregisterProvider","i","indexOf","splice","useEffect","Provider","value","children"],"sources":["/Users/edward/Zhuo/NYU/FA22/design_project/project/node_modules/@fluentui/react/node_modules/@fluentui/utilities/src/FocusRectsProvider.tsx"],"sourcesContent":["import * as React from 'react';\nimport { FocusRectsContext } from './useFocusRects';\n\nexport type FocusRectsProviderProps = {\n  /**\n   * Ref to the root element that this is providing focus rects for.\n   */\n  providerRef: React.RefObject<HTMLElement>;\n\n  /**\n   * Indicates that this is the root of a layer, and should not inherit the providerRef from a parent context.\n   */\n  layerRoot?: boolean;\n};\n\nexport const FocusRectsProvider: React.FC<FocusRectsProviderProps> = props => {\n  const { providerRef, layerRoot } = props;\n  const [registeredProviders] = React.useState<React.RefObject<HTMLElement>[]>([]);\n  const parentContext = React.useContext(FocusRectsContext);\n\n  // Inherit the parent context if it exists, unless this is a layer root.\n  // This allows the topmost provider element in the DOM tree to handle the focus events.\n  // Since layers are in a separate HTML tree from their parent, they shouldn't use the parent's providerRef.\n  const inheritParentContext = parentContext !== undefined && !layerRoot;\n\n  const context = React.useMemo(\n    () =>\n      inheritParentContext\n        ? undefined\n        : {\n            providerRef,\n            registeredProviders,\n            registerProvider: (ref: React.RefObject<HTMLElement>) => {\n              // Register this child provider with the current context, and any parent contexts\n              registeredProviders.push(ref);\n              parentContext?.registerProvider(ref);\n            },\n            unregisterProvider: (ref: React.RefObject<HTMLElement>) => {\n              parentContext?.unregisterProvider(ref);\n              const i = registeredProviders.indexOf(ref);\n              if (i >= 0) {\n                registeredProviders.splice(i, 1);\n              }\n            },\n          },\n    [providerRef, registeredProviders, parentContext, inheritParentContext],\n  );\n\n  React.useEffect(() => {\n    if (context) {\n      context.registerProvider(context.providerRef);\n      return () => context.unregisterProvider(context.providerRef);\n    }\n  }, [context]);\n\n  // Create a new context provider if this is not inheriting from the parent.\n  if (context) {\n    return <FocusRectsContext.Provider value={context}>{props.children}</FocusRectsContext.Provider>;\n  } else {\n    return <>{props.children}</>;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}