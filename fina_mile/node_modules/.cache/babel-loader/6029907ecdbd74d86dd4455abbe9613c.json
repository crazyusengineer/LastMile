{"ast":null,"code":"/**\n * Simple deep merge function. Takes all arguments and returns a deep copy of the objects merged\n * together in the order provided. If an object creates a circular reference, it will assign the\n * original reference.\n */\nexport function merge(target) {\n  var args = [];\n  for (var _i = 1; _i < arguments.length; _i++) {\n    args[_i - 1] = arguments[_i];\n  }\n  for (var _a = 0, args_1 = args; _a < args_1.length; _a++) {\n    var arg = args_1[_a];\n    _merge(target || {}, arg);\n  }\n  return target;\n}\n/**\n * The _merge helper iterates through all props on source and assigns them to target.\n * When the value is an object, we will create a deep clone of the object. However if\n * there is a circular reference, the value will not be deep cloned and will persist\n * the reference.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _merge(target, source, circularReferences) {\n  if (circularReferences === void 0) {\n    circularReferences = [];\n  }\n  circularReferences.push(source);\n  for (var name_1 in source) {\n    if (source.hasOwnProperty(name_1)) {\n      if (name_1 !== '__proto__' && name_1 !== 'constructor' && name_1 !== 'prototype') {\n        var value = source[name_1];\n        if (typeof value === 'object' && value !== null && !Array.isArray(value)) {\n          var isCircularReference = circularReferences.indexOf(value) > -1;\n          target[name_1] = isCircularReference ? value : _merge(target[name_1] || {}, value, circularReferences);\n        } else {\n          target[name_1] = value;\n        }\n      }\n    }\n  }\n  circularReferences.pop();\n  return target;\n}","map":{"version":3,"mappings":"AAAA;;;;;AAKA,OAAM,SAAUA,KAAK,CAASC,MAAkB;EAAE;OAAA,UAAkD,EAAlDC,qBAAkD,EAAlDA,IAAkD;IAAlDC;;EAChD,KAAkB,UAAI,EAAJC,aAAI,EAAJC,kBAAI,EAAJA,IAAI,EAAE;IAAnB,IAAMC,GAAG;IACZC,MAAM,CAACN,MAAM,IAAI,EAAE,EAAEK,GAAiB,CAAC;;EAGzC,OAAOL,MAAW;AACpB;AAEA;;;;;;AAMA;AACA,SAASM,MAAM,CAAmBN,MAAS,EAAEO,MAAS,EAAEC,kBAA8B;EAA9B;IAAAA,uBAA8B;EAAA;EACpFA,kBAAkB,CAACC,IAAI,CAACF,MAAM,CAAC;EAE/B,KAAK,IAAIG,MAAI,IAAIH,MAAM,EAAE;IACvB,IAAIA,MAAM,CAACI,cAAc,CAACD,MAAI,CAAC,EAAE;MAC/B,IAAIA,MAAI,KAAK,WAAW,IAAIA,MAAI,KAAK,aAAa,IAAIA,MAAI,KAAK,WAAW,EAAE;QAC1E,IAAME,KAAK,GAAgCL,MAAM,CAACG,MAAI,CAAC;QACvD,IAAI,OAAOE,KAAK,KAAK,QAAQ,IAAIA,KAAK,KAAK,IAAI,IAAI,CAACC,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,EAAE;UACxE,IAAMG,mBAAmB,GAAGP,kBAAkB,CAACQ,OAAO,CAACJ,KAAK,CAAC,GAAG,CAAC,CAAC;UAClEZ,MAAM,CAACU,MAAI,CAAC,GAAIK,mBAAmB,GAC/BH,KAAK,GACLN,MAAM,CAACN,MAAM,CAACU,MAAI,CAAC,IAAI,EAAE,EAAEE,KAAK,EAAEJ,kBAAkB,CAAiC;SAC1F,MAAM;UACLR,MAAM,CAACU,MAAI,CAAC,GAAGE,KAAK;;;;;EAM5BJ,kBAAkB,CAACS,GAAG,EAAE;EAExB,OAAOjB,MAAM;AACf","names":["merge","target","_i","args","args_1","_a","arg","_merge","source","circularReferences","push","name_1","hasOwnProperty","value","Array","isArray","isCircularReference","indexOf","pop"],"sources":["/Users/edward/Zhuo/NYU/FA22/design_project/project/node_modules/@fluentui/style-utilities/node_modules/@fluentui/utilities/src/merge.ts"],"sourcesContent":["/**\n * Simple deep merge function. Takes all arguments and returns a deep copy of the objects merged\n * together in the order provided. If an object creates a circular reference, it will assign the\n * original reference.\n */\nexport function merge<T = {}>(target: Partial<T>, ...args: (Partial<T> | null | undefined | false)[]): T {\n  for (const arg of args) {\n    _merge(target || {}, arg as Partial<T>);\n  }\n\n  return target as T;\n}\n\n/**\n * The _merge helper iterates through all props on source and assigns them to target.\n * When the value is an object, we will create a deep clone of the object. However if\n * there is a circular reference, the value will not be deep cloned and will persist\n * the reference.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _merge<T extends Object>(target: T, source: T, circularReferences: any[] = []): T {\n  circularReferences.push(source);\n\n  for (let name in source) {\n    if (source.hasOwnProperty(name)) {\n      if (name !== '__proto__' && name !== 'constructor' && name !== 'prototype') {\n        const value: T[Extract<keyof T, string>] = source[name];\n        if (typeof value === 'object' && value !== null && !Array.isArray(value)) {\n          const isCircularReference = circularReferences.indexOf(value) > -1;\n          target[name] = (isCircularReference\n            ? value\n            : _merge(target[name] || {}, value, circularReferences)) as T[Extract<keyof T, string>];\n        } else {\n          target[name] = value;\n        }\n      }\n    }\n  }\n\n  circularReferences.pop();\n\n  return target;\n}\n"]},"metadata":{},"sourceType":"module"}