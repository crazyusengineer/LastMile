{"ast":null,"code":"import { __assign, __spreadArray } from \"tslib\";\nimport * as React from 'react';\nimport { concatStyleSets } from '@fluentui/style-utilities';\nimport { Customizations, CustomizerContext } from '@fluentui/utilities';\nimport { createFactory } from './slots';\nimport { assign } from './utilities';\n/**\n * Assembles a higher order component based on the following: styles, theme, view, and state.\n * Imposes a separation of concern and centralizes styling processing to increase ease of use and robustness\n * in how components use and apply styling and theming.\n *\n * Automatically merges and applies themes and styles with theme / styleprops having the highest priority.\n * State component, if provided, is passed in props for processing. Props from state / user are automatically processed\n * and styled before finally being passed to view.\n *\n * State components should contain all stateful behavior and should not generate any JSX, but rather simply call\n * the view prop.\n *\n * Views should simply be stateless pure functions that receive all props needed for rendering their output.\n *\n * State component is optional. If state is not provided, created component is essentially a functional\n * stateless component.\n *\n * @param options - component Component options. See IComponentOptions for more detail.\n */\nexport function createComponent(view, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _a = options.factoryOptions,\n    factoryOptions = _a === void 0 ? {} : _a;\n  var defaultProp = factoryOptions.defaultProp;\n  var ResultComponent = function (componentProps) {\n    var settings = _getCustomizations(options.displayName, React.useContext(CustomizerContext), options.fields);\n    var stateReducer = options.state;\n    if (stateReducer) {\n      // Don't assume state will return all props, so spread useState result over component props.\n      componentProps = __assign(__assign({}, componentProps), stateReducer(componentProps));\n    }\n    var theme = componentProps.theme || settings.theme;\n    var tokens = _resolveTokens(componentProps, theme, options.tokens, settings.tokens, componentProps.tokens);\n    var styles = _resolveStyles(componentProps, theme, tokens, options.styles, settings.styles, componentProps.styles);\n    var viewProps = __assign(__assign({}, componentProps), {\n      styles: styles,\n      tokens: tokens,\n      _defaultStyles: styles,\n      theme: theme\n    });\n    return view(viewProps);\n  };\n  ResultComponent.displayName = options.displayName || view.name;\n  // If a shorthand prop is defined, create a factory for the component.\n  // TODO: This shouldn't be a concern of createComponent.. factoryOptions should just be forwarded.\n  //       Need to weigh creating default factories on component creation vs. memoizing them on use in slots.tsx.\n  if (defaultProp) {\n    ResultComponent.create = createFactory(ResultComponent, {\n      defaultProp: defaultProp\n    });\n  }\n  assign(ResultComponent, options.statics);\n  // Later versions of TypeSript should allow us to merge objects in a type safe way and avoid this cast.\n  return ResultComponent;\n}\n/**\n * Resolve all styles functions with both props and tokens and flatten results along with all styles objects.\n */\nfunction _resolveStyles(props, theme, tokens) {\n  var allStyles = [];\n  for (var _i = 3; _i < arguments.length; _i++) {\n    allStyles[_i - 3] = arguments[_i];\n  }\n  return concatStyleSets.apply(void 0, allStyles.map(function (styles) {\n    return typeof styles === 'function' ? styles(props, theme, tokens) : styles;\n  }));\n}\n/**\n * Resolve all tokens functions with props flatten results along with all tokens objects.\n */\nfunction _resolveTokens(props, theme) {\n  var allTokens = [];\n  for (var _i = 2; _i < arguments.length; _i++) {\n    allTokens[_i - 2] = arguments[_i];\n  }\n  var tokens = {};\n  for (var _a = 0, allTokens_1 = allTokens; _a < allTokens_1.length; _a++) {\n    var currentTokens = allTokens_1[_a];\n    if (currentTokens) {\n      // TODO: why is this cast needed? TS seems to think there is a (TToken | Function) union from somewhere.\n      currentTokens = typeof currentTokens === 'function' ? currentTokens(props, theme) : currentTokens;\n      if (Array.isArray(currentTokens)) {\n        currentTokens = _resolveTokens.apply(void 0, __spreadArray([props, theme], currentTokens));\n      }\n      assign(tokens, currentTokens);\n    }\n  }\n  return tokens;\n}\n/**\n * Helper function for calling Customizations.getSettings falling back to default fields.\n *\n * @param displayName Displayable name for component.\n * @param context React context passed to component containing contextual settings.\n * @param fields Optional list of properties to grab from global store and context.\n */\nfunction _getCustomizations(displayName, context, fields) {\n  // TODO: do we want field props? should fields be part of IComponent and used here?\n  // TODO: should we centrally define DefaultFields? (not exported from styling)\n  // TODO: tie this array to ICustomizationProps, such that each array element is keyof ICustomizationProps\n  var DefaultFields = ['theme', 'styles', 'tokens'];\n  return Customizations.getSettings(fields || DefaultFields, displayName, context.customizations);\n}","map":{"version":3,"mappings":"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","names":["React","concatStyleSets","Customizations","CustomizerContext","createFactory","assign","createComponent","view","options","factoryOptions","ResultComponent","componentProps","settings","_getCustomizations","displayName","useContext","fields","stateReducer","state","theme","tokens","_resolveTokens","styles","_resolveStyles","viewProps","__assign","_defaultStyles","name","defaultProp","create","statics","props","_i","allStyles","map","allTokens","allTokens_1","_a","currentTokens","Array","isArray","context","DefaultFields","getSettings","customizations"],"sources":["/Users/edward/Zhuo/NYU/FA22/design_project/project/node_modules/@fluentui/react/node_modules/@fluentui/foundation-legacy/src/createComponent.tsx"],"sourcesContent":["import * as React from 'react';\nimport { concatStyleSets, IStyleSet, ITheme } from '@fluentui/style-utilities';\nimport { Customizations, CustomizerContext, ICustomizerContext } from '@fluentui/utilities';\nimport { createFactory } from './slots';\nimport { assign } from './utilities';\n\nimport {\n  IComponentOptions,\n  ICustomizationProps,\n  IStyleableComponentProps,\n  IStylesFunctionOrObject,\n  IToken,\n  ITokenFunction,\n  IViewComponent,\n} from './IComponent';\nimport { IDefaultSlotProps, ISlotCreator, ValidProps } from './ISlots';\n\n/**\n * Assembles a higher order component based on the following: styles, theme, view, and state.\n * Imposes a separation of concern and centralizes styling processing to increase ease of use and robustness\n * in how components use and apply styling and theming.\n *\n * Automatically merges and applies themes and styles with theme / styleprops having the highest priority.\n * State component, if provided, is passed in props for processing. Props from state / user are automatically processed\n * and styled before finally being passed to view.\n *\n * State components should contain all stateful behavior and should not generate any JSX, but rather simply call\n * the view prop.\n *\n * Views should simply be stateless pure functions that receive all props needed for rendering their output.\n *\n * State component is optional. If state is not provided, created component is essentially a functional\n * stateless component.\n *\n * @param options - component Component options. See IComponentOptions for more detail.\n */\nexport function createComponent<\n  TComponentProps extends ValidProps,\n  TTokens,\n  TStyleSet extends IStyleSet<TStyleSet>,\n  TViewProps extends TComponentProps = TComponentProps,\n  TStatics = {}\n>(\n  view: IViewComponent<TViewProps>,\n  options: IComponentOptions<TComponentProps, TTokens, TStyleSet, TViewProps, TStatics> = {},\n): React.FunctionComponent<TComponentProps> & TStatics {\n  const { factoryOptions = {} } = options;\n  const { defaultProp } = factoryOptions;\n\n  const ResultComponent: React.FunctionComponent<TComponentProps> = (\n    componentProps: TComponentProps & IStyleableComponentProps<TViewProps, TTokens, TStyleSet>,\n  ) => {\n    const settings: ICustomizationProps<TViewProps, TTokens, TStyleSet> = _getCustomizations(\n      options.displayName,\n      React.useContext(CustomizerContext),\n      options.fields,\n    );\n\n    const stateReducer = options.state;\n\n    if (stateReducer) {\n      // Don't assume state will return all props, so spread useState result over component props.\n      componentProps = {\n        ...componentProps,\n        ...stateReducer(componentProps),\n      };\n    }\n\n    const theme = componentProps.theme || settings.theme;\n\n    const tokens = _resolveTokens(componentProps, theme, options.tokens, settings.tokens, componentProps.tokens);\n    const styles = _resolveStyles(\n      componentProps,\n      theme,\n      tokens,\n      options.styles,\n      settings.styles,\n      componentProps.styles,\n    );\n\n    const viewProps = ({\n      ...componentProps,\n      styles,\n      tokens,\n      _defaultStyles: styles,\n      theme,\n    } as unknown) as TViewProps & IDefaultSlotProps<any>;\n\n    return view(viewProps);\n  };\n\n  ResultComponent.displayName = options.displayName || view.name;\n\n  // If a shorthand prop is defined, create a factory for the component.\n  // TODO: This shouldn't be a concern of createComponent.. factoryOptions should just be forwarded.\n  //       Need to weigh creating default factories on component creation vs. memoizing them on use in slots.tsx.\n  if (defaultProp) {\n    (ResultComponent as ISlotCreator<TComponentProps, any>).create = createFactory(ResultComponent, { defaultProp });\n  }\n\n  assign(ResultComponent, options.statics);\n\n  // Later versions of TypeSript should allow us to merge objects in a type safe way and avoid this cast.\n  return ResultComponent as React.FunctionComponent<TComponentProps> & TStatics;\n}\n\n/**\n * Resolve all styles functions with both props and tokens and flatten results along with all styles objects.\n */\nfunction _resolveStyles<TProps, TTokens, TStyleSet extends IStyleSet<TStyleSet>>(\n  props: TProps,\n  theme: ITheme,\n  tokens: TTokens,\n  ...allStyles: (IStylesFunctionOrObject<TProps, TTokens, TStyleSet> | undefined)[]\n): ReturnType<typeof concatStyleSets> {\n  return concatStyleSets(\n    ...allStyles.map((styles: IStylesFunctionOrObject<TProps, TTokens, TStyleSet> | undefined) =>\n      typeof styles === 'function' ? styles(props, theme, tokens) : styles,\n    ),\n  );\n}\n\n/**\n * Resolve all tokens functions with props flatten results along with all tokens objects.\n */\nfunction _resolveTokens<TViewProps, TTokens>(\n  props: TViewProps,\n  theme: ITheme,\n  ...allTokens: (IToken<TViewProps, TTokens> | false | null | undefined)[]\n): TTokens {\n  const tokens = {};\n\n  for (let currentTokens of allTokens) {\n    if (currentTokens) {\n      // TODO: why is this cast needed? TS seems to think there is a (TToken | Function) union from somewhere.\n      currentTokens =\n        typeof currentTokens === 'function'\n          ? (currentTokens as ITokenFunction<TViewProps, TTokens>)(props, theme)\n          : currentTokens;\n\n      if (Array.isArray(currentTokens)) {\n        currentTokens = _resolveTokens(props, theme, ...currentTokens);\n      }\n\n      assign(tokens, currentTokens);\n    }\n  }\n\n  return tokens as TTokens;\n}\n\n/**\n * Helper function for calling Customizations.getSettings falling back to default fields.\n *\n * @param displayName Displayable name for component.\n * @param context React context passed to component containing contextual settings.\n * @param fields Optional list of properties to grab from global store and context.\n */\nfunction _getCustomizations<TViewProps, TTokens, TStyleSet extends IStyleSet<TStyleSet>>(\n  displayName: string | undefined,\n  context: ICustomizerContext,\n  fields?: string[],\n): ICustomizationProps<TViewProps, TTokens, TStyleSet> {\n  // TODO: do we want field props? should fields be part of IComponent and used here?\n  // TODO: should we centrally define DefaultFields? (not exported from styling)\n  // TODO: tie this array to ICustomizationProps, such that each array element is keyof ICustomizationProps\n  const DefaultFields = ['theme', 'styles', 'tokens'];\n  return Customizations.getSettings(fields || DefaultFields, displayName, context.customizations);\n}\n"]},"metadata":{},"sourceType":"module"}