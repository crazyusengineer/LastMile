{"ast":null,"code":"import { warn } from './warn';\nimport { isControlled as checkIsControlled } from '../controlled';\nvar warningsMap;\nif (process.env.NODE_ENV !== 'production') {\n  warningsMap = {\n    valueOnChange: {},\n    valueDefaultValue: {},\n    controlledToUncontrolled: {},\n    uncontrolledToControlled: {}\n  };\n}\n/** Reset controlled usage warnings for testing purposes. */\nexport function resetControlledWarnings() {\n  if (process.env.NODE_ENV !== 'production') {\n    warningsMap.valueOnChange = {};\n    warningsMap.valueDefaultValue = {};\n    warningsMap.controlledToUncontrolled = {};\n    warningsMap.uncontrolledToControlled = {};\n  }\n}\n/**\n * Check for and warn on the following error conditions with a form component:\n * - A value prop is provided (indicated it's being used as controlled) without a change handler,\n *    and the component is not read-only\n * - Both the value and defaultValue props are provided\n * - The component is attempting to switch between controlled and uncontrolled\n *\n * The messages mimic the warnings React gives for these error conditions on input elements.\n * The warning will only be displayed once per component ID.\n */\nexport function warnControlledUsage(params) {\n  if (process.env.NODE_ENV !== 'production') {\n    var componentId = params.componentId,\n      componentName = params.componentName,\n      defaultValueProp = params.defaultValueProp,\n      props = params.props,\n      oldProps = params.oldProps,\n      onChangeProp = params.onChangeProp,\n      readOnlyProp = params.readOnlyProp,\n      valueProp = params.valueProp;\n    // This warning logic closely follows what React does for native <input> elements.\n    var oldIsControlled = oldProps ? checkIsControlled(oldProps, valueProp) : undefined;\n    var newIsControlled = checkIsControlled(props, valueProp);\n    if (newIsControlled) {\n      // onChange (or readOnly) must be provided if value is provided\n      var hasOnChange = !!props[onChangeProp];\n      var isReadOnly = !!(readOnlyProp && props[readOnlyProp]);\n      if (!(hasOnChange || isReadOnly) && !warningsMap.valueOnChange[componentId]) {\n        warningsMap.valueOnChange[componentId] = true;\n        warn(\"Warning: You provided a '\" + valueProp + \"' prop to a \" + componentName + \" without an '\" + onChangeProp + \"' handler. \" + (\"This will render a read-only field. If the field should be mutable use '\" + defaultValueProp + \"'. \") + (\"Otherwise, set '\" + onChangeProp + \"'\" + (readOnlyProp ? \" or '\" + readOnlyProp + \"'\" : '') + \".\"));\n      }\n      // value and defaultValue are mutually exclusive\n      var defaultValue = props[defaultValueProp];\n      if (defaultValue !== undefined && defaultValue !== null && !warningsMap.valueDefaultValue[componentId]) {\n        warningsMap.valueDefaultValue[componentId] = true;\n        warn(\"Warning: You provided both '\" + valueProp + \"' and '\" + defaultValueProp + \"' to a \" + componentName + \". \" + (\"Form fields must be either controlled or uncontrolled (specify either the '\" + valueProp + \"' prop, \") + (\"or the '\" + defaultValueProp + \"' prop, but not both). Decide between using a controlled or uncontrolled \") + (componentName + \" and remove one of these props. More info: https://fb.me/react-controlled-components\"));\n      }\n    }\n    // Warn if switching between uncontrolled and controlled. (One difference between this implementation\n    // and React's <input> is that if oldIsControlled is indeterminate and newIsControlled true, we don't warn.)\n    if (oldProps && newIsControlled !== oldIsControlled) {\n      var oldType = oldIsControlled ? 'a controlled' : 'an uncontrolled';\n      var newType = oldIsControlled ? 'uncontrolled' : 'controlled';\n      var warnMap = oldIsControlled ? warningsMap.controlledToUncontrolled : warningsMap.uncontrolledToControlled;\n      if (!warnMap[componentId]) {\n        warnMap[componentId] = true;\n        warn(\"Warning: A component is changing \" + oldType + \" \" + componentName + \" to be \" + newType + \". \" + (componentName + \"s should not switch from controlled to uncontrolled (or vice versa). \") + \"Decide between using controlled or uncontrolled for the lifetime of the component. \" + \"More info: https://fb.me/react-controlled-components\");\n      }\n    }\n  }\n}","map":{"version":3,"mappings":"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","names":["warn","isControlled","checkIsControlled","warningsMap","process","env","NODE_ENV","valueOnChange","valueDefaultValue","controlledToUncontrolled","uncontrolledToControlled","resetControlledWarnings","warnControlledUsage","params","componentName","defaultValueProp","props","oldProps","onChangeProp","readOnlyProp","valueProp","oldIsControlled","undefined","newIsControlled","hasOnChange","isReadOnly","componentId","defaultValue","oldType","newType","warnMap"],"sources":["/Users/edward/Zhuo/NYU/FA22/design_project/project/node_modules/@fluentui/react/node_modules/@fluentui/utilities/lib/src/warn/warnControlledUsage.ts"],"sourcesContent":["import { warn } from './warn';\nimport { isControlled as checkIsControlled } from '../controlled';\n\ntype WarningMap = { [id: string]: boolean };\n\nlet warningsMap: {\n  valueOnChange: WarningMap;\n  valueDefaultValue: WarningMap;\n  controlledToUncontrolled: WarningMap;\n  uncontrolledToControlled: WarningMap;\n};\nif (process.env.NODE_ENV !== 'production') {\n  warningsMap = {\n    valueOnChange: {},\n    valueDefaultValue: {},\n    controlledToUncontrolled: {},\n    uncontrolledToControlled: {},\n  };\n}\n\n/** Reset controlled usage warnings for testing purposes. */\nexport function resetControlledWarnings(): void {\n  if (process.env.NODE_ENV !== 'production') {\n    warningsMap.valueOnChange = {};\n    warningsMap.valueDefaultValue = {};\n    warningsMap.controlledToUncontrolled = {};\n    warningsMap.uncontrolledToControlled = {};\n  }\n}\n\nexport interface IWarnControlledUsageParams<P> {\n  /** ID of the component instance. Used to prevent showing warnings repeatedly. */\n  componentId: string;\n  /** Name of the component class. */\n  componentName: string;\n  /** Current props to evaluate. */\n  props: P;\n  /** Previous props to evaluate (undefined if called in the constructor). */\n  oldProps?: P;\n  /** Name of the prop for the controlled value. */\n  valueProp: keyof P;\n  /** Name of the prop for the uncontrolled initial value. */\n  defaultValueProp: keyof P;\n  /** Name of the change handler prop. */\n  onChangeProp: keyof P;\n  /** Name of the read-only prop. */\n  readOnlyProp?: keyof P;\n}\n\n/**\n * Check for and warn on the following error conditions with a form component:\n * - A value prop is provided (indicated it's being used as controlled) without a change handler,\n *    and the component is not read-only\n * - Both the value and defaultValue props are provided\n * - The component is attempting to switch between controlled and uncontrolled\n *\n * The messages mimic the warnings React gives for these error conditions on input elements.\n * The warning will only be displayed once per component ID.\n */\nexport function warnControlledUsage<P>(params: IWarnControlledUsageParams<P>): void {\n  if (process.env.NODE_ENV !== 'production') {\n    const {\n      componentId,\n      componentName,\n      defaultValueProp,\n      props,\n      oldProps,\n      onChangeProp,\n      readOnlyProp,\n      valueProp,\n    } = params;\n\n    // This warning logic closely follows what React does for native <input> elements.\n\n    const oldIsControlled = oldProps ? checkIsControlled(oldProps, valueProp) : undefined;\n    const newIsControlled = checkIsControlled(props, valueProp);\n\n    if (newIsControlled) {\n      // onChange (or readOnly) must be provided if value is provided\n      const hasOnChange = !!props[onChangeProp];\n      const isReadOnly = !!(readOnlyProp && props[readOnlyProp]);\n      if (!(hasOnChange || isReadOnly) && !warningsMap.valueOnChange[componentId]) {\n        warningsMap.valueOnChange[componentId] = true;\n        warn(\n          `Warning: You provided a '${valueProp}' prop to a ${componentName} without an '${onChangeProp}' handler. ` +\n            `This will render a read-only field. If the field should be mutable use '${defaultValueProp}'. ` +\n            `Otherwise, set '${onChangeProp}'${readOnlyProp ? ` or '${readOnlyProp}'` : ''}.`,\n        );\n      }\n\n      // value and defaultValue are mutually exclusive\n      const defaultValue = props[defaultValueProp];\n      if (defaultValue !== undefined && defaultValue !== null && !warningsMap.valueDefaultValue[componentId]) {\n        warningsMap.valueDefaultValue[componentId] = true;\n        warn(\n          `Warning: You provided both '${valueProp}' and '${defaultValueProp}' to a ${componentName}. ` +\n            `Form fields must be either controlled or uncontrolled (specify either the '${valueProp}' prop, ` +\n            `or the '${defaultValueProp}' prop, but not both). Decide between using a controlled or uncontrolled ` +\n            `${componentName} and remove one of these props. More info: https://fb.me/react-controlled-components`,\n        );\n      }\n    }\n\n    // Warn if switching between uncontrolled and controlled. (One difference between this implementation\n    // and React's <input> is that if oldIsControlled is indeterminate and newIsControlled true, we don't warn.)\n    if (oldProps && newIsControlled !== oldIsControlled) {\n      const oldType = oldIsControlled ? 'a controlled' : 'an uncontrolled';\n      const newType = oldIsControlled ? 'uncontrolled' : 'controlled';\n      const warnMap = oldIsControlled ? warningsMap.controlledToUncontrolled : warningsMap.uncontrolledToControlled;\n      if (!warnMap[componentId]) {\n        warnMap[componentId] = true;\n        warn(\n          `Warning: A component is changing ${oldType} ${componentName} to be ${newType}. ` +\n            `${componentName}s should not switch from controlled to uncontrolled (or vice versa). ` +\n            `Decide between using controlled or uncontrolled for the lifetime of the component. ` +\n            `More info: https://fb.me/react-controlled-components`,\n        );\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}