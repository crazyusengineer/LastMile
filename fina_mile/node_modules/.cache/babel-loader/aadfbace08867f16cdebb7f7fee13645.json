{"ast":null,"code":"/**\n * Rectangle helper class.\n *\n * @public\n * {@docCategory Rectangle}\n */\nvar Rectangle = /** @class */function () {\n  function Rectangle(left, right, top, bottom) {\n    if (left === void 0) {\n      left = 0;\n    }\n    if (right === void 0) {\n      right = 0;\n    }\n    if (top === void 0) {\n      top = 0;\n    }\n    if (bottom === void 0) {\n      bottom = 0;\n    }\n    this.top = top;\n    this.bottom = bottom;\n    this.left = left;\n    this.right = right;\n  }\n  Object.defineProperty(Rectangle.prototype, \"width\", {\n    /**\n     * Calculated automatically by subtracting the right from left\n     */\n    get: function () {\n      return this.right - this.left;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Rectangle.prototype, \"height\", {\n    /**\n     * Calculated automatically by subtracting the bottom from top.\n     */\n    get: function () {\n      return this.bottom - this.top;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Tests if another rect is approximately equal to this rect (within 4 decimal places.)\n   */\n  Rectangle.prototype.equals = function (rect) {\n    // Fixing to 4 decimal places because it allows enough precision and will handle cases when something\n    // should be rounded, like .999999 should round to 1.\n    return parseFloat(this.top.toFixed(4)) === parseFloat(rect.top.toFixed(4)) && parseFloat(this.bottom.toFixed(4)) === parseFloat(rect.bottom.toFixed(4)) && parseFloat(this.left.toFixed(4)) === parseFloat(rect.left.toFixed(4)) && parseFloat(this.right.toFixed(4)) === parseFloat(rect.right.toFixed(4));\n  };\n  return Rectangle;\n}();\nexport { Rectangle };","map":{"version":3,"mappings":"AAAA;;;;;;AAMA;EAME,mBAAYA,IAAgB,EAAEC,KAAiB,EAAEC,GAAe,EAAEC,MAAkB;IAAxE;MAAAH,QAAgB;IAAA;IAAE;MAAAC,SAAiB;IAAA;IAAE;MAAAC,OAAe;IAAA;IAAE;MAAAC,UAAkB;IAAA;IAClF,IAAI,CAACD,GAAG,GAAGA,GAAG;IACd,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACH,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,KAAK,GAAGA,KAAK;EACpB;EAKAG,sBAAWC,4BAAK;IAHhB;;;SAGA;MACE,OAAO,IAAI,CAACJ,KAAK,GAAG,IAAI,CAACD,IAAI;IAC/B,CAAC;;;;EAKDI,sBAAWC,6BAAM;IAHjB;;;SAGA;MACE,OAAO,IAAI,CAACF,MAAM,GAAG,IAAI,CAACD,GAAG;IAC/B,CAAC;;;;EAED;;;EAGOG,0BAAM,GAAb,UAAcC,IAAe;IAC3B;IACA;IACA,OACEC,UAAU,CAAC,IAAI,CAACL,GAAG,CAACM,OAAO,CAAC,CAAC,CAAC,CAAC,KAAKD,UAAU,CAACD,IAAI,CAACJ,GAAG,CAACM,OAAO,CAAC,CAAC,CAAC,CAAC,IACnED,UAAU,CAAC,IAAI,CAACJ,MAAM,CAACK,OAAO,CAAC,CAAC,CAAC,CAAC,KAAKD,UAAU,CAACD,IAAI,CAACH,MAAM,CAACK,OAAO,CAAC,CAAC,CAAC,CAAC,IACzED,UAAU,CAAC,IAAI,CAACP,IAAI,CAACQ,OAAO,CAAC,CAAC,CAAC,CAAC,KAAKD,UAAU,CAACD,IAAI,CAACN,IAAI,CAACQ,OAAO,CAAC,CAAC,CAAC,CAAC,IACrED,UAAU,CAAC,IAAI,CAACN,KAAK,CAACO,OAAO,CAAC,CAAC,CAAC,CAAC,KAAKD,UAAU,CAACD,IAAI,CAACL,KAAK,CAACO,OAAO,CAAC,CAAC,CAAC,CAAC;EAE3E,CAAC;EACH,gBAAC;AAAD,CAAC,EAxCD","names":["left","right","top","bottom","Object","Rectangle","rect","parseFloat","toFixed"],"sources":["/Users/edward/Zhuo/NYU/FA22/design_project/project/node_modules/@fluentui/react/node_modules/@fluentui/utilities/src/Rectangle.ts"],"sourcesContent":["/**\n * Rectangle helper class.\n *\n * @public\n * {@docCategory Rectangle}\n */\nexport class Rectangle {\n  public top: number;\n  public bottom: number;\n  public left: number;\n  public right: number;\n\n  constructor(left: number = 0, right: number = 0, top: number = 0, bottom: number = 0) {\n    this.top = top;\n    this.bottom = bottom;\n    this.left = left;\n    this.right = right;\n  }\n\n  /**\n   * Calculated automatically by subtracting the right from left\n   */\n  public get width(): number {\n    return this.right - this.left;\n  }\n\n  /**\n   * Calculated automatically by subtracting the bottom from top.\n   */\n  public get height(): number {\n    return this.bottom - this.top;\n  }\n\n  /**\n   * Tests if another rect is approximately equal to this rect (within 4 decimal places.)\n   */\n  public equals(rect: Rectangle): boolean {\n    // Fixing to 4 decimal places because it allows enough precision and will handle cases when something\n    // should be rounded, like .999999 should round to 1.\n    return (\n      parseFloat(this.top.toFixed(4)) === parseFloat(rect.top.toFixed(4)) &&\n      parseFloat(this.bottom.toFixed(4)) === parseFloat(rect.bottom.toFixed(4)) &&\n      parseFloat(this.left.toFixed(4)) === parseFloat(rect.left.toFixed(4)) &&\n      parseFloat(this.right.toFixed(4)) === parseFloat(rect.right.toFixed(4))\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}