{"ast":null,"code":"import { arraysEqual } from './array';\n/**\n * Set up a ref resolver function given internal state managed for the ref.\n * @param local Set\n */\nvar createResolver = function (local) {\n  return function (newValue) {\n    for (var _i = 0, _a = local.refs; _i < _a.length; _i++) {\n      var ref = _a[_i];\n      if (typeof ref === 'function') {\n        ref(newValue);\n      } else if (ref) {\n        // work around the immutability of the React.Ref type\n        ref.current = newValue;\n      }\n    }\n  };\n};\n/**\n * Helper to merge refs from within class components.\n */\nexport var createMergedRef = function (value) {\n  var local = {\n    refs: []\n  };\n  return function () {\n    var newRefs = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      newRefs[_i] = arguments[_i];\n    }\n    if (!local.resolver || !arraysEqual(local.refs, newRefs)) {\n      local.resolver = createResolver(local);\n    }\n    local.refs = newRefs;\n    return local.resolver;\n  };\n};","map":{"version":3,"mappings":"AACA,SAASA,WAAW,QAAQ,SAAS;AAUrC;;;;AAIA,IAAMC,cAAc,GAAG,UAAgBC,KAAgC;EAAK,iBAACC,QAA+B;IAC1G,KAAkB,UAAU,EAAVC,UAAK,CAACC,IAAI,EAAVC,cAAU,EAAVA,IAAU,EAAE;MAAzB,IAAMC,GAAG;MACZ,IAAI,OAAOA,GAAG,KAAK,UAAU,EAAE;QAC7BA,GAAG,CAACJ,QAAQ,CAAC;OACd,MAAM,IAAII,GAAG,EAAE;QACd;QACEA,GAA6E,CAACC,OAAO,GAAGL,QAAQ;;;EAGxG,CAAC;AAT2E,CAS3E;AAED;;;AAGA,OAAO,IAAMM,eAAe,GAAG,UAAuBC,KAAc;EAClE,IAAMR,KAAK,GAA8B;IACvCG,IAAI,EAAE;GACP;EAED,OAAO;IACL;SAAA,UAA4D,EAA5DC,qBAA4D,EAA5DA,IAA4D;MAA5DK;;IAEA,IAAI,CAACT,KAAK,CAACU,QAAQ,IAAI,CAACZ,WAAW,CAACE,KAAK,CAACG,IAAI,EAAEM,OAAO,CAAC,EAAE;MACxDT,KAAK,CAACU,QAAQ,GAAGX,cAAc,CAAgBC,KAAK,CAAC;;IAGvDA,KAAK,CAACG,IAAI,GAAGM,OAAO;IAEpB,OAAOT,KAAK,CAACU,QAAS;EACxB,CAAC;AACH,CAAC","names":["arraysEqual","createResolver","local","newValue","_a","refs","_i","ref","current","createMergedRef","value","newRefs","resolver"],"sources":["/Users/edward/Zhuo/NYU/FA22/design_project/project/node_modules/@fluentui/react/node_modules/@fluentui/utilities/src/createMergedRef.ts"],"sourcesContent":["import * as React from 'react';\nimport { arraysEqual } from './array';\n\n/**\n * Internal state type for the ref.\n */\ntype LocalState<TType, TValue> = {\n  refs: (React.Ref<TType | null | TValue> | undefined)[];\n  resolver?: (newValue: TType | TValue | null) => void;\n};\n\n/**\n * Set up a ref resolver function given internal state managed for the ref.\n * @param local Set\n */\nconst createResolver = <TType, TValue>(local: LocalState<TType, TValue>) => (newValue: TType | TValue | null) => {\n  for (const ref of local.refs) {\n    if (typeof ref === 'function') {\n      ref(newValue);\n    } else if (ref) {\n      // work around the immutability of the React.Ref type\n      ((ref as unknown) as React.MutableRefObject<TType | TValue | null | undefined>).current = newValue;\n    }\n  }\n};\n\n/**\n * Helper to merge refs from within class components.\n */\nexport const createMergedRef = <TType, TValue = null>(value?: TValue) => {\n  const local: LocalState<TType, TValue> = {\n    refs: [] as LocalState<TType, TValue>['refs'],\n  };\n\n  return (\n    ...newRefs: (React.Ref<TType | null | TValue> | undefined)[]\n  ): ((newValue: TType | TValue | null) => void) => {\n    if (!local.resolver || !arraysEqual(local.refs, newRefs)) {\n      local.resolver = createResolver<TType, TValue>(local);\n    }\n\n    local.refs = newRefs;\n\n    return local.resolver!;\n  };\n};\n"]},"metadata":{},"sourceType":"module"}