{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { Label } from '../../Label';\nimport { Icon } from '../../Icon';\nimport { Async, classNamesFunction, DelayedRender, getId, getNativeProps, getWindow, initializeComponentRef, inputProperties, isControlled, isIE11, textAreaProperties, warn, warnControlledUsage, warnMutuallyExclusive } from '../../Utilities';\nvar getClassNames = classNamesFunction();\nvar DEFAULT_STATE_VALUE = '';\nvar COMPONENT_NAME = 'TextField';\nvar REVEAL_ICON_NAME = 'RedEye';\nvar HIDE_ICON_NAME = 'Hide';\nvar TextFieldBase = /** @class */function (_super) {\n  __extends(TextFieldBase, _super);\n  function TextFieldBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this._textElement = React.createRef();\n    _this._onFocus = function (ev) {\n      if (_this.props.onFocus) {\n        _this.props.onFocus(ev);\n      }\n      _this.setState({\n        isFocused: true\n      }, function () {\n        if (_this.props.validateOnFocusIn) {\n          _this._validate(_this.value);\n        }\n      });\n    };\n    _this._onBlur = function (ev) {\n      if (_this.props.onBlur) {\n        _this.props.onBlur(ev);\n      }\n      _this.setState({\n        isFocused: false\n      }, function () {\n        if (_this.props.validateOnFocusOut) {\n          _this._validate(_this.value);\n        }\n      });\n    };\n    _this._onRenderLabel = function (props) {\n      var label = props.label,\n        required = props.required;\n      // IProcessedStyleSet definition requires casting for what Label expects as its styles prop\n      var labelStyles = _this._classNames.subComponentStyles ? _this._classNames.subComponentStyles.label : undefined;\n      if (label) {\n        return React.createElement(Label, {\n          required: required,\n          htmlFor: _this._id,\n          styles: labelStyles,\n          disabled: props.disabled,\n          id: _this._labelId\n        }, props.label);\n      }\n      return null;\n    };\n    _this._onRenderDescription = function (props) {\n      if (props.description) {\n        return React.createElement(\"span\", {\n          className: _this._classNames.description\n        }, props.description);\n      }\n      return null;\n    };\n    _this._onRevealButtonClick = function (event) {\n      _this.setState(function (prevState) {\n        return {\n          isRevealingPassword: !prevState.isRevealingPassword\n        };\n      });\n    };\n    _this._onInputChange = function (event) {\n      // Previously, we needed to call both onInput and onChange due to some weird IE/React issues,\n      // which have *probably* been fixed now:\n      // - https://github.com/microsoft/fluentui/issues/744 (likely fixed)\n      // - https://github.com/microsoft/fluentui/issues/824 (confirmed fixed)\n      var _a, _b;\n      // TODO (Fabric 8?) - Switch to calling only onChange. This switch is pretty disruptive for\n      // tests (ours and maybe consumers' too), so it seemed best to do the switch in a major bump.\n      var element = event.target;\n      var value = element.value;\n      // Ignore this event if any of the following are true:\n      // - the value is undefined (in case one of the IE bugs comes back)\n      // - it's a duplicate event (important since onInputChange is called twice per actual user event)\n      // - it's the same as the previous value\n      var previousValue = _getValue(_this.props, _this.state) || '';\n      if (value === undefined || value === _this._lastChangeValue || value === previousValue) {\n        _this._lastChangeValue = undefined;\n        return;\n      }\n      _this._lastChangeValue = value;\n      (_b = (_a = _this.props).onChange) === null || _b === void 0 ? void 0 : _b.call(_a, event, value);\n      if (!_this._isControlled) {\n        // ONLY if this is an uncontrolled component, update the displayed value.\n        // (Controlled components must update the `value` prop from `onChange`.)\n        _this.setState({\n          uncontrolledValue: value\n        });\n      }\n    };\n    initializeComponentRef(_this);\n    _this._async = new Async(_this);\n    if (process.env.NODE_ENV !== 'production') {\n      warnMutuallyExclusive(COMPONENT_NAME, props, {\n        errorMessage: 'onGetErrorMessage'\n      });\n    }\n    _this._fallbackId = getId(COMPONENT_NAME);\n    _this._descriptionId = getId(COMPONENT_NAME + 'Description');\n    _this._labelId = getId(COMPONENT_NAME + 'Label');\n    _this._prefixId = getId(COMPONENT_NAME + 'Prefix');\n    _this._suffixId = getId(COMPONENT_NAME + 'Suffix');\n    _this._warnControlledUsage();\n    var _a = props.defaultValue,\n      defaultValue = _a === void 0 ? DEFAULT_STATE_VALUE : _a;\n    if (typeof defaultValue === 'number') {\n      // This isn't allowed per the props, but happens anyway.\n      defaultValue = String(defaultValue);\n    }\n    _this.state = {\n      uncontrolledValue: _this._isControlled ? undefined : defaultValue,\n      isFocused: false,\n      errorMessage: ''\n    };\n    _this._delayedValidate = _this._async.debounce(_this._validate, _this.props.deferredValidationTime);\n    _this._lastValidation = 0;\n    return _this;\n  }\n  Object.defineProperty(TextFieldBase.prototype, \"value\", {\n    /**\n     * Gets the current value of the text field.\n     */\n    get: function () {\n      return _getValue(this.props, this.state);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  TextFieldBase.prototype.componentDidMount = function () {\n    this._adjustInputHeight();\n    if (this.props.validateOnLoad) {\n      this._validate(this.value);\n    }\n  };\n  TextFieldBase.prototype.componentWillUnmount = function () {\n    this._async.dispose();\n  };\n  TextFieldBase.prototype.getSnapshotBeforeUpdate = function (prevProps, prevState) {\n    return {\n      selection: [this.selectionStart, this.selectionEnd]\n    };\n  };\n  TextFieldBase.prototype.componentDidUpdate = function (prevProps, prevState, snapshot) {\n    var props = this.props;\n    var _a = (snapshot || {}).selection,\n      selection = _a === void 0 ? [null, null] : _a;\n    var start = selection[0],\n      end = selection[1];\n    if (!!prevProps.multiline !== !!props.multiline && prevState.isFocused) {\n      // The text field has just changed between single- and multi-line, so we need to reset focus\n      // and selection/cursor.\n      this.focus();\n      if (start !== null && end !== null && start >= 0 && end >= 0) {\n        this.setSelectionRange(start, end);\n      }\n    }\n    if (prevProps.value !== props.value) {\n      // Only if the value in props changed, reset the record of the last value seen by a\n      // change/input event (don't do this if the value in state changed, since at least in tests\n      // the state update may happen before the second event in a series)\n      this._lastChangeValue = undefined;\n    }\n    var prevValue = _getValue(prevProps, prevState);\n    var value = this.value;\n    if (prevValue !== value) {\n      // Handle controlled/uncontrolled warnings and status\n      this._warnControlledUsage(prevProps);\n      // Clear error message if needed\n      // TODO: is there any way to do this without an extra render?\n      if (this.state.errorMessage && !props.errorMessage) {\n        this.setState({\n          errorMessage: ''\n        });\n      }\n      // Adjust height if needed based on new value\n      this._adjustInputHeight();\n      // TODO: #5875 added logic to trigger validation in componentWillReceiveProps and other places.\n      // This seems a bit odd and hard to integrate with the new approach.\n      // (Starting to think we should just put the validation logic in a separate wrapper component...?)\n      if (_shouldValidateAllChanges(props)) {\n        this._delayedValidate(value);\n      }\n    }\n  };\n  TextFieldBase.prototype.render = function () {\n    var _a = this.props,\n      borderless = _a.borderless,\n      className = _a.className,\n      disabled = _a.disabled,\n      invalid = _a.invalid,\n      iconProps = _a.iconProps,\n      inputClassName = _a.inputClassName,\n      label = _a.label,\n      multiline = _a.multiline,\n      required = _a.required,\n      underlined = _a.underlined,\n      prefix = _a.prefix,\n      resizable = _a.resizable,\n      suffix = _a.suffix,\n      theme = _a.theme,\n      styles = _a.styles,\n      autoAdjustHeight = _a.autoAdjustHeight,\n      canRevealPassword = _a.canRevealPassword,\n      revealPasswordAriaLabel = _a.revealPasswordAriaLabel,\n      type = _a.type,\n      _b = _a.onRenderPrefix,\n      onRenderPrefix = _b === void 0 ? this._onRenderPrefix : _b,\n      _c = _a.onRenderSuffix,\n      onRenderSuffix = _c === void 0 ? this._onRenderSuffix : _c,\n      _d = _a.onRenderLabel,\n      onRenderLabel = _d === void 0 ? this._onRenderLabel : _d,\n      _e = _a.onRenderDescription,\n      onRenderDescription = _e === void 0 ? this._onRenderDescription : _e;\n    var _f = this.state,\n      isFocused = _f.isFocused,\n      isRevealingPassword = _f.isRevealingPassword;\n    var errorMessage = this._errorMessage;\n    var isInvalid = typeof invalid === 'boolean' ? invalid : !!errorMessage;\n    var hasRevealButton = !!canRevealPassword && type === 'password' && _browserNeedsRevealButton();\n    var classNames = this._classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      disabled: disabled,\n      focused: isFocused,\n      required: required,\n      multiline: multiline,\n      hasLabel: !!label,\n      hasErrorMessage: isInvalid,\n      borderless: borderless,\n      resizable: resizable,\n      hasIcon: !!iconProps,\n      underlined: underlined,\n      inputClassName: inputClassName,\n      autoAdjustHeight: autoAdjustHeight,\n      hasRevealButton: hasRevealButton\n    });\n    return (\n      // eslint-disable-next-line deprecation/deprecation\n      React.createElement(\"div\", {\n        ref: this.props.elementRef,\n        className: classNames.root\n      }, React.createElement(\"div\", {\n        className: classNames.wrapper\n      }, onRenderLabel(this.props, this._onRenderLabel), React.createElement(\"div\", {\n        className: classNames.fieldGroup\n      }, (prefix !== undefined || this.props.onRenderPrefix) && React.createElement(\"div\", {\n        className: classNames.prefix,\n        id: this._prefixId\n      }, onRenderPrefix(this.props, this._onRenderPrefix)), multiline ? this._renderTextArea() : this._renderInput(), iconProps && React.createElement(Icon, __assign({\n        className: classNames.icon\n      }, iconProps)), hasRevealButton &&\n      // Explicitly set type=\"button\" since the default button type within a form is \"submit\"\n      React.createElement(\"button\", {\n        \"aria-label\": revealPasswordAriaLabel,\n        className: classNames.revealButton,\n        onClick: this._onRevealButtonClick,\n        \"aria-pressed\": !!isRevealingPassword,\n        type: \"button\"\n      }, React.createElement(\"span\", {\n        className: classNames.revealSpan\n      }, React.createElement(Icon, {\n        className: classNames.revealIcon,\n        iconName: isRevealingPassword ? HIDE_ICON_NAME : REVEAL_ICON_NAME\n      }))), (suffix !== undefined || this.props.onRenderSuffix) && React.createElement(\"div\", {\n        className: classNames.suffix,\n        id: this._suffixId\n      }, onRenderSuffix(this.props, this._onRenderSuffix)))), this._isDescriptionAvailable && React.createElement(\"span\", {\n        id: this._descriptionId\n      }, onRenderDescription(this.props, this._onRenderDescription), errorMessage && React.createElement(\"div\", {\n        role: \"alert\"\n      }, React.createElement(DelayedRender, null, this._renderErrorMessage()))))\n    );\n  };\n  /**\n   * Sets focus on the text field\n   */\n  TextFieldBase.prototype.focus = function () {\n    if (this._textElement.current) {\n      this._textElement.current.focus();\n    }\n  };\n  /**\n   * Blurs the text field.\n   */\n  TextFieldBase.prototype.blur = function () {\n    if (this._textElement.current) {\n      this._textElement.current.blur();\n    }\n  };\n  /**\n   * Selects the text field\n   */\n  TextFieldBase.prototype.select = function () {\n    if (this._textElement.current) {\n      this._textElement.current.select();\n    }\n  };\n  /**\n   * Sets the selection start of the text field to a specified value\n   */\n  TextFieldBase.prototype.setSelectionStart = function (value) {\n    if (this._textElement.current) {\n      this._textElement.current.selectionStart = value;\n    }\n  };\n  /**\n   * Sets the selection end of the text field to a specified value\n   */\n  TextFieldBase.prototype.setSelectionEnd = function (value) {\n    if (this._textElement.current) {\n      this._textElement.current.selectionEnd = value;\n    }\n  };\n  Object.defineProperty(TextFieldBase.prototype, \"selectionStart\", {\n    /**\n     * Gets the selection start of the text field\n     */\n    get: function () {\n      return this._textElement.current ? this._textElement.current.selectionStart : -1;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextFieldBase.prototype, \"selectionEnd\", {\n    /**\n     * Gets the selection end of the text field\n     */\n    get: function () {\n      return this._textElement.current ? this._textElement.current.selectionEnd : -1;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Sets the start and end positions of a selection in a text field.\n   * @param start - Index of the start of the selection.\n   * @param end - Index of the end of the selection.\n   */\n  TextFieldBase.prototype.setSelectionRange = function (start, end) {\n    if (this._textElement.current) {\n      this._textElement.current.setSelectionRange(start, end);\n    }\n  };\n  TextFieldBase.prototype._warnControlledUsage = function (prevProps) {\n    // Show warnings if props are being used in an invalid way\n    warnControlledUsage({\n      componentId: this._id,\n      componentName: COMPONENT_NAME,\n      props: this.props,\n      oldProps: prevProps,\n      valueProp: 'value',\n      defaultValueProp: 'defaultValue',\n      onChangeProp: 'onChange',\n      readOnlyProp: 'readOnly'\n    });\n    if (this.props.value === null && !this._hasWarnedNullValue) {\n      this._hasWarnedNullValue = true;\n      warn(\"Warning: 'value' prop on '\" + COMPONENT_NAME + \"' should not be null. Consider using an \" + 'empty string to clear the component or undefined to indicate an uncontrolled component.');\n    }\n  };\n  Object.defineProperty(TextFieldBase.prototype, \"_id\", {\n    /** Returns `props.id` if available, or a fallback if not. */\n    get: function () {\n      return this.props.id || this._fallbackId;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextFieldBase.prototype, \"_isControlled\", {\n    get: function () {\n      return isControlled(this.props, 'value');\n    },\n    enumerable: false,\n    configurable: true\n  });\n  TextFieldBase.prototype._onRenderPrefix = function (props) {\n    var prefix = props.prefix;\n    return React.createElement(\"span\", {\n      style: {\n        paddingBottom: '1px'\n      }\n    }, prefix);\n  };\n  TextFieldBase.prototype._onRenderSuffix = function (props) {\n    var suffix = props.suffix;\n    return React.createElement(\"span\", {\n      style: {\n        paddingBottom: '1px'\n      }\n    }, suffix);\n  };\n  Object.defineProperty(TextFieldBase.prototype, \"_errorMessage\", {\n    /**\n     * Current error message from either `props.errorMessage` or the result of `props.onGetErrorMessage`.\n     *\n     * - If there is no validation error or we have not validated the input value, errorMessage is an empty string.\n     * - If we have done the validation and there is validation error, errorMessage is the validation error message.\n     */\n    get: function () {\n      var _a = this.props.errorMessage,\n        errorMessage = _a === void 0 ? this.state.errorMessage : _a;\n      return errorMessage || '';\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Renders error message based on the type of the message.\n   *\n   * - If error message is string, it will render using the built in styles.\n   * - If error message is an element, user has full control over how it's rendered.\n   */\n  TextFieldBase.prototype._renderErrorMessage = function () {\n    var errorMessage = this._errorMessage;\n    return errorMessage ? typeof errorMessage === 'string' ? React.createElement(\"p\", {\n      className: this._classNames.errorMessage\n    }, React.createElement(\"span\", {\n      \"data-automation-id\": \"error-message\"\n    }, errorMessage)) : React.createElement(\"div\", {\n      className: this._classNames.errorMessage,\n      \"data-automation-id\": \"error-message\"\n    }, errorMessage) : null;\n  };\n  Object.defineProperty(TextFieldBase.prototype, \"_isDescriptionAvailable\", {\n    /**\n     * If a custom description render function is supplied then treat description as always available.\n     * Otherwise defer to the presence of description or error message text.\n     */\n    get: function () {\n      var props = this.props;\n      return !!(props.onRenderDescription || props.description || this._errorMessage);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  TextFieldBase.prototype._renderTextArea = function () {\n    var _a = this.props.invalid,\n      invalid = _a === void 0 ? !!this._errorMessage : _a;\n    var textAreaProps = getNativeProps(this.props, textAreaProperties, ['defaultValue']);\n    var ariaLabelledBy = this.props['aria-labelledby'] || (this.props.label ? this._labelId : undefined);\n    return React.createElement(\"textarea\", __assign({\n      id: this._id\n    }, textAreaProps, {\n      ref: this._textElement,\n      value: this.value || '',\n      onInput: this._onInputChange,\n      onChange: this._onInputChange,\n      className: this._classNames.field,\n      \"aria-labelledby\": ariaLabelledBy,\n      \"aria-describedby\": this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby'],\n      \"aria-invalid\": invalid,\n      \"aria-label\": this.props.ariaLabel,\n      readOnly: this.props.readOnly,\n      onFocus: this._onFocus,\n      onBlur: this._onBlur\n    }));\n  };\n  TextFieldBase.prototype._renderInput = function () {\n    var _a = this.props,\n      ariaLabel = _a.ariaLabel,\n      _b = _a.invalid,\n      invalid = _b === void 0 ? !!this._errorMessage : _b,\n      onRenderPrefix = _a.onRenderPrefix,\n      onRenderSuffix = _a.onRenderSuffix,\n      prefix = _a.prefix,\n      suffix = _a.suffix,\n      _c = _a.type,\n      type = _c === void 0 ? 'text' : _c,\n      label = _a.label;\n    // build aria-labelledby list from label, prefix, and suffix\n    var labelIds = [];\n    label && labelIds.push(this._labelId);\n    (prefix !== undefined || onRenderPrefix) && labelIds.push(this._prefixId);\n    (suffix !== undefined || onRenderSuffix) && labelIds.push(this._suffixId);\n    var inputProps = __assign(__assign({\n      type: this.state.isRevealingPassword ? 'text' : type,\n      id: this._id\n    }, getNativeProps(this.props, inputProperties, ['defaultValue', 'type'])), {\n      'aria-labelledby': this.props['aria-labelledby'] || (labelIds.length > 0 ? labelIds.join(' ') : undefined),\n      ref: this._textElement,\n      value: this.value || '',\n      onInput: this._onInputChange,\n      onChange: this._onInputChange,\n      className: this._classNames.field,\n      'aria-label': ariaLabel,\n      'aria-describedby': this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby'],\n      'aria-invalid': invalid,\n      onFocus: this._onFocus,\n      onBlur: this._onBlur\n    });\n    var defaultRender = function (updatedInputProps) {\n      return React.createElement(\"input\", __assign({}, updatedInputProps));\n    };\n    var onRenderInput = this.props.onRenderInput || defaultRender;\n    return onRenderInput(inputProps, defaultRender);\n  };\n  TextFieldBase.prototype._validate = function (value) {\n    var _this = this;\n    // In case _validate is called again while validation promise is executing\n    if (this._latestValidateValue === value && _shouldValidateAllChanges(this.props)) {\n      return;\n    }\n    this._latestValidateValue = value;\n    var onGetErrorMessage = this.props.onGetErrorMessage;\n    var result = onGetErrorMessage && onGetErrorMessage(value || '');\n    if (result !== undefined) {\n      if (typeof result === 'string' || !('then' in result)) {\n        this.setState({\n          errorMessage: result\n        });\n        this._notifyAfterValidate(value, result);\n      } else {\n        var currentValidation_1 = ++this._lastValidation;\n        result.then(function (errorMessage) {\n          if (currentValidation_1 === _this._lastValidation) {\n            _this.setState({\n              errorMessage: errorMessage\n            });\n          }\n          _this._notifyAfterValidate(value, errorMessage);\n        });\n      }\n    } else {\n      this._notifyAfterValidate(value, '');\n    }\n  };\n  TextFieldBase.prototype._notifyAfterValidate = function (value, errorMessage) {\n    if (value === this.value && this.props.onNotifyValidationResult) {\n      this.props.onNotifyValidationResult(errorMessage, value);\n    }\n  };\n  TextFieldBase.prototype._adjustInputHeight = function () {\n    if (this._textElement.current && this.props.autoAdjustHeight && this.props.multiline) {\n      var textField = this._textElement.current;\n      textField.style.height = '';\n      textField.style.height = textField.scrollHeight + 'px';\n    }\n  };\n  TextFieldBase.defaultProps = {\n    resizable: true,\n    deferredValidationTime: 200,\n    validateOnLoad: true\n  };\n  return TextFieldBase;\n}(React.Component);\nexport { TextFieldBase };\n/** Get the value from the given state and props (converting from number to string if needed) */\nfunction _getValue(props, state) {\n  var _a = props.value,\n    value = _a === void 0 ? state.uncontrolledValue : _a;\n  if (typeof value === 'number') {\n    // not allowed per typings, but happens anyway\n    return String(value);\n  }\n  return value;\n}\n/**\n * If `validateOnFocusIn` or `validateOnFocusOut` is true, validation should run **only** on that event.\n * Otherwise, validation should run on every change.\n */\nfunction _shouldValidateAllChanges(props) {\n  return !(props.validateOnFocusIn || props.validateOnFocusOut);\n}\n// Only calculate this once across all TextFields, since will stay the same\nvar __browserNeedsRevealButton;\nfunction _browserNeedsRevealButton() {\n  if (typeof __browserNeedsRevealButton !== 'boolean') {\n    var win = getWindow();\n    if (win === null || win === void 0 ? void 0 : win.navigator) {\n      // Edge, Chromium Edge\n      var isEdge = /Edg/.test(win.navigator.userAgent || '');\n      __browserNeedsRevealButton = !(isIE11() || isEdge);\n    } else {\n      __browserNeedsRevealButton = true;\n    }\n  }\n  return __browserNeedsRevealButton;\n}","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,KAAK,QAAQ,aAAa;AACnC,SAASC,IAAI,QAAQ,YAAY;AACjC,SACEC,KAAK,EACLC,kBAAkB,EAClBC,aAAa,EACbC,KAAK,EACLC,cAAc,EACdC,SAAS,EACTC,sBAAsB,EACtBC,eAAe,EACfC,YAAY,EACZC,MAAM,EACNC,kBAAkB,EAClBC,IAAI,EACJC,mBAAmB,EACnBC,qBAAqB,QAChB,iBAAiB;AAMxB,IAAMC,aAAa,GAAGb,kBAAkB,EAA0C;AAgClF,IAAMc,mBAAmB,GAAG,EAAE;AAC9B,IAAMC,cAAc,GAAG,WAAW;AAElC,IAAMC,gBAAgB,GAAG,QAAQ;AACjC,IAAMC,cAAc,GAAG,MAAM;AAE7B;EACUC;EAwBR,uBAAmBC,KAAsB;IAAzC,YACEC,kBAAMD,KAAK,CAAC;IAPNE,kBAAY,GAAGzB,KAAK,CAAC0B,SAAS,EAA0C;IA6TxED,cAAQ,GAAG,UAACE,EAA4D;MAC9E,IAAIF,KAAI,CAACF,KAAK,CAACK,OAAO,EAAE;QACtBH,KAAI,CAACF,KAAK,CAACK,OAAO,CAACD,EAAE,CAAC;;MAGxBF,KAAI,CAACI,QAAQ,CAAC;QAAEC,SAAS,EAAE;MAAI,CAAE,EAAE;QACjC,IAAIL,KAAI,CAACF,KAAK,CAACQ,iBAAiB,EAAE;UAChCN,KAAI,CAACO,SAAS,CAACP,KAAI,CAACQ,KAAK,CAAC;;MAE9B,CAAC,CAAC;IACJ,CAAC;IAEOR,aAAO,GAAG,UAACE,EAA4D;MAC7E,IAAIF,KAAI,CAACF,KAAK,CAACW,MAAM,EAAE;QACrBT,KAAI,CAACF,KAAK,CAACW,MAAM,CAACP,EAAE,CAAC;;MAGvBF,KAAI,CAACI,QAAQ,CAAC;QAAEC,SAAS,EAAE;MAAK,CAAE,EAAE;QAClC,IAAIL,KAAI,CAACF,KAAK,CAACY,kBAAkB,EAAE;UACjCV,KAAI,CAACO,SAAS,CAACP,KAAI,CAACQ,KAAK,CAAC;;MAE9B,CAAC,CAAC;IACJ,CAAC;IAEOR,oBAAc,GAAG,UAACF,KAAsB;MACtC,SAAK,GAAeA,KAAK,MAApB;QAAEa,QAAQ,GAAKb,KAAK,SAAV;MACvB;MACA,IAAMc,WAAW,GAAGZ,KAAI,CAACa,WAAW,CAACC,kBAAkB,GAClDd,KAAI,CAACa,WAAW,CAACC,kBAAkB,CAACC,KAAgE,GACrGC,SAAS;MAEb,IAAID,KAAK,EAAE;QACT,OACExC,oBAACC,KAAK;UAACmC,QAAQ,EAAEA,QAAQ;UAAEM,OAAO,EAAEjB,KAAI,CAACkB,GAAG;UAAEC,MAAM,EAAEP,WAAW;UAAEQ,QAAQ,EAAEtB,KAAK,CAACsB,QAAQ;UAAEC,EAAE,EAAErB,KAAI,CAACsB;QAAQ,GAC3GxB,KAAK,CAACiB,KAAK,CACN;;MAGZ,OAAO,IAAI;IACb,CAAC;IAEOf,0BAAoB,GAAG,UAACF,KAAsB;MACpD,IAAIA,KAAK,CAACyB,WAAW,EAAE;QACrB,OAAOhD;UAAMiD,SAAS,EAAExB,KAAI,CAACa,WAAW,CAACU;QAAW,GAAGzB,KAAK,CAACyB,WAAW,CAAQ;;MAElF,OAAO,IAAI;IACb,CAAC;IA4HOvB,0BAAoB,GAAG,UAACyB,KAA0C;MACxEzB,KAAI,CAACI,QAAQ,CAAC,mBAAS;QAAI,OAAC;UAAEsB,mBAAmB,EAAE,CAACC,SAAS,CAACD;QAAmB,CAAE;MAAxD,CAAyD,CAAC;IACvF,CAAC;IAEO1B,oBAAc,GAAG,UAACyB,KAA8D;MACtF;MACA;MACA;MACA;;MAEA;MACA;MAEA,IAAMG,OAAO,GAAGH,KAAK,CAACI,MAA0B;MAChD,IAAMrB,KAAK,GAAGoB,OAAO,CAACpB,KAAK;MAC3B;MACA;MACA;MACA;MACA,IAAMsB,aAAa,GAAGC,SAAS,CAAC/B,KAAI,CAACF,KAAK,EAAEE,KAAI,CAACgC,KAAK,CAAC,IAAI,EAAE;MAC7D,IAAIxB,KAAK,KAAKQ,SAAS,IAAIR,KAAK,KAAKR,KAAI,CAACiC,gBAAgB,IAAIzB,KAAK,KAAKsB,aAAa,EAAE;QACrF9B,KAAI,CAACiC,gBAAgB,GAAGjB,SAAS;QACjC;;MAEFhB,KAAI,CAACiC,gBAAgB,GAAGzB,KAAK;MAE7B,iBAAI,CAACV,KAAK,EAACoC,QAAQ,mDAAGT,KAAK,EAAEjB,KAAK,CAAC;MAEnC,IAAI,CAACR,KAAI,CAACmC,aAAa,EAAE;QACvB;QACA;QACAnC,KAAI,CAACI,QAAQ,CAAC;UAAEgC,iBAAiB,EAAE5B;QAAK,CAAE,CAAC;;IAE/C,CAAC;IA/fCxB,sBAAsB,CAACgB,KAAI,CAAC;IAC5BA,KAAI,CAACqC,MAAM,GAAG,IAAI3D,KAAK,CAACsB,KAAI,CAAC;IAE7B,IAAIsC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACzCjD,qBAAqB,CAACG,cAAc,EAAEI,KAAK,EAAE;QAC3C2C,YAAY,EAAE;OACf,CAAC;;IAGJzC,KAAI,CAAC0C,WAAW,GAAG7D,KAAK,CAACa,cAAc,CAAC;IACxCM,KAAI,CAAC2C,cAAc,GAAG9D,KAAK,CAACa,cAAc,GAAG,aAAa,CAAC;IAC3DM,KAAI,CAACsB,QAAQ,GAAGzC,KAAK,CAACa,cAAc,GAAG,OAAO,CAAC;IAC/CM,KAAI,CAAC4C,SAAS,GAAG/D,KAAK,CAACa,cAAc,GAAG,QAAQ,CAAC;IACjDM,KAAI,CAAC6C,SAAS,GAAGhE,KAAK,CAACa,cAAc,GAAG,QAAQ,CAAC;IAEjDM,KAAI,CAAC8C,oBAAoB,EAAE;IAErB,SAAuChD,KAAK,aAAV;MAAlCiD,YAAY,mBAAGtD,mBAAmB;IACxC,IAAI,OAAOsD,YAAY,KAAK,QAAQ,EAAE;MACpC;MACAA,YAAY,GAAGC,MAAM,CAACD,YAAY,CAAC;;IAErC/C,KAAI,CAACgC,KAAK,GAAG;MACXI,iBAAiB,EAAEpC,KAAI,CAACmC,aAAa,GAAGnB,SAAS,GAAG+B,YAAY;MAChE1C,SAAS,EAAE,KAAK;MAChBoC,YAAY,EAAE;KACf;IAEDzC,KAAI,CAACiD,gBAAgB,GAAGjD,KAAI,CAACqC,MAAM,CAACa,QAAQ,CAAClD,KAAI,CAACO,SAAS,EAAEP,KAAI,CAACF,KAAK,CAACqD,sBAAsB,CAAC;IAC/FnD,KAAI,CAACoD,eAAe,GAAG,CAAC;;EAC1B;EAKAC,sBAAWC,gCAAK;IAHhB;;;SAGA;MACE,OAAOvB,SAAS,CAAC,IAAI,CAACjC,KAAK,EAAE,IAAI,CAACkC,KAAK,CAAC;IAC1C,CAAC;;;;EAEMsB,yCAAiB,GAAxB;IACE,IAAI,CAACC,kBAAkB,EAAE;IAEzB,IAAI,IAAI,CAACzD,KAAK,CAAC0D,cAAc,EAAE;MAC7B,IAAI,CAACjD,SAAS,CAAC,IAAI,CAACC,KAAK,CAAC;;EAE9B,CAAC;EAEM8C,4CAAoB,GAA3B;IACE,IAAI,CAACjB,MAAM,CAACoB,OAAO,EAAE;EACvB,CAAC;EAEMH,+CAAuB,GAA9B,UAA+BI,SAA0B,EAAE/B,SAA0B;IACnF,OAAO;MACLgC,SAAS,EAAE,CAAC,IAAI,CAACC,cAAc,EAAE,IAAI,CAACC,YAAY;KACnD;EACH,CAAC;EAEMP,0CAAkB,GAAzB,UACEI,SAA0B,EAC1B/B,SAA0B,EAC1BmC,QAA4B;IAE5B,IAAMhE,KAAK,GAAG,IAAI,CAACA,KAAK;IAChB,SAA6B,SAAQ,IAAI,EAAE,WAAnB;MAAxB6D,SAAS,mBAAG,CAAC,IAAI,EAAE,IAAI,CAAC;IACzB,SAAK,GAASA,SAAS,GAAlB;MAAEI,GAAG,GAAIJ,SAAS,GAAb;IAEjB,IAAI,CAAC,CAACD,SAAS,CAACM,SAAS,KAAK,CAAC,CAAClE,KAAK,CAACkE,SAAS,IAAIrC,SAAS,CAACtB,SAAS,EAAE;MACtE;MACA;MACA,IAAI,CAAC4D,KAAK,EAAE;MACZ,IAAIC,KAAK,KAAK,IAAI,IAAIH,GAAG,KAAK,IAAI,IAAIG,KAAK,IAAI,CAAC,IAAIH,GAAG,IAAI,CAAC,EAAE;QAC5D,IAAI,CAACI,iBAAiB,CAACD,KAAK,EAAEH,GAAG,CAAC;;;IAItC,IAAIL,SAAS,CAAClD,KAAK,KAAKV,KAAK,CAACU,KAAK,EAAE;MACnC;MACA;MACA;MACA,IAAI,CAACyB,gBAAgB,GAAGjB,SAAS;;IAGnC,IAAMoD,SAAS,GAAGrC,SAAS,CAAC2B,SAAS,EAAE/B,SAAS,CAAC;IACjD,IAAMnB,KAAK,GAAG,IAAI,CAACA,KAAK;IACxB,IAAI4D,SAAS,KAAK5D,KAAK,EAAE;MACvB;MACA,IAAI,CAACsC,oBAAoB,CAACY,SAAS,CAAC;MAEpC;MACA;MACA,IAAI,IAAI,CAAC1B,KAAK,CAACS,YAAY,IAAI,CAAC3C,KAAK,CAAC2C,YAAY,EAAE;QAClD,IAAI,CAACrC,QAAQ,CAAC;UAAEqC,YAAY,EAAE;QAAE,CAAE,CAAC;;MAGrC;MACA,IAAI,CAACc,kBAAkB,EAAE;MAEzB;MACA;MACA;MACA,IAAIc,yBAAyB,CAACvE,KAAK,CAAC,EAAE;QACpC,IAAI,CAACmD,gBAAgB,CAACzC,KAAK,CAAC;;;EAGlC,CAAC;EAEM8C,8BAAM,GAAb;IACQ,SAwBF,IAAI,CAACxD,KAAK;MAvBZwE,UAAU;MACV9C,SAAS;MACTJ,QAAQ;MACRmD,OAAO;MACPC,SAAS;MACTC,cAAc;MACd1D,KAAK;MACLiD,SAAS;MACTrD,QAAQ;MACR+D,UAAU;MACVC,MAAM;MACNC,SAAS;MACTC,MAAM;MACNC,KAAK;MACL3D,MAAM;MACN4D,gBAAgB;MAChBC,iBAAiB;MACjBC,uBAAuB;MACvBC,IAAI;MACJC,sBAAqC;MAArCC,cAAc,mBAAG,IAAI,CAACC,eAAe;MACrCC,sBAAqC;MAArCC,cAAc,mBAAG,IAAI,CAACC,eAAe;MACrCC,qBAAmC;MAAnCC,aAAa,mBAAG,IAAI,CAACC,cAAc;MACnCC,2BAA+C;MAA/CC,mBAAmB,mBAAG,IAAI,CAACC,oBAAoB,KACnC;IACR,SAAqC,IAAI,CAAC9D,KAAK;MAA7C3B,SAAS;MAAEqB,mBAAmB,yBAAe;IACrD,IAAMe,YAAY,GAAG,IAAI,CAACsD,aAAa;IACvC,IAAMC,SAAS,GAAG,OAAOzB,OAAO,KAAK,SAAS,GAAGA,OAAO,GAAG,CAAC,CAAC9B,YAAY;IAEzE,IAAMwD,eAAe,GAAG,CAAC,CAACjB,iBAAiB,IAAIE,IAAI,KAAK,UAAU,IAAIgB,yBAAyB,EAAE;IAEjG,IAAMC,UAAU,GAAI,IAAI,CAACtF,WAAW,GAAGrB,aAAa,CAAC2B,MAAO,EAAE;MAC5D2D,KAAK,EAAEA,KAAM;MACbtD,SAAS;MACTJ,QAAQ;MACRgF,OAAO,EAAE/F,SAAS;MAClBM,QAAQ;MACRqD,SAAS;MACTqC,QAAQ,EAAE,CAAC,CAACtF,KAAK;MACjBuF,eAAe,EAAEN,SAAS;MAC1B1B,UAAU;MACVM,SAAS;MACT2B,OAAO,EAAE,CAAC,CAAC/B,SAAS;MACpBE,UAAU;MACVD,cAAc;MACdM,gBAAgB;MAChBkB,eAAe;KAChB,CAAE;IAEH;MACE;MACA1H;QAAKiI,GAAG,EAAE,IAAI,CAAC1G,KAAK,CAAC2G,UAAU;QAAEjF,SAAS,EAAE2E,UAAU,CAACO;MAAI,GACzDnI;QAAKiD,SAAS,EAAE2E,UAAU,CAACQ;MAAO,GAC/BjB,aAAa,CAAC,IAAI,CAAC5F,KAAK,EAAE,IAAI,CAAC6F,cAAc,CAAC,EAC/CpH;QAAKiD,SAAS,EAAE2E,UAAU,CAACS;MAAU,GAClC,CAACjC,MAAM,KAAK3D,SAAS,IAAI,IAAI,CAAClB,KAAK,CAACsF,cAAc,KACjD7G;QAAKiD,SAAS,EAAE2E,UAAU,CAACxB,MAAM;QAAEtD,EAAE,EAAE,IAAI,CAACuB;MAAS,GAClDwC,cAAc,CAAC,IAAI,CAACtF,KAAK,EAAE,IAAI,CAACuF,eAAe,CAAC,CAEpD,EACArB,SAAS,GAAG,IAAI,CAAC6C,eAAe,EAAE,GAAG,IAAI,CAACC,YAAY,EAAE,EACxDtC,SAAS,IAAIjG,oBAACE,IAAI;QAAC+C,SAAS,EAAE2E,UAAU,CAACY;MAAI,GAAMvC,SAAS,EAAI,EAChEyB,eAAe;MACd;MACA1H;QAAA,cACc0G,uBAAuB;QACnCzD,SAAS,EAAE2E,UAAU,CAACa,YAAY;QAClCC,OAAO,EAAE,IAAI,CAACC,oBAAoB;QAAA,gBACpB,CAAC,CAACxF,mBAAmB;QACnCwD,IAAI,EAAC;MAAQ,GAEb3G;QAAMiD,SAAS,EAAE2E,UAAU,CAACgB;MAAU,GACpC5I,oBAACE,IAAI;QACH+C,SAAS,EAAE2E,UAAU,CAACiB,UAAU;QAChCC,QAAQ,EAAE3F,mBAAmB,GAAG9B,cAAc,GAAGD;MAAgB,EACjE,CACG,CAEV,EACA,CAACkF,MAAM,KAAK7D,SAAS,IAAI,IAAI,CAAClB,KAAK,CAACyF,cAAc,KACjDhH;QAAKiD,SAAS,EAAE2E,UAAU,CAACtB,MAAM;QAAExD,EAAE,EAAE,IAAI,CAACwB;MAAS,GAClD0C,cAAc,CAAC,IAAI,CAACzF,KAAK,EAAE,IAAI,CAAC0F,eAAe,CAAC,CAEpD,CACG,CACF,EACL,IAAI,CAAC8B,uBAAuB,IAC3B/I;QAAM8C,EAAE,EAAE,IAAI,CAACsB;MAAc,GAC1BkD,mBAAmB,CAAC,IAAI,CAAC/F,KAAK,EAAE,IAAI,CAACgG,oBAAoB,CAAC,EAC1DrD,YAAY,IACXlE;QAAKgJ,IAAI,EAAC;MAAO,GACfhJ,oBAACK,aAAa,QAAE,IAAI,CAAC4I,mBAAmB,EAAE,CAAiB,CAE9D,CAEJ;IACG;EAEV,CAAC;EAED;;;EAGOlE,6BAAK,GAAZ;IACE,IAAI,IAAI,CAACmE,YAAY,CAACC,OAAO,EAAE;MAC7B,IAAI,CAACD,YAAY,CAACC,OAAO,CAACzD,KAAK,EAAE;;EAErC,CAAC;EAED;;;EAGOX,4BAAI,GAAX;IACE,IAAI,IAAI,CAACmE,YAAY,CAACC,OAAO,EAAE;MAC7B,IAAI,CAACD,YAAY,CAACC,OAAO,CAACC,IAAI,EAAE;;EAEpC,CAAC;EAED;;;EAGOrE,8BAAM,GAAb;IACE,IAAI,IAAI,CAACmE,YAAY,CAACC,OAAO,EAAE;MAC7B,IAAI,CAACD,YAAY,CAACC,OAAO,CAACE,MAAM,EAAE;;EAEtC,CAAC;EAED;;;EAGOtE,yCAAiB,GAAxB,UAAyB9C,KAAa;IACpC,IAAI,IAAI,CAACiH,YAAY,CAACC,OAAO,EAAE;MAC7B,IAAI,CAACD,YAAY,CAACC,OAAO,CAAC9D,cAAc,GAAGpD,KAAK;;EAEpD,CAAC;EAED;;;EAGO8C,uCAAe,GAAtB,UAAuB9C,KAAa;IAClC,IAAI,IAAI,CAACiH,YAAY,CAACC,OAAO,EAAE;MAC7B,IAAI,CAACD,YAAY,CAACC,OAAO,CAAC7D,YAAY,GAAGrD,KAAK;;EAElD,CAAC;EAKD6C,sBAAWC,yCAAc;IAHzB;;;SAGA;MACE,OAAO,IAAI,CAACmE,YAAY,CAACC,OAAO,GAAG,IAAI,CAACD,YAAY,CAACC,OAAO,CAAC9D,cAAc,GAAG,CAAC,CAAC;IAClF,CAAC;;;;EAKDP,sBAAWC,uCAAY;IAHvB;;;SAGA;MACE,OAAO,IAAI,CAACmE,YAAY,CAACC,OAAO,GAAG,IAAI,CAACD,YAAY,CAACC,OAAO,CAAC7D,YAAY,GAAG,CAAC,CAAC;IAChF,CAAC;;;;EAED;;;;;EAKOP,yCAAiB,GAAxB,UAAyBY,KAAa,EAAEH,GAAW;IACjD,IAAI,IAAI,CAAC0D,YAAY,CAACC,OAAO,EAAE;MAC5B,IAAI,CAACD,YAAY,CAACC,OAA4B,CAACvD,iBAAiB,CAACD,KAAK,EAAEH,GAAG,CAAC;;EAEjF,CAAC;EAEOT,4CAAoB,GAA5B,UAA6BI,SAA2B;IACtD;IACApE,mBAAmB,CAAC;MAClBuI,WAAW,EAAE,IAAI,CAAC3G,GAAG;MACrB4G,aAAa,EAAEpI,cAAc;MAC7BI,KAAK,EAAE,IAAI,CAACA,KAAK;MACjBiI,QAAQ,EAAErE,SAAS;MACnBsE,SAAS,EAAE,OAAO;MAClBC,gBAAgB,EAAE,cAAc;MAChCC,YAAY,EAAE,UAAU;MACxBC,YAAY,EAAE;KACf,CAAC;IAEF,IAAI,IAAI,CAACrI,KAAK,CAACU,KAAK,KAAK,IAAI,IAAI,CAAC,IAAI,CAAC4H,mBAAmB,EAAE;MAC1D,IAAI,CAACA,mBAAmB,GAAG,IAAI;MAC/B/I,IAAI,CACF,+BAA6BK,cAAc,6CAA0C,GACnF,yFAAyF,CAC5F;;EAEL,CAAC;EAGD2D,sBAAYC,8BAAG;IADf;SACA;MACE,OAAO,IAAI,CAACxD,KAAK,CAACuB,EAAE,IAAI,IAAI,CAACqB,WAAW;IAC1C,CAAC;;;;EAEDW,sBAAYC,wCAAa;SAAzB;MACE,OAAOpE,YAAY,CAAC,IAAI,CAACY,KAAK,EAAE,OAAO,CAAC;IAC1C,CAAC;;;;EAkDOwD,uCAAe,GAAvB,UAAwBxD,KAAsB;IACpC,UAAM,GAAKA,KAAK,OAAV;IACd,OAAOvB;MAAM8J,KAAK,EAAE;QAAEC,aAAa,EAAE;MAAK;IAAE,GAAG3D,MAAM,CAAQ;EAC/D,CAAC;EAEOrB,uCAAe,GAAvB,UAAwBxD,KAAsB;IACpC,UAAM,GAAKA,KAAK,OAAV;IACd,OAAOvB;MAAM8J,KAAK,EAAE;QAAEC,aAAa,EAAE;MAAK;IAAE,GAAGzD,MAAM,CAAQ;EAC/D,CAAC;EAQDxB,sBAAYC,wCAAa;IANzB;;;;;;SAMA;MACU,SAA2C,IAAI,CAACxD,KAAK,aAAf;QAAtC2C,YAAY,mBAAG,IAAI,CAACT,KAAK,CAACS,YAAY;MAC9C,OAAOA,YAAY,IAAI,EAAE;IAC3B,CAAC;;;;EAED;;;;;;EAMQa,2CAAmB,GAA3B;IACE,IAAMb,YAAY,GAAG,IAAI,CAACsD,aAAa;IAEvC,OAAOtD,YAAY,GACjB,OAAOA,YAAY,KAAK,QAAQ,GAC9BlE;MAAGiD,SAAS,EAAE,IAAI,CAACX,WAAW,CAAC4B;IAAY,GACzClE;MAAA,sBAAyB;IAAe,GAAEkE,YAAY,CAAQ,CAC5D,GAEJlE;MAAKiD,SAAS,EAAE,IAAI,CAACX,WAAW,CAAC4B,YAAY;MAAA,sBAAqB;IAAe,GAC9EA,YAAY,CAEhB,GACC,IAAI;EACV,CAAC;EAMDY,sBAAYC,kDAAuB;IAJnC;;;;SAIA;MACE,IAAMxD,KAAK,GAAG,IAAI,CAACA,KAAK;MACxB,OAAO,CAAC,EAAEA,KAAK,CAAC+F,mBAAmB,IAAI/F,KAAK,CAACyB,WAAW,IAAI,IAAI,CAACwE,aAAa,CAAC;IACjF,CAAC;;;;EAEOzC,uCAAe,GAAvB;IACU,SAAmC,IAAI,CAACxD,KAAK,QAAf;MAA9ByE,OAAO,mBAAG,CAAC,CAAC,IAAI,CAACwB,aAAa;IACtC,IAAMwC,aAAa,GAAGzJ,cAAc,CAClC,IAAI,CAACgB,KAAK,EACVV,kBAAkB,EAClB,CAAC,cAAc,CAAC,CACjB;IACD,IAAMoJ,cAAc,GAAG,IAAI,CAAC1I,KAAK,CAAC,iBAAiB,CAAC,KAAK,IAAI,CAACA,KAAK,CAACiB,KAAK,GAAG,IAAI,CAACO,QAAQ,GAAGN,SAAS,CAAC;IACtG,OACEzC;MACE8C,EAAE,EAAE,IAAI,CAACH;IAAG,GACRqH,aAAa;MACjB/B,GAAG,EAAE,IAAI,CAACiB,YAAoD;MAC9DjH,KAAK,EAAE,IAAI,CAACA,KAAK,IAAI,EAAE;MACvBiI,OAAO,EAAE,IAAI,CAACC,cAAc;MAC5BxG,QAAQ,EAAE,IAAI,CAACwG,cAAc;MAC7BlH,SAAS,EAAE,IAAI,CAACX,WAAW,CAAC8H,KAAK;MAAA,mBAChBH,cAAc;MAAA,oBACb,IAAI,CAAClB,uBAAuB,GAAG,IAAI,CAAC3E,cAAc,GAAG,IAAI,CAAC7C,KAAK,CAAC,kBAAkB,CAAC;MAAA,gBACvFyE,OAAO;MAAA,cACT,IAAI,CAACzE,KAAK,CAAC8I,SAAS;MAChCC,QAAQ,EAAE,IAAI,CAAC/I,KAAK,CAAC+I,QAAQ;MAC7B1I,OAAO,EAAE,IAAI,CAAC2I,QAAQ;MACtBrI,MAAM,EAAE,IAAI,CAACsI;IAAO,GACpB;EAEN,CAAC;EAEOzF,oCAAY,GAApB;IACQ,SASF,IAAI,CAACxD,KAAK;MARZ8I,SAAS;MACTzD,eAA8B;MAA9BZ,OAAO,mBAAG,CAAC,CAAC,IAAI,CAACwB,aAAa;MAC9BX,cAAc;MACdG,cAAc;MACdZ,MAAM;MACNE,MAAM;MACNS,YAAa;MAAbJ,IAAI,mBAAG,MAAM;MACbnE,KAAK,WACO;IAEd;IACA,IAAMiI,QAAQ,GAAG,EAAE;IACnBjI,KAAK,IAAIiI,QAAQ,CAACC,IAAI,CAAC,IAAI,CAAC3H,QAAQ,CAAC;IACrC,CAACqD,MAAM,KAAK3D,SAAS,IAAIoE,cAAc,KAAK4D,QAAQ,CAACC,IAAI,CAAC,IAAI,CAACrG,SAAS,CAAC;IACzE,CAACiC,MAAM,KAAK7D,SAAS,IAAIuE,cAAc,KAAKyD,QAAQ,CAACC,IAAI,CAAC,IAAI,CAACpG,SAAS,CAAC;IAEzE,IAAMqG,UAAU;MACdhE,IAAI,EAAE,IAAI,CAAClD,KAAK,CAACN,mBAAmB,GAAG,MAAM,GAAGwD,IAAI;MACpD7D,EAAE,EAAE,IAAI,CAACH;IAAG,GACTpC,cAAc,CAAC,IAAI,CAACgB,KAAK,EAAEb,eAAe,EAAE,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;MACxE,iBAAiB,EAAE,IAAI,CAACa,KAAK,CAAC,iBAAiB,CAAC,KAAKkJ,QAAQ,CAACG,MAAM,GAAG,CAAC,GAAGH,QAAQ,CAACI,IAAI,CAAC,GAAG,CAAC,GAAGpI,SAAS,CAAC;MAC1GwF,GAAG,EAAE,IAAI,CAACiB,YAAiD;MAC3DjH,KAAK,EAAE,IAAI,CAACA,KAAK,IAAI,EAAE;MACvBiI,OAAO,EAAE,IAAI,CAACC,cAAc;MAC5BxG,QAAQ,EAAE,IAAI,CAACwG,cAAc;MAC7BlH,SAAS,EAAE,IAAI,CAACX,WAAW,CAAC8H,KAAK;MACjC,YAAY,EAAEC,SAAS;MACvB,kBAAkB,EAAE,IAAI,CAACtB,uBAAuB,GAAG,IAAI,CAAC3E,cAAc,GAAG,IAAI,CAAC7C,KAAK,CAAC,kBAAkB,CAAC;MACvG,cAAc,EAAEyE,OAAO;MACvBpE,OAAO,EAAE,IAAI,CAAC2I,QAAQ;MACtBrI,MAAM,EAAE,IAAI,CAACsI;IAAO,EACrB;IAED,IAAMM,aAAa,GAAG,UAACC,iBAA8D;MACnF,OAAO/K,0CAAW+K,iBAAiB,EAAI;IACzC,CAAC;IACD,IAAMC,aAAa,GAAG,IAAI,CAACzJ,KAAK,CAACyJ,aAAa,IAAIF,aAAa;IAC/D,OAAOE,aAAa,CAACL,UAAU,EAAEG,aAAa,CAAC;EACjD,CAAC;EAqCO/F,iCAAS,GAAjB,UAAkB9C,KAAyB;IAA3C;IACE;IACA,IAAI,IAAI,CAACgJ,oBAAoB,KAAKhJ,KAAK,IAAI6D,yBAAyB,CAAC,IAAI,CAACvE,KAAK,CAAC,EAAE;MAChF;;IAGF,IAAI,CAAC0J,oBAAoB,GAAGhJ,KAAK;IACjC,IAAMiJ,iBAAiB,GAAG,IAAI,CAAC3J,KAAK,CAAC2J,iBAAiB;IACtD,IAAMC,MAAM,GAAGD,iBAAiB,IAAIA,iBAAiB,CAACjJ,KAAK,IAAI,EAAE,CAAC;IAElE,IAAIkJ,MAAM,KAAK1I,SAAS,EAAE;MACxB,IAAI,OAAO0I,MAAM,KAAK,QAAQ,IAAI,EAAE,MAAM,IAAIA,MAAM,CAAC,EAAE;QACrD,IAAI,CAACtJ,QAAQ,CAAC;UAAEqC,YAAY,EAAEiH;QAAM,CAAE,CAAC;QACvC,IAAI,CAACC,oBAAoB,CAACnJ,KAAK,EAAEkJ,MAAM,CAAC;OACzC,MAAM;QACL,IAAME,mBAAiB,GAAW,EAAE,IAAI,CAACxG,eAAe;QAExDsG,MAAM,CAACG,IAAI,CAAC,UAACpH,YAAkC;UAC7C,IAAImH,mBAAiB,KAAK5J,KAAI,CAACoD,eAAe,EAAE;YAC9CpD,KAAI,CAACI,QAAQ,CAAC;cAAEqC,YAAY;YAAA,CAAE,CAAC;;UAEjCzC,KAAI,CAAC2J,oBAAoB,CAACnJ,KAAK,EAAEiC,YAAY,CAAC;QAChD,CAAC,CAAC;;KAEL,MAAM;MACL,IAAI,CAACkH,oBAAoB,CAACnJ,KAAK,EAAE,EAAE,CAAC;;EAExC,CAAC;EAEO8C,4CAAoB,GAA5B,UAA6B9C,KAAyB,EAAEiC,YAAkC;IACxF,IAAIjC,KAAK,KAAK,IAAI,CAACA,KAAK,IAAI,IAAI,CAACV,KAAK,CAACgK,wBAAwB,EAAE;MAC/D,IAAI,CAAChK,KAAK,CAACgK,wBAAwB,CAACrH,YAAY,EAAEjC,KAAK,CAAC;;EAE5D,CAAC;EAEO8C,0CAAkB,GAA1B;IACE,IAAI,IAAI,CAACmE,YAAY,CAACC,OAAO,IAAI,IAAI,CAAC5H,KAAK,CAACiF,gBAAgB,IAAI,IAAI,CAACjF,KAAK,CAACkE,SAAS,EAAE;MACpF,IAAM+F,SAAS,GAAG,IAAI,CAACtC,YAAY,CAACC,OAAO;MAC3CqC,SAAS,CAAC1B,KAAK,CAAC2B,MAAM,GAAG,EAAE;MAC3BD,SAAS,CAAC1B,KAAK,CAAC2B,MAAM,GAAGD,SAAS,CAACE,YAAY,GAAG,IAAI;;EAE1D,CAAC;EAnkBa3G,0BAAY,GAAoB;IAC5CsB,SAAS,EAAE,IAAI;IACfzB,sBAAsB,EAAE,GAAG;IAC3BK,cAAc,EAAE;GACjB;EAgkBH,oBAAC;CAAA,CAtkBSjF,KAAK,CAAC2L,SAAS;SADZ5G,aAAa;AAykB1B;AACA,SAASvB,SAAS,CAACjC,KAAsB,EAAEkC,KAAsB;EACvD,SAAoClC,KAAK,MAAV;IAA/BU,KAAK,mBAAGwB,KAAK,CAACI,iBAAiB;EACvC,IAAI,OAAO5B,KAAK,KAAK,QAAQ,EAAE;IAC7B;IACA,OAAOwC,MAAM,CAACxC,KAAK,CAAC;;EAEtB,OAAOA,KAAK;AACd;AAEA;;;;AAIA,SAAS6D,yBAAyB,CAACvE,KAAsB;EACvD,OAAO,EAAEA,KAAK,CAACQ,iBAAiB,IAAIR,KAAK,CAACY,kBAAkB,CAAC;AAC/D;AAEA;AACA,IAAIyJ,0BAA+C;AAEnD,SAASjE,yBAAyB;EAChC,IAAI,OAAOiE,0BAA0B,KAAK,SAAS,EAAE;IACnD,IAAMC,GAAG,GAAGrL,SAAS,EAAE;IAEvB,IAAIqL,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEC,SAAS,EAAE;MAClB;MACA,IAAMC,MAAM,GAAG,KAAK,CAACC,IAAI,CAACH,GAAG,CAACC,SAAS,CAACG,SAAS,IAAI,EAAE,CAAC;MAExDL,0BAA0B,GAAG,EAAEhL,MAAM,EAAE,IAAImL,MAAM,CAAC;KACnD,MAAM;MACLH,0BAA0B,GAAG,IAAI;;;EAGrC,OAAOA,0BAA0B;AACnC","names":["React","Label","Icon","Async","classNamesFunction","DelayedRender","getId","getNativeProps","getWindow","initializeComponentRef","inputProperties","isControlled","isIE11","textAreaProperties","warn","warnControlledUsage","warnMutuallyExclusive","getClassNames","DEFAULT_STATE_VALUE","COMPONENT_NAME","REVEAL_ICON_NAME","HIDE_ICON_NAME","__extends","props","_super","_this","createRef","ev","onFocus","setState","isFocused","validateOnFocusIn","_validate","value","onBlur","validateOnFocusOut","required","labelStyles","_classNames","subComponentStyles","label","undefined","htmlFor","_id","styles","disabled","id","_labelId","description","className","event","isRevealingPassword","prevState","element","target","previousValue","_getValue","state","_lastChangeValue","onChange","_isControlled","uncontrolledValue","_async","process","env","NODE_ENV","errorMessage","_fallbackId","_descriptionId","_prefixId","_suffixId","_warnControlledUsage","defaultValue","String","_delayedValidate","debounce","deferredValidationTime","_lastValidation","Object","TextFieldBase","_adjustInputHeight","validateOnLoad","dispose","prevProps","selection","selectionStart","selectionEnd","snapshot","end","multiline","focus","start","setSelectionRange","prevValue","_shouldValidateAllChanges","borderless","invalid","iconProps","inputClassName","underlined","prefix","resizable","suffix","theme","autoAdjustHeight","canRevealPassword","revealPasswordAriaLabel","type","_b","onRenderPrefix","_onRenderPrefix","_c","onRenderSuffix","_onRenderSuffix","_d","onRenderLabel","_onRenderLabel","_e","onRenderDescription","_onRenderDescription","_errorMessage","isInvalid","hasRevealButton","_browserNeedsRevealButton","classNames","focused","hasLabel","hasErrorMessage","hasIcon","ref","elementRef","root","wrapper","fieldGroup","_renderTextArea","_renderInput","icon","revealButton","onClick","_onRevealButtonClick","revealSpan","revealIcon","iconName","_isDescriptionAvailable","role","_renderErrorMessage","_textElement","current","blur","select","componentId","componentName","oldProps","valueProp","defaultValueProp","onChangeProp","readOnlyProp","_hasWarnedNullValue","style","paddingBottom","textAreaProps","ariaLabelledBy","onInput","_onInputChange","field","ariaLabel","readOnly","_onFocus","_onBlur","labelIds","push","inputProps","length","join","defaultRender","updatedInputProps","onRenderInput","_latestValidateValue","onGetErrorMessage","result","_notifyAfterValidate","currentValidation_1","then","onNotifyValidationResult","textField","height","scrollHeight","Component","__browserNeedsRevealButton","win","navigator","isEdge","test","userAgent"],"sources":["/Users/edward/Zhuo/NYU/FA22/design_project/project/node_modules/@fluentui/react/lib/components/src/components/TextField/TextField.base.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Label } from '../../Label';\nimport { Icon } from '../../Icon';\nimport {\n  Async,\n  classNamesFunction,\n  DelayedRender,\n  getId,\n  getNativeProps,\n  getWindow,\n  initializeComponentRef,\n  inputProperties,\n  isControlled,\n  isIE11,\n  textAreaProperties,\n  warn,\n  warnControlledUsage,\n  warnMutuallyExclusive,\n} from '../../Utilities';\nimport type { IProcessedStyleSet } from '../../Styling';\nimport type { ILabelStyleProps, ILabelStyles } from '../../Label';\nimport type { IStyleFunctionOrObject } from '../../Utilities';\nimport type { ITextField, ITextFieldProps, ITextFieldStyleProps, ITextFieldStyles } from './TextField.types';\n\nconst getClassNames = classNamesFunction<ITextFieldStyleProps, ITextFieldStyles>();\n\n/** @internal */\nexport interface ITextFieldState {\n  /** The currently displayed value if uncontrolled. */\n  uncontrolledValue: string | undefined;\n\n  /** Is true when the control has focus. */\n  isFocused?: boolean;\n\n  /**\n   * Dynamic error message returned by `onGetErrorMessage`.\n   * Use `this._errorMessage` to get the actual current error message.\n   */\n  errorMessage: string | JSX.Element;\n\n  /**\n   * Whether this field has `type='password'` and `canRevealPassword=true`, and the password is\n   * currently being revealed.\n   */\n  isRevealingPassword?: boolean;\n}\n\n/** @internal */\nexport interface ITextFieldSnapshot {\n  /**\n   * If set, the text field is changing between single- and multi-line, so we'll need to reset\n   * selection/cursor after the change completes.\n   */\n  selection?: [number | null, number | null];\n}\n\nconst DEFAULT_STATE_VALUE = '';\nconst COMPONENT_NAME = 'TextField';\n\nconst REVEAL_ICON_NAME = 'RedEye';\nconst HIDE_ICON_NAME = 'Hide';\n\nexport class TextFieldBase\n  extends React.Component<ITextFieldProps, ITextFieldState, ITextFieldSnapshot>\n  implements ITextField {\n  public static defaultProps: ITextFieldProps = {\n    resizable: true,\n    deferredValidationTime: 200,\n    validateOnLoad: true,\n  };\n\n  /** Fallback ID if none is provided in props. Access proper value via `this._id`. */\n  private _fallbackId: string;\n  private _descriptionId: string;\n  private _labelId: string;\n  private _prefixId: string;\n  private _suffixId: string;\n  private _delayedValidate: (value: string | undefined) => void;\n  private _lastValidation: number;\n  private _latestValidateValue: string | undefined;\n  private _hasWarnedNullValue: boolean | undefined;\n  private _textElement = React.createRef<HTMLTextAreaElement | HTMLInputElement>();\n  private _classNames: IProcessedStyleSet<ITextFieldStyles>;\n  private _async: Async;\n  /** Most recent value from a change or input event, to help avoid processing events twice */\n  private _lastChangeValue: string | undefined;\n\n  public constructor(props: ITextFieldProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnMutuallyExclusive(COMPONENT_NAME, props, {\n        errorMessage: 'onGetErrorMessage',\n      });\n    }\n\n    this._fallbackId = getId(COMPONENT_NAME);\n    this._descriptionId = getId(COMPONENT_NAME + 'Description');\n    this._labelId = getId(COMPONENT_NAME + 'Label');\n    this._prefixId = getId(COMPONENT_NAME + 'Prefix');\n    this._suffixId = getId(COMPONENT_NAME + 'Suffix');\n\n    this._warnControlledUsage();\n\n    let { defaultValue = DEFAULT_STATE_VALUE } = props;\n    if (typeof defaultValue === 'number') {\n      // This isn't allowed per the props, but happens anyway.\n      defaultValue = String(defaultValue);\n    }\n    this.state = {\n      uncontrolledValue: this._isControlled ? undefined : defaultValue,\n      isFocused: false,\n      errorMessage: '',\n    };\n\n    this._delayedValidate = this._async.debounce(this._validate, this.props.deferredValidationTime);\n    this._lastValidation = 0;\n  }\n\n  /**\n   * Gets the current value of the text field.\n   */\n  public get value(): string | undefined {\n    return _getValue(this.props, this.state);\n  }\n\n  public componentDidMount(): void {\n    this._adjustInputHeight();\n\n    if (this.props.validateOnLoad) {\n      this._validate(this.value);\n    }\n  }\n\n  public componentWillUnmount() {\n    this._async.dispose();\n  }\n\n  public getSnapshotBeforeUpdate(prevProps: ITextFieldProps, prevState: ITextFieldState): ITextFieldSnapshot | null {\n    return {\n      selection: [this.selectionStart, this.selectionEnd],\n    };\n  }\n\n  public componentDidUpdate(\n    prevProps: ITextFieldProps,\n    prevState: ITextFieldState,\n    snapshot: ITextFieldSnapshot,\n  ): void {\n    const props = this.props;\n    const { selection = [null, null] } = snapshot || {};\n    const [start, end] = selection;\n\n    if (!!prevProps.multiline !== !!props.multiline && prevState.isFocused) {\n      // The text field has just changed between single- and multi-line, so we need to reset focus\n      // and selection/cursor.\n      this.focus();\n      if (start !== null && end !== null && start >= 0 && end >= 0) {\n        this.setSelectionRange(start, end);\n      }\n    }\n\n    if (prevProps.value !== props.value) {\n      // Only if the value in props changed, reset the record of the last value seen by a\n      // change/input event (don't do this if the value in state changed, since at least in tests\n      // the state update may happen before the second event in a series)\n      this._lastChangeValue = undefined;\n    }\n\n    const prevValue = _getValue(prevProps, prevState);\n    const value = this.value;\n    if (prevValue !== value) {\n      // Handle controlled/uncontrolled warnings and status\n      this._warnControlledUsage(prevProps);\n\n      // Clear error message if needed\n      // TODO: is there any way to do this without an extra render?\n      if (this.state.errorMessage && !props.errorMessage) {\n        this.setState({ errorMessage: '' });\n      }\n\n      // Adjust height if needed based on new value\n      this._adjustInputHeight();\n\n      // TODO: #5875 added logic to trigger validation in componentWillReceiveProps and other places.\n      // This seems a bit odd and hard to integrate with the new approach.\n      // (Starting to think we should just put the validation logic in a separate wrapper component...?)\n      if (_shouldValidateAllChanges(props)) {\n        this._delayedValidate(value);\n      }\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      borderless,\n      className,\n      disabled,\n      invalid,\n      iconProps,\n      inputClassName,\n      label,\n      multiline,\n      required,\n      underlined,\n      prefix,\n      resizable,\n      suffix,\n      theme,\n      styles,\n      autoAdjustHeight,\n      canRevealPassword,\n      revealPasswordAriaLabel,\n      type,\n      onRenderPrefix = this._onRenderPrefix,\n      onRenderSuffix = this._onRenderSuffix,\n      onRenderLabel = this._onRenderLabel,\n      onRenderDescription = this._onRenderDescription,\n    } = this.props;\n    const { isFocused, isRevealingPassword } = this.state;\n    const errorMessage = this._errorMessage;\n    const isInvalid = typeof invalid === 'boolean' ? invalid : !!errorMessage;\n\n    const hasRevealButton = !!canRevealPassword && type === 'password' && _browserNeedsRevealButton();\n\n    const classNames = (this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n      disabled,\n      focused: isFocused,\n      required,\n      multiline,\n      hasLabel: !!label,\n      hasErrorMessage: isInvalid,\n      borderless,\n      resizable,\n      hasIcon: !!iconProps,\n      underlined,\n      inputClassName,\n      autoAdjustHeight,\n      hasRevealButton,\n    }));\n\n    return (\n      // eslint-disable-next-line deprecation/deprecation\n      <div ref={this.props.elementRef} className={classNames.root}>\n        <div className={classNames.wrapper}>\n          {onRenderLabel(this.props, this._onRenderLabel)}\n          <div className={classNames.fieldGroup}>\n            {(prefix !== undefined || this.props.onRenderPrefix) && (\n              <div className={classNames.prefix} id={this._prefixId}>\n                {onRenderPrefix(this.props, this._onRenderPrefix)}\n              </div>\n            )}\n            {multiline ? this._renderTextArea() : this._renderInput()}\n            {iconProps && <Icon className={classNames.icon} {...iconProps} />}\n            {hasRevealButton && (\n              // Explicitly set type=\"button\" since the default button type within a form is \"submit\"\n              <button\n                aria-label={revealPasswordAriaLabel}\n                className={classNames.revealButton}\n                onClick={this._onRevealButtonClick}\n                aria-pressed={!!isRevealingPassword}\n                type=\"button\"\n              >\n                <span className={classNames.revealSpan}>\n                  <Icon\n                    className={classNames.revealIcon}\n                    iconName={isRevealingPassword ? HIDE_ICON_NAME : REVEAL_ICON_NAME}\n                  />\n                </span>\n              </button>\n            )}\n            {(suffix !== undefined || this.props.onRenderSuffix) && (\n              <div className={classNames.suffix} id={this._suffixId}>\n                {onRenderSuffix(this.props, this._onRenderSuffix)}\n              </div>\n            )}\n          </div>\n        </div>\n        {this._isDescriptionAvailable && (\n          <span id={this._descriptionId}>\n            {onRenderDescription(this.props, this._onRenderDescription)}\n            {errorMessage && (\n              <div role=\"alert\">\n                <DelayedRender>{this._renderErrorMessage()}</DelayedRender>\n              </div>\n            )}\n          </span>\n        )}\n      </div>\n    );\n  }\n\n  /**\n   * Sets focus on the text field\n   */\n  public focus() {\n    if (this._textElement.current) {\n      this._textElement.current.focus();\n    }\n  }\n\n  /**\n   * Blurs the text field.\n   */\n  public blur() {\n    if (this._textElement.current) {\n      this._textElement.current.blur();\n    }\n  }\n\n  /**\n   * Selects the text field\n   */\n  public select() {\n    if (this._textElement.current) {\n      this._textElement.current.select();\n    }\n  }\n\n  /**\n   * Sets the selection start of the text field to a specified value\n   */\n  public setSelectionStart(value: number): void {\n    if (this._textElement.current) {\n      this._textElement.current.selectionStart = value;\n    }\n  }\n\n  /**\n   * Sets the selection end of the text field to a specified value\n   */\n  public setSelectionEnd(value: number): void {\n    if (this._textElement.current) {\n      this._textElement.current.selectionEnd = value;\n    }\n  }\n\n  /**\n   * Gets the selection start of the text field\n   */\n  public get selectionStart(): number | null {\n    return this._textElement.current ? this._textElement.current.selectionStart : -1;\n  }\n\n  /**\n   * Gets the selection end of the text field\n   */\n  public get selectionEnd(): number | null {\n    return this._textElement.current ? this._textElement.current.selectionEnd : -1;\n  }\n\n  /**\n   * Sets the start and end positions of a selection in a text field.\n   * @param start - Index of the start of the selection.\n   * @param end - Index of the end of the selection.\n   */\n  public setSelectionRange(start: number, end: number): void {\n    if (this._textElement.current) {\n      (this._textElement.current as HTMLInputElement).setSelectionRange(start, end);\n    }\n  }\n\n  private _warnControlledUsage(prevProps?: ITextFieldProps): void {\n    // Show warnings if props are being used in an invalid way\n    warnControlledUsage({\n      componentId: this._id,\n      componentName: COMPONENT_NAME,\n      props: this.props,\n      oldProps: prevProps,\n      valueProp: 'value',\n      defaultValueProp: 'defaultValue',\n      onChangeProp: 'onChange',\n      readOnlyProp: 'readOnly',\n    });\n\n    if (this.props.value === null && !this._hasWarnedNullValue) {\n      this._hasWarnedNullValue = true;\n      warn(\n        `Warning: 'value' prop on '${COMPONENT_NAME}' should not be null. Consider using an ` +\n          'empty string to clear the component or undefined to indicate an uncontrolled component.',\n      );\n    }\n  }\n\n  /** Returns `props.id` if available, or a fallback if not. */\n  private get _id(): string {\n    return this.props.id || this._fallbackId;\n  }\n\n  private get _isControlled(): boolean {\n    return isControlled(this.props, 'value');\n  }\n\n  private _onFocus = (ev: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    if (this.props.onFocus) {\n      this.props.onFocus(ev);\n    }\n\n    this.setState({ isFocused: true }, () => {\n      if (this.props.validateOnFocusIn) {\n        this._validate(this.value);\n      }\n    });\n  };\n\n  private _onBlur = (ev: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    if (this.props.onBlur) {\n      this.props.onBlur(ev);\n    }\n\n    this.setState({ isFocused: false }, () => {\n      if (this.props.validateOnFocusOut) {\n        this._validate(this.value);\n      }\n    });\n  };\n\n  private _onRenderLabel = (props: ITextFieldProps): JSX.Element | null => {\n    const { label, required } = props;\n    // IProcessedStyleSet definition requires casting for what Label expects as its styles prop\n    const labelStyles = this._classNames.subComponentStyles\n      ? (this._classNames.subComponentStyles.label as IStyleFunctionOrObject<ILabelStyleProps, ILabelStyles>)\n      : undefined;\n\n    if (label) {\n      return (\n        <Label required={required} htmlFor={this._id} styles={labelStyles} disabled={props.disabled} id={this._labelId}>\n          {props.label}\n        </Label>\n      );\n    }\n    return null;\n  };\n\n  private _onRenderDescription = (props: ITextFieldProps): JSX.Element | null => {\n    if (props.description) {\n      return <span className={this._classNames.description}>{props.description}</span>;\n    }\n    return null;\n  };\n\n  private _onRenderPrefix(props: ITextFieldProps): JSX.Element {\n    const { prefix } = props;\n    return <span style={{ paddingBottom: '1px' }}>{prefix}</span>;\n  }\n\n  private _onRenderSuffix(props: ITextFieldProps): JSX.Element {\n    const { suffix } = props;\n    return <span style={{ paddingBottom: '1px' }}>{suffix}</span>;\n  }\n\n  /**\n   * Current error message from either `props.errorMessage` or the result of `props.onGetErrorMessage`.\n   *\n   * - If there is no validation error or we have not validated the input value, errorMessage is an empty string.\n   * - If we have done the validation and there is validation error, errorMessage is the validation error message.\n   */\n  private get _errorMessage(): string | JSX.Element {\n    const { errorMessage = this.state.errorMessage } = this.props;\n    return errorMessage || '';\n  }\n\n  /**\n   * Renders error message based on the type of the message.\n   *\n   * - If error message is string, it will render using the built in styles.\n   * - If error message is an element, user has full control over how it's rendered.\n   */\n  private _renderErrorMessage(): JSX.Element | null {\n    const errorMessage = this._errorMessage;\n\n    return errorMessage ? (\n      typeof errorMessage === 'string' ? (\n        <p className={this._classNames.errorMessage}>\n          <span data-automation-id=\"error-message\">{errorMessage}</span>\n        </p>\n      ) : (\n        <div className={this._classNames.errorMessage} data-automation-id=\"error-message\">\n          {errorMessage}\n        </div>\n      )\n    ) : null;\n  }\n\n  /**\n   * If a custom description render function is supplied then treat description as always available.\n   * Otherwise defer to the presence of description or error message text.\n   */\n  private get _isDescriptionAvailable(): boolean {\n    const props = this.props;\n    return !!(props.onRenderDescription || props.description || this._errorMessage);\n  }\n\n  private _renderTextArea(): React.ReactElement<React.HTMLAttributes<HTMLAreaElement>> {\n    const { invalid = !!this._errorMessage } = this.props;\n    const textAreaProps = getNativeProps<React.TextareaHTMLAttributes<HTMLTextAreaElement>>(\n      this.props,\n      textAreaProperties,\n      ['defaultValue'],\n    );\n    const ariaLabelledBy = this.props['aria-labelledby'] || (this.props.label ? this._labelId : undefined);\n    return (\n      <textarea\n        id={this._id}\n        {...textAreaProps}\n        ref={this._textElement as React.RefObject<HTMLTextAreaElement>}\n        value={this.value || ''}\n        onInput={this._onInputChange}\n        onChange={this._onInputChange}\n        className={this._classNames.field}\n        aria-labelledby={ariaLabelledBy}\n        aria-describedby={this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby']}\n        aria-invalid={invalid}\n        aria-label={this.props.ariaLabel}\n        readOnly={this.props.readOnly}\n        onFocus={this._onFocus}\n        onBlur={this._onBlur}\n      />\n    );\n  }\n\n  private _renderInput(): JSX.Element | null {\n    const {\n      ariaLabel,\n      invalid = !!this._errorMessage,\n      onRenderPrefix,\n      onRenderSuffix,\n      prefix,\n      suffix,\n      type = 'text',\n      label,\n    } = this.props;\n\n    // build aria-labelledby list from label, prefix, and suffix\n    const labelIds = [];\n    label && labelIds.push(this._labelId);\n    (prefix !== undefined || onRenderPrefix) && labelIds.push(this._prefixId);\n    (suffix !== undefined || onRenderSuffix) && labelIds.push(this._suffixId);\n\n    const inputProps: React.InputHTMLAttributes<HTMLInputElement> & React.RefAttributes<HTMLInputElement> = {\n      type: this.state.isRevealingPassword ? 'text' : type,\n      id: this._id,\n      ...getNativeProps(this.props, inputProperties, ['defaultValue', 'type']),\n      'aria-labelledby': this.props['aria-labelledby'] || (labelIds.length > 0 ? labelIds.join(' ') : undefined),\n      ref: this._textElement as React.RefObject<HTMLInputElement>,\n      value: this.value || '',\n      onInput: this._onInputChange,\n      onChange: this._onInputChange,\n      className: this._classNames.field,\n      'aria-label': ariaLabel,\n      'aria-describedby': this._isDescriptionAvailable ? this._descriptionId : this.props['aria-describedby'],\n      'aria-invalid': invalid,\n      onFocus: this._onFocus,\n      onBlur: this._onBlur,\n    };\n\n    const defaultRender = (updatedInputProps: React.InputHTMLAttributes<HTMLInputElement>) => {\n      return <input {...updatedInputProps} />;\n    };\n    const onRenderInput = this.props.onRenderInput || defaultRender;\n    return onRenderInput(inputProps, defaultRender);\n  }\n\n  private _onRevealButtonClick = (event: React.MouseEvent<HTMLButtonElement>): void => {\n    this.setState(prevState => ({ isRevealingPassword: !prevState.isRevealingPassword }));\n  };\n\n  private _onInputChange = (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n    // Previously, we needed to call both onInput and onChange due to some weird IE/React issues,\n    // which have *probably* been fixed now:\n    // - https://github.com/microsoft/fluentui/issues/744 (likely fixed)\n    // - https://github.com/microsoft/fluentui/issues/824 (confirmed fixed)\n\n    // TODO (Fabric 8?) - Switch to calling only onChange. This switch is pretty disruptive for\n    // tests (ours and maybe consumers' too), so it seemed best to do the switch in a major bump.\n\n    const element = event.target as HTMLInputElement;\n    const value = element.value;\n    // Ignore this event if any of the following are true:\n    // - the value is undefined (in case one of the IE bugs comes back)\n    // - it's a duplicate event (important since onInputChange is called twice per actual user event)\n    // - it's the same as the previous value\n    const previousValue = _getValue(this.props, this.state) || '';\n    if (value === undefined || value === this._lastChangeValue || value === previousValue) {\n      this._lastChangeValue = undefined;\n      return;\n    }\n    this._lastChangeValue = value;\n\n    this.props.onChange?.(event, value);\n\n    if (!this._isControlled) {\n      // ONLY if this is an uncontrolled component, update the displayed value.\n      // (Controlled components must update the `value` prop from `onChange`.)\n      this.setState({ uncontrolledValue: value });\n    }\n  };\n\n  private _validate(value: string | undefined): void {\n    // In case _validate is called again while validation promise is executing\n    if (this._latestValidateValue === value && _shouldValidateAllChanges(this.props)) {\n      return;\n    }\n\n    this._latestValidateValue = value;\n    const onGetErrorMessage = this.props.onGetErrorMessage;\n    const result = onGetErrorMessage && onGetErrorMessage(value || '');\n\n    if (result !== undefined) {\n      if (typeof result === 'string' || !('then' in result)) {\n        this.setState({ errorMessage: result });\n        this._notifyAfterValidate(value, result);\n      } else {\n        const currentValidation: number = ++this._lastValidation;\n\n        result.then((errorMessage: string | JSX.Element) => {\n          if (currentValidation === this._lastValidation) {\n            this.setState({ errorMessage });\n          }\n          this._notifyAfterValidate(value, errorMessage);\n        });\n      }\n    } else {\n      this._notifyAfterValidate(value, '');\n    }\n  }\n\n  private _notifyAfterValidate(value: string | undefined, errorMessage: string | JSX.Element): void {\n    if (value === this.value && this.props.onNotifyValidationResult) {\n      this.props.onNotifyValidationResult(errorMessage, value);\n    }\n  }\n\n  private _adjustInputHeight(): void {\n    if (this._textElement.current && this.props.autoAdjustHeight && this.props.multiline) {\n      const textField = this._textElement.current;\n      textField.style.height = '';\n      textField.style.height = textField.scrollHeight + 'px';\n    }\n  }\n}\n\n/** Get the value from the given state and props (converting from number to string if needed) */\nfunction _getValue(props: ITextFieldProps, state: ITextFieldState): string | undefined {\n  const { value = state.uncontrolledValue } = props;\n  if (typeof value === 'number') {\n    // not allowed per typings, but happens anyway\n    return String(value);\n  }\n  return value;\n}\n\n/**\n * If `validateOnFocusIn` or `validateOnFocusOut` is true, validation should run **only** on that event.\n * Otherwise, validation should run on every change.\n */\nfunction _shouldValidateAllChanges(props: ITextFieldProps): boolean {\n  return !(props.validateOnFocusIn || props.validateOnFocusOut);\n}\n\n// Only calculate this once across all TextFields, since will stay the same\nlet __browserNeedsRevealButton: boolean | undefined;\n\nfunction _browserNeedsRevealButton() {\n  if (typeof __browserNeedsRevealButton !== 'boolean') {\n    const win = getWindow();\n\n    if (win?.navigator) {\n      // Edge, Chromium Edge\n      const isEdge = /Edg/.test(win.navigator.userAgent || '');\n\n      __browserNeedsRevealButton = !(isIE11() || isEdge);\n    } else {\n      __browserNeedsRevealButton = true;\n    }\n  }\n  return __browserNeedsRevealButton;\n}\n"]},"metadata":{},"sourceType":"module"}