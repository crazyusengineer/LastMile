{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { createMemoizer } from '../memoize';\nfunction createComposedComponent(outer) {\n  var Outer = outer;\n  var outerMemoizer = createMemoizer(function (inner) {\n    if (outer === inner) {\n      throw new Error('Attempted to compose a component with itself.');\n    }\n    var Inner = inner;\n    var innerMemoizer = createMemoizer(function (defaultRender) {\n      var InnerWithDefaultRender = function (innerProps) {\n        return React.createElement(Inner, __assign({}, innerProps, {\n          defaultRender: defaultRender\n        }));\n      };\n      return InnerWithDefaultRender;\n    });\n    var OuterWithDefaultRender = function (outerProps) {\n      var defaultRender = outerProps.defaultRender;\n      return React.createElement(Outer, __assign({}, outerProps, {\n        defaultRender: defaultRender ? innerMemoizer(defaultRender) : Inner\n      }));\n    };\n    return OuterWithDefaultRender;\n  });\n  return outerMemoizer;\n}\nvar componentAsMemoizer = createMemoizer(createComposedComponent);\n/**\n * Composes two components which conform to the `IComponentAs` specification; that is, two\n * components which accept a `defaultRender` prop, which is a 'default' implementation of\n * a component which accepts the same overall props.\n *\n * @public\n */\nexport function composeComponentAs(outer, inner) {\n  return componentAsMemoizer(outer)(inner);\n}","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,cAAc,QAAQ,YAAY;AAO3C,SAASC,uBAAuB,CAC9BC,KAA2B;EAE3B,IAAMC,KAAK,GAAGD,KAAK;EAEnB,IAAME,aAAa,GAAGJ,cAAc,CAAC,UAACK,KAA2B;IAC/D,IAAIH,KAAK,KAAKG,KAAK,EAAE;MACnB,MAAM,IAAIC,KAAK,CAAC,+CAA+C,CAAC;;IAGlE,IAAMC,KAAK,GAAGF,KAAK;IAEnB,IAAMG,aAAa,GAAGR,cAAc,CAAC,UAACS,aAAmC;MACvE,IAAMC,sBAAsB,GAAmD,UAC7EC,UAAqC;QAErC,OAAOZ,oBAACQ,KAAK,eAAKI,UAAU;UAAEF,aAAa,EAAEA;QAAa,GAAI;MAChE,CAAC;MAED,OAAOC,sBAAsB;IAC/B,CAAC,CAAC;IAEF,IAAME,sBAAsB,GAAmD,UAC7EC,UAAqC;MAE7B,iBAAa,GAAKA,UAAU,cAAf;MAErB,OAAOd,oBAACI,KAAK,eAAKU,UAAU;QAAEJ,aAAa,EAAEA,aAAa,GAAGD,aAAa,CAACC,aAAa,CAAC,GAAGF;MAAK,GAAI;IACvG,CAAC;IAED,OAAOK,sBAAsB;EAC/B,CAAC,CAAC;EAEF,OAAOR,aAAa;AACtB;AAEA,IAAMU,mBAAmB,GAAGd,cAAc,CAAsBC,uBAAuB,CAAC;AAExF;;;;;;;AAOA,OAAM,SAAUc,kBAAkB,CAChCb,KAA2B,EAC3BG,KAA2B;EAE3B,OAAOS,mBAAmB,CAACZ,KAAK,CAAC,CAACG,KAAK,CAAC;AAC1C","names":["React","createMemoizer","createComposedComponent","outer","Outer","outerMemoizer","inner","Error","Inner","innerMemoizer","defaultRender","InnerWithDefaultRender","innerProps","OuterWithDefaultRender","outerProps","componentAsMemoizer","composeComponentAs"],"sources":["/Users/edward/Zhuo/NYU/FA22/design_project/project/node_modules/@fluentui/style-utilities/node_modules/@fluentui/utilities/lib/src/componentAs/composeComponentAs.tsx"],"sourcesContent":["import * as React from 'react';\nimport { createMemoizer } from '../memoize';\nimport type { IComponentAs, IComponentAsProps } from '../IComponentAs';\n\ninterface IComposeComponentAs {\n  <TProps>(outer: IComponentAs<TProps>): (inner: IComponentAs<TProps>) => IComponentAs<TProps>;\n}\n\nfunction createComposedComponent<TProps>(\n  outer: IComponentAs<TProps>,\n): (inner: IComponentAs<TProps>) => IComponentAs<TProps> {\n  const Outer = outer;\n\n  const outerMemoizer = createMemoizer((inner: IComponentAs<TProps>) => {\n    if (outer === inner) {\n      throw new Error('Attempted to compose a component with itself.');\n    }\n\n    const Inner = inner;\n\n    const innerMemoizer = createMemoizer((defaultRender: IComponentAs<TProps>) => {\n      const InnerWithDefaultRender: React.ComponentType<IComponentAsProps<TProps>> = (\n        innerProps: IComponentAsProps<TProps>,\n      ): JSX.Element => {\n        return <Inner {...innerProps} defaultRender={defaultRender} />;\n      };\n\n      return InnerWithDefaultRender;\n    });\n\n    const OuterWithDefaultRender: React.ComponentType<IComponentAsProps<TProps>> = (\n      outerProps: IComponentAsProps<TProps>,\n    ): JSX.Element => {\n      const { defaultRender } = outerProps;\n\n      return <Outer {...outerProps} defaultRender={defaultRender ? innerMemoizer(defaultRender) : Inner} />;\n    };\n\n    return OuterWithDefaultRender;\n  });\n\n  return outerMemoizer;\n}\n\nconst componentAsMemoizer = createMemoizer<IComposeComponentAs>(createComposedComponent);\n\n/**\n * Composes two components which conform to the `IComponentAs` specification; that is, two\n * components which accept a `defaultRender` prop, which is a 'default' implementation of\n * a component which accepts the same overall props.\n *\n * @public\n */\nexport function composeComponentAs<TProps>(\n  outer: IComponentAs<TProps>,\n  inner: IComponentAs<TProps>,\n): IComponentAs<TProps> {\n  return componentAsMemoizer(outer)(inner);\n}\n"]},"metadata":{},"sourceType":"module"}