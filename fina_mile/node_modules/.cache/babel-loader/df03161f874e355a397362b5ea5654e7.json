{"ast":null,"code":"/**\n * asAsync - a HOC for async loading components.\n *\n * Usage:\n *\n * const AsyncDialog = asAsync({\n *   load: () => import('Dialog').then(result => result.default),\n * });\n *\n * React.render(domElement, <AsyncDialog asyncPlaceholder={ () => <Spinner/> } { ...dialogProps } />);\n *\n * Note the `asyncPlaceholder` prop will be respected when rendering the async component and it hasn't\n * been loaded yet.\n */\nimport { __assign, __extends, __rest } from \"tslib\";\nimport * as React from 'react';\n/**\n * If possible, use a WeakMap to maintain a cache of loaded components.\n * This can be used to synchronously render components that have already been loaded,\n * rather than having to wait for at least one async tick.\n */\nvar _syncModuleCache = typeof WeakMap !== 'undefined' ?\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nnew WeakMap() : undefined;\n/**\n * Produces a component which internally loads the target component before first mount.\n * The component passes all props through to the loaded component.\n *\n * This overload accepts a module with a default export for the component.\n */\nexport function asAsync(options) {\n  var Async = /** @class */function (_super) {\n    __extends(Async, _super);\n    function Async() {\n      var _this = _super !== null && _super.apply(this, arguments) || this;\n      _this.state = {\n        Component: _syncModuleCache ? _syncModuleCache.get(options.load) : undefined\n      };\n      return _this;\n    }\n    Async.prototype.render = function () {\n      // Typescript issue: the rest can't be pulled without the any cast, as TypeScript fails with rest on generics.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      var _a = this.props,\n        forwardedRef = _a.forwardedRef,\n        Placeholder = _a.asyncPlaceholder,\n        rest = __rest(_a, [\"forwardedRef\", \"asyncPlaceholder\"]);\n      var Component = this.state.Component;\n      return Component ? React.createElement(Component, __assign(__assign({}, rest), {\n        ref: forwardedRef\n      })) : Placeholder ? React.createElement(Placeholder, null) : null;\n    };\n    Async.prototype.componentDidMount = function () {\n      var _this = this;\n      var Component = this.state.Component;\n      if (!Component) {\n        options.load().then(function (LoadedComponent) {\n          if (LoadedComponent) {\n            // Cache component for future reference.\n            _syncModuleCache && _syncModuleCache.set(options.load, LoadedComponent);\n            // Set state.\n            _this.setState({\n              Component: LoadedComponent\n            }, options.onLoad);\n          }\n        }).catch(options.onError);\n      }\n    };\n    return Async;\n  }(React.Component);\n  return React.forwardRef(function (props, ref) {\n    return React.createElement(Async, __assign({}, props, {\n      forwardedRef: ref\n    }));\n  });\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;AAeA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAmB9B;;;;;AAKA,IAAMC,gBAAgB,GACpB,OAAOC,OAAO,KAAK,WAAW;AAC1B;AACA,IAAIA,OAAO,EAA6E,GACxFC,SAAS;AAEf;;;;;;AAMA,OAAM,SAAUC,OAAO,CAASC,OAAgC;EAC9D;IAAoBC;IAApB;MAAA;MAOSC,WAAK,GAAG;QACbC,SAAS,EAAEP,gBAAgB,GAAIA,gBAAgB,CAACQ,GAAG,CAACJ,OAAO,CAACK,IAAI,CAA+B,GAAGP;OACnG;;IAqCH;IAnCSQ,sBAAM,GAAb;MACE;MACA;MACA,IAAMC,KAA2D,IAAI,CAACC,KAAY;QAA1EC,YAAY;QAAoBC,WAAW;QAAKC,IAAI,cAAtD,oCAAwD,CAAoB;MAC1E,aAAS,GAAK,IAAI,CAACC,KAAK,UAAf;MACjB,OAAOT,SAAS,GACdR,KAAK,CAACkB,aAAa,CAACV,SAAS,wBAAOQ,IAAI;QAAEG,GAAG,EAAEL;MAAY,GAAG,GAC5DC,WAAW,GACbf,oBAACe,WAAW,OAAG,GACb,IAAI;IACV,CAAC;IAEMJ,iCAAiB,GAAxB;MAAA;MACQ,aAAS,GAAK,IAAI,CAACM,KAAK,UAAf;MAEf,IAAI,CAACT,SAAS,EAAE;QACdH,OAAO,CACJK,IAAI,EAAE,CACNU,IAAI,CAAC,UAACC,eAA0C;UAC/C,IAAIA,eAAe,EAAE;YACnB;YACApB,gBAAgB,IAAIA,gBAAgB,CAACqB,GAAG,CAACjB,OAAO,CAACK,IAAI,EAAEW,eAAe,CAAC;YAEvE;YACAd,KAAI,CAACgB,QAAQ,CACX;cACEf,SAAS,EAAEa;aACZ,EACDhB,OAAO,CAACmB,MAAM,CACf;;QAEL,CAAC,CAAC,CACDC,KAAK,CAACpB,OAAO,CAACqB,OAAO,CAAC;;IAE7B,CAAC;IACH,YAAC;EAAD,CAAC,CA9CmB1B,KAAK,CAACQ,SAAS;EAgDnC,OAAOR,KAAK,CAAC2B,UAAU,CACrB,UAACd,KAAK,EAAEM,GAAG;IAAK,2BAACR,KAAK,eAAKE,KAAK;MAAEC,YAAY,EAAEK;IAAG,GAAI;EAAvC,CAAuC,CACxD;AACH","names":["React","_syncModuleCache","WeakMap","undefined","asAsync","options","__extends","_this","Component","get","load","Async","_a","props","forwardedRef","Placeholder","rest","state","createElement","ref","then","LoadedComponent","set","setState","onLoad","catch","onError","forwardRef"],"sources":["/Users/edward/Zhuo/NYU/FA22/design_project/project/node_modules/@fluentui/react/node_modules/@fluentui/utilities/src/asAsync.tsx"],"sourcesContent":["/**\n * asAsync - a HOC for async loading components.\n *\n * Usage:\n *\n * const AsyncDialog = asAsync({\n *   load: () => import('Dialog').then(result => result.default),\n * });\n *\n * React.render(domElement, <AsyncDialog asyncPlaceholder={ () => <Spinner/> } { ...dialogProps } />);\n *\n * Note the `asyncPlaceholder` prop will be respected when rendering the async component and it hasn't\n * been loaded yet.\n */\n\nimport * as React from 'react';\n\nexport interface IAsAsyncOptions<TProps> {\n  /**\n   * Callback which returns a promise resolving an object which exports the component.\n   */\n  load: () => Promise<React.ElementType<TProps>>;\n\n  /**\n   * Callback executed when async loading is complete.\n   */\n  onLoad?: () => void;\n\n  /**\n   * Callback when async loading fails.\n   */\n  onError?: (error: Error) => void;\n}\n\n/**\n * If possible, use a WeakMap to maintain a cache of loaded components.\n * This can be used to synchronously render components that have already been loaded,\n * rather than having to wait for at least one async tick.\n */\nconst _syncModuleCache =\n  typeof WeakMap !== 'undefined'\n    ? // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      new WeakMap<() => Promise<React.ElementType<any>>, React.ElementType<any> | undefined>()\n    : undefined;\n\n/**\n * Produces a component which internally loads the target component before first mount.\n * The component passes all props through to the loaded component.\n *\n * This overload accepts a module with a default export for the component.\n */\nexport function asAsync<TProps>(options: IAsAsyncOptions<TProps>) {\n  class Async extends React.Component<\n    TProps & {\n      asyncPlaceholder?: React.ElementType;\n      forwardedRef: React.Ref<React.ElementType<TProps>>;\n    },\n    { Component?: React.ElementType<TProps> }\n  > {\n    public state = {\n      Component: _syncModuleCache ? (_syncModuleCache.get(options.load) as React.ElementType<TProps>) : undefined,\n    };\n\n    public render(): JSX.Element | null {\n      // Typescript issue: the rest can't be pulled without the any cast, as TypeScript fails with rest on generics.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const { forwardedRef, asyncPlaceholder: Placeholder, ...rest } = this.props as any;\n      const { Component } = this.state;\n      return Component ? (\n        React.createElement(Component, { ...rest, ref: forwardedRef })\n      ) : Placeholder ? (\n        <Placeholder />\n      ) : null;\n    }\n\n    public componentDidMount(): void {\n      let { Component } = this.state;\n\n      if (!Component) {\n        options\n          .load()\n          .then((LoadedComponent: React.ElementType<TProps>) => {\n            if (LoadedComponent) {\n              // Cache component for future reference.\n              _syncModuleCache && _syncModuleCache.set(options.load, LoadedComponent);\n\n              // Set state.\n              this.setState(\n                {\n                  Component: LoadedComponent,\n                },\n                options.onLoad,\n              );\n            }\n          })\n          .catch(options.onError);\n      }\n    }\n  }\n\n  return React.forwardRef<React.ElementType<TProps>, TProps & { asyncPlaceholder?: React.ElementType }>(\n    (props, ref) => <Async {...props} forwardedRef={ref} />,\n  );\n}\n"]},"metadata":{},"sourceType":"module"}