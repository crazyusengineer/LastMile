{"ast":null,"code":"import { __assign, __spreadArray } from \"tslib\";\nimport * as React from 'react';\nimport { mergeCss } from '@fluentui/merge-styles';\nimport { getRTL, memoizeFunction } from '@fluentui/utilities';\nimport { assign } from './utilities';\n/**\n * This function is required for any module that uses slots.\n *\n * This function is a slot resolver that automatically evaluates slot functions to generate React elements.\n * A byproduct of this resolver is that it removes slots from the React hierarchy by bypassing React.createElement.\n *\n * To use this function on a per-file basis, use the jsx directive targeting withSlots.\n * This directive must be the FIRST LINE in the file to work correctly.\n * Usage of this pragma also requires withSlots import statement.\n *\n * See React.createElement\n */\n// Can't use typeof on React.createElement since it's overloaded. Approximate createElement's signature for now\n// and widen as needed.\nexport function withSlots(type, props) {\n  var children = [];\n  for (var _i = 2; _i < arguments.length; _i++) {\n    children[_i - 2] = arguments[_i];\n  }\n  var slotType = type;\n  if (slotType.isSlot) {\n    // Since we are bypassing createElement, use React.Children.toArray to make sure children are\n    // properly assigned keys.\n    // TODO: should this be mutating? does React mutate children subprop with createElement?\n    // TODO: will toArray clobber existing keys?\n    // TODO: React generates warnings because it doesn't detect hidden member _store that is set in createElement.\n    //        Even children passed to createElement without keys don't generate this warning.\n    //        Is there a better way to prevent slots from appearing in hierarchy? toArray doesn't address root issue.\n    children = React.Children.toArray(children);\n    // TODO: There is something weird going on here with children embedded in props vs. rest args.\n    // Comment out these lines to see. Make sure this function is doing the right things.\n    if (children.length === 0) {\n      return slotType(props);\n    }\n    return slotType(__assign(__assign({}, props), {\n      children: children\n    }));\n  } else {\n    // TODO: Are there some cases where children should NOT be spread? Also, spreading reraises perf question.\n    //        Children had to be spread to avoid breaking KeytipData in Toggle.view:\n    //        react-dom.development.js:18931 Uncaught TypeError: children is not a function\n    //        Without spread, function child is a child array of one element\n    // TODO: is there a reason this can't be:\n    // return React.createElement.apply(this, arguments);\n    return React.createElement.apply(React, __spreadArray([type, props], children));\n  }\n}\n/**\n * This function creates factories that render ouput depending on the user ISlotProp props passed in.\n * @param DefaultComponent - Base component to render when not overridden by user props.\n * @param options - Factory options, including defaultProp value for shorthand prop mapping.\n * @returns ISlotFactory function used for rendering slots.\n */\nexport function createFactory(DefaultComponent, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _a = options.defaultProp,\n    defaultProp = _a === void 0 ? 'children' : _a;\n  var result = function (componentProps, userProps, userSlotOptions, defaultStyles, theme) {\n    // If they passed in raw JSX, just return that.\n    if (React.isValidElement(userProps)) {\n      return userProps;\n    }\n    var flattenedUserProps = _translateShorthand(defaultProp, userProps);\n    var finalProps = _constructFinalProps(defaultStyles, theme, componentProps, flattenedUserProps);\n    if (userSlotOptions) {\n      if (userSlotOptions.component) {\n        // TODO: Remove cast if possible. This cast is needed because TS errors on the intrinsic portion of ReactType.\n        // return <userSlotOptions.component {...finalProps} />;\n        var UserComponent = userSlotOptions.component;\n        return React.createElement(UserComponent, __assign({}, finalProps));\n      }\n      if (userSlotOptions.render) {\n        return userSlotOptions.render(finalProps, DefaultComponent);\n      }\n    }\n    return React.createElement(DefaultComponent, __assign({}, finalProps));\n  };\n  return result;\n}\n/**\n * Default factory for components without explicit factories.\n */\nvar defaultFactory = memoizeFunction(function (type) {\n  return createFactory(type);\n});\n/**\n * This function generates slots that can be used in JSX given a definition of slots and their corresponding types.\n * @param userProps - Props as pass to component.\n * @param slots - Slot definition object defining the default slot component for each slot.\n * @returns A set of created slots that components can render in JSX.\n */\nexport function getSlots(userProps, slots) {\n  var result = {};\n  // userProps already has default props mixed in by createComponent. Recast here to gain typing for this function.\n  var mixedProps = userProps;\n  var _loop_1 = function (name_1) {\n    if (slots.hasOwnProperty(name_1)) {\n      // This closure method requires the use of withSlots to prevent unnecessary rerenders. This is because React\n      // detects each closure as a different component (since it is a new instance) from the previous one and then\n      // forces a rerender of the entire slot subtree. For now, the only way to avoid this is to use withSlots, which\n      // bypasses the call to React.createElement.\n      var slot = function (componentProps) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n          args[_i - 1] = arguments[_i];\n        }\n        if (args.length > 0) {\n          // If React.createElement is being incorrectly used with slots, there will be additional arguments.\n          // We can detect these additional arguments and error on their presence.\n          throw new Error('Any module using getSlots must use withSlots. Please see withSlots javadoc for more info.');\n        }\n        // TODO: having TS infer types here seems to cause infinite loop.\n        //   use explicit types or casting to preserve typing if possible.\n        // TODO: this should be a lookup on TProps property instead of being TProps directly, which is probably\n        //   causing the infinite loop\n        return _renderSlot(slots[name_1],\n        // TODO: this cast to any is hiding a relationship issue between the first two args\n        componentProps, mixedProps[name_1], mixedProps.slots && mixedProps.slots[name_1],\n        // _defaultStyles should always be present, but a check for existence is added to make view tests\n        // easier to use.\n        mixedProps._defaultStyles && mixedProps._defaultStyles[name_1], mixedProps.theme);\n      };\n      slot.isSlot = true;\n      result[name_1] = slot;\n    }\n  };\n  for (var name_1 in slots) {\n    _loop_1(name_1);\n  }\n  return result;\n}\n/**\n * Helper function that translates shorthand as needed.\n * @param defaultProp\n * @param slotProps\n */\nfunction _translateShorthand(defaultProp, slotProps) {\n  var _a;\n  var transformedProps;\n  if (typeof slotProps === 'string' || typeof slotProps === 'number' || typeof slotProps === 'boolean') {\n    transformedProps = (_a = {}, _a[defaultProp] = slotProps, _a);\n  } else {\n    transformedProps = slotProps;\n  }\n  return transformedProps;\n}\n/**\n * Helper function that constructs final styles and props given a series of props ordered by increasing priority.\n */\nfunction _constructFinalProps(defaultStyles, theme) {\n  var allProps = [];\n  for (var _i = 2; _i < arguments.length; _i++) {\n    allProps[_i - 2] = arguments[_i];\n  }\n  var finalProps = {};\n  var classNames = [];\n  for (var _a = 0, allProps_1 = allProps; _a < allProps_1.length; _a++) {\n    var props = allProps_1[_a];\n    classNames.push(props && props.className);\n    assign(finalProps, props);\n  }\n  finalProps.className = mergeCss([defaultStyles, classNames], {\n    rtl: getRTL(theme)\n  });\n  return finalProps;\n}\n/**\n * Render a slot given component and user props. Uses component factory if available, otherwise falls back\n * to default factory.\n * @param ComponentType Factory component type.\n * @param componentProps The properties passed into slot from within the component.\n * @param userProps The user properties passed in from outside of the component.\n */\nfunction _renderSlot(ComponentType, componentProps, userProps, slotOptions, defaultStyles, theme) {\n  if (ComponentType.create !== undefined) {\n    return ComponentType.create(componentProps, userProps, slotOptions, defaultStyles);\n  } else {\n    // TODO: need to resolve typing / generic issues passing through memoizeFunction. for now, cast to 'unknown'\n    return defaultFactory(ComponentType)(componentProps, userProps, slotOptions, defaultStyles, theme);\n  }\n}","map":{"version":3,"mappings":"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","names":["React","mergeCss","getRTL","memoizeFunction","assign","withSlots","type","props","_i","children","slotType","isSlot","Children","toArray","length","createElement","createFactory","DefaultComponent","options","defaultProp","result","componentProps","userProps","userSlotOptions","defaultStyles","theme","isValidElement","flattenedUserProps","_translateShorthand","finalProps","_constructFinalProps","component","UserComponent","render","defaultFactory","getSlots","slots","mixedProps","name_1","hasOwnProperty","slot","args","Error","_renderSlot","_defaultStyles","slotProps","transformedProps","_a","allProps","classNames","allProps_1","push","className","rtl","ComponentType","slotOptions","create","undefined"],"sources":["/Users/edward/Zhuo/NYU/FA22/design_project/project/node_modules/@fluentui/react/node_modules/@fluentui/foundation-legacy/src/slots.tsx"],"sourcesContent":["import * as React from 'react';\nimport { mergeCss } from '@fluentui/merge-styles';\nimport { IStyle, ITheme } from '@fluentui/style-utilities';\nimport { getRTL, memoizeFunction } from '@fluentui/utilities';\nimport { assign } from './utilities';\nimport { IFactoryOptions } from './IComponent';\nimport {\n  ISlottableReactType,\n  ISlot,\n  ISlots,\n  ISlotDefinition,\n  ISlotFactory,\n  ISlotProp,\n  ISlottableProps,\n  ISlotOptions,\n  IDefaultSlotProps,\n  IProcessedSlotProps,\n  ValidProps,\n  ValidShorthand,\n} from './ISlots';\n\n/**\n * This function is required for any module that uses slots.\n *\n * This function is a slot resolver that automatically evaluates slot functions to generate React elements.\n * A byproduct of this resolver is that it removes slots from the React hierarchy by bypassing React.createElement.\n *\n * To use this function on a per-file basis, use the jsx directive targeting withSlots.\n * This directive must be the FIRST LINE in the file to work correctly.\n * Usage of this pragma also requires withSlots import statement.\n *\n * See React.createElement\n */\n// Can't use typeof on React.createElement since it's overloaded. Approximate createElement's signature for now\n// and widen as needed.\nexport function withSlots<P>(\n  type: ISlot<P> | React.FunctionComponent<P> | string,\n  props?: (React.Attributes & P) | null,\n  ...children: React.ReactNode[]\n): ReturnType<React.FunctionComponent<P>> {\n  const slotType = type as ISlot<P>;\n  if (slotType.isSlot) {\n    // Since we are bypassing createElement, use React.Children.toArray to make sure children are\n    // properly assigned keys.\n    // TODO: should this be mutating? does React mutate children subprop with createElement?\n    // TODO: will toArray clobber existing keys?\n    // TODO: React generates warnings because it doesn't detect hidden member _store that is set in createElement.\n    //        Even children passed to createElement without keys don't generate this warning.\n    //        Is there a better way to prevent slots from appearing in hierarchy? toArray doesn't address root issue.\n    children = React.Children.toArray(children);\n\n    // TODO: There is something weird going on here with children embedded in props vs. rest args.\n    // Comment out these lines to see. Make sure this function is doing the right things.\n    if (children.length === 0) {\n      return slotType(props);\n    }\n\n    return slotType({ ...(props as any), children });\n  } else {\n    // TODO: Are there some cases where children should NOT be spread? Also, spreading reraises perf question.\n    //        Children had to be spread to avoid breaking KeytipData in Toggle.view:\n    //        react-dom.development.js:18931 Uncaught TypeError: children is not a function\n    //        Without spread, function child is a child array of one element\n    // TODO: is there a reason this can't be:\n    // return React.createElement.apply(this, arguments);\n    return React.createElement(type, props, ...children);\n  }\n}\n\n/**\n * This function creates factories that render ouput depending on the user ISlotProp props passed in.\n * @param DefaultComponent - Base component to render when not overridden by user props.\n * @param options - Factory options, including defaultProp value for shorthand prop mapping.\n * @returns ISlotFactory function used for rendering slots.\n */\nexport function createFactory<TProps extends ValidProps, TShorthandProp extends ValidShorthand = never>(\n  DefaultComponent: React.ComponentType<TProps>,\n  options: IFactoryOptions<TProps> = {},\n): ISlotFactory<TProps, TShorthandProp> {\n  const { defaultProp = 'children' } = options;\n\n  const result: ISlotFactory<TProps, TShorthandProp> = (\n    componentProps,\n    userProps,\n    userSlotOptions,\n    defaultStyles,\n    theme,\n  ) => {\n    // If they passed in raw JSX, just return that.\n    if (React.isValidElement(userProps)) {\n      return userProps;\n    }\n\n    const flattenedUserProps: TProps | undefined = _translateShorthand(defaultProp as string, userProps);\n    const finalProps = _constructFinalProps(defaultStyles, theme, componentProps, flattenedUserProps);\n\n    if (userSlotOptions) {\n      if (userSlotOptions.component) {\n        // TODO: Remove cast if possible. This cast is needed because TS errors on the intrinsic portion of ReactType.\n        // return <userSlotOptions.component {...finalProps} />;\n        const UserComponent = userSlotOptions.component as React.ComponentType<TProps>;\n        return <UserComponent {...finalProps} />;\n      }\n\n      if (userSlotOptions.render) {\n        return userSlotOptions.render(finalProps, DefaultComponent);\n      }\n    }\n\n    return <DefaultComponent {...finalProps} />;\n  };\n\n  return result;\n}\n\n/**\n * Default factory for components without explicit factories.\n */\nconst defaultFactory = memoizeFunction(type => createFactory(type));\n\n/**\n * This function generates slots that can be used in JSX given a definition of slots and their corresponding types.\n * @param userProps - Props as pass to component.\n * @param slots - Slot definition object defining the default slot component for each slot.\n * @returns A set of created slots that components can render in JSX.\n */\nexport function getSlots<TComponentProps extends ISlottableProps<TComponentSlots>, TComponentSlots>(\n  userProps: TComponentProps,\n  slots: ISlotDefinition<Required<TComponentSlots>>,\n): ISlots<Required<TComponentSlots>> {\n  const result: ISlots<Required<TComponentSlots>> = {} as ISlots<Required<TComponentSlots>>;\n\n  // userProps already has default props mixed in by createComponent. Recast here to gain typing for this function.\n  const mixedProps = userProps as TComponentProps & IDefaultSlotProps<TComponentSlots>;\n\n  for (const name in slots) {\n    if (slots.hasOwnProperty(name)) {\n      // This closure method requires the use of withSlots to prevent unnecessary rerenders. This is because React\n      // detects each closure as a different component (since it is a new instance) from the previous one and then\n      // forces a rerender of the entire slot subtree. For now, the only way to avoid this is to use withSlots, which\n      // bypasses the call to React.createElement.\n      const slot: ISlots<Required<TComponentSlots>>[keyof TComponentSlots] = (componentProps, ...args: any[]) => {\n        if (args.length > 0) {\n          // If React.createElement is being incorrectly used with slots, there will be additional arguments.\n          // We can detect these additional arguments and error on their presence.\n          throw new Error('Any module using getSlots must use withSlots. Please see withSlots javadoc for more info.');\n        }\n        // TODO: having TS infer types here seems to cause infinite loop.\n        //   use explicit types or casting to preserve typing if possible.\n        // TODO: this should be a lookup on TProps property instead of being TProps directly, which is probably\n        //   causing the infinite loop\n        return _renderSlot<any, any, any>(\n          slots[name],\n          // TODO: this cast to any is hiding a relationship issue between the first two args\n          componentProps as any,\n          mixedProps[name],\n          mixedProps.slots && mixedProps.slots[name],\n          // _defaultStyles should always be present, but a check for existence is added to make view tests\n          // easier to use.\n          mixedProps._defaultStyles && mixedProps._defaultStyles[name],\n          (mixedProps as any).theme,\n        );\n      };\n      slot.isSlot = true;\n      result[name] = slot;\n    }\n  }\n\n  return result;\n}\n\n/**\n * Helper function that translates shorthand as needed.\n * @param defaultProp\n * @param slotProps\n */\nfunction _translateShorthand<TProps extends ValidProps, TShorthandProp extends ValidShorthand>(\n  defaultProp: string,\n  slotProps: ISlotProp<TProps, TShorthandProp>,\n): TProps | undefined {\n  let transformedProps: TProps | undefined;\n\n  if (typeof slotProps === 'string' || typeof slotProps === 'number' || typeof slotProps === 'boolean') {\n    transformedProps = {\n      [defaultProp]: slotProps as any,\n    } as TProps;\n  } else {\n    transformedProps = slotProps as TProps;\n  }\n\n  return transformedProps;\n}\n\n/**\n * Helper function that constructs final styles and props given a series of props ordered by increasing priority.\n */\nfunction _constructFinalProps<TProps extends IProcessedSlotProps>(\n  defaultStyles: IStyle,\n  theme?: ITheme,\n  ...allProps: (TProps | undefined)[]\n): TProps {\n  const finalProps: TProps = {} as any;\n  const classNames: (string | undefined)[] = [];\n\n  for (const props of allProps) {\n    classNames.push(props && props.className);\n    assign(finalProps, props);\n  }\n\n  finalProps.className = mergeCss([defaultStyles, classNames], { rtl: getRTL(theme) });\n\n  return finalProps;\n}\n\n/**\n * Render a slot given component and user props. Uses component factory if available, otherwise falls back\n * to default factory.\n * @param ComponentType Factory component type.\n * @param componentProps The properties passed into slot from within the component.\n * @param userProps The user properties passed in from outside of the component.\n */\nfunction _renderSlot<\n  TSlotComponent extends ISlottableReactType<TSlotProps, TSlotShorthand>,\n  TSlotProps extends ValidProps,\n  TSlotShorthand extends ValidShorthand\n>(\n  ComponentType: TSlotComponent,\n  componentProps: TSlotProps,\n  userProps: ISlotProp<TSlotProps, TSlotShorthand>,\n  slotOptions: ISlotOptions<TSlotProps> | undefined,\n  defaultStyles: IStyle,\n  theme?: ITheme,\n): ReturnType<React.FunctionComponent> {\n  if (ComponentType.create !== undefined) {\n    return ComponentType.create(componentProps, userProps, slotOptions, defaultStyles);\n  } else {\n    // TODO: need to resolve typing / generic issues passing through memoizeFunction. for now, cast to 'unknown'\n    return ((defaultFactory(ComponentType) as unknown) as ISlotFactory<TSlotProps, TSlotShorthand>)(\n      componentProps,\n      userProps,\n      slotOptions,\n      defaultStyles,\n      theme,\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}