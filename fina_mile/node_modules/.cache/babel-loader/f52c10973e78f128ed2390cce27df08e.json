{"ast":null,"code":"// Regex that finds { and } so they can be removed on a lookup for string format\nvar FORMAT_ARGS_REGEX = /[\\{\\}]/g;\n// Regex that finds {#} so it can be replaced by the arguments in string format\nvar FORMAT_REGEX = /\\{\\d+\\}/g;\n/**\n * String format method, used for scenarios where at runtime you\n * need to evaluate a formatted string given a tokenized string. This\n * usually only is needed in localization scenarios.\n\n * @example\n * ```tsx\n * \"I love {0} every {1}\".format(\"CXP\")\n * ```\n * will result in a Debug Exception.\n *\n * @public\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function format(s) {\n  var values = [];\n  for (var _i = 1; _i < arguments.length; _i++) {\n    values[_i - 1] = arguments[_i];\n  }\n  var args = values;\n  // Callback match function\n  function replaceFunc(match) {\n    // looks up in the args\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    var replacement = args[match.replace(FORMAT_ARGS_REGEX, '')];\n    // catches undefined in nondebug and null in debug and nondebug\n    if (replacement === null || replacement === undefined) {\n      replacement = '';\n    }\n    return replacement;\n  }\n  return s.replace(FORMAT_REGEX, replaceFunc);\n}","map":{"version":3,"mappings":"AAAA;AACA,IAAMA,iBAAiB,GAAG,SAAS;AAEnC;AACA,IAAMC,YAAY,GAAG,UAAU;AAE/B;;;;;;;;;;;;;AAaA;AACA,OAAM,SAAUC,MAAM,CAACC,CAAS;EAAE;OAAA,UAAgB,EAAhBC,qBAAgB,EAAhBA,IAAgB;IAAhBC;;EAChC,IAAIC,IAAI,GAAGD,MAAM;EACjB;EACA,SAASE,WAAW,CAACC,KAAa;IAChC;IACA;IACA,IAAIC,WAAW,GAAGH,IAAI,CAACE,KAAK,CAACE,OAAO,CAACV,iBAAiB,EAAE,EAAE,CAAQ,CAAC;IAEnE;IACA,IAAIS,WAAW,KAAK,IAAI,IAAIA,WAAW,KAAKE,SAAS,EAAE;MACrDF,WAAW,GAAG,EAAE;;IAGlB,OAAOA,WAAW;EACpB;EACA,OAAON,CAAC,CAACO,OAAO,CAACT,YAAY,EAAEM,WAAW,CAAC;AAC7C","names":["FORMAT_ARGS_REGEX","FORMAT_REGEX","format","s","_i","values","args","replaceFunc","match","replacement","replace","undefined"],"sources":["/Users/edward/Zhuo/NYU/FA22/design_project/project/node_modules/@fluentui/style-utilities/node_modules/@fluentui/utilities/src/string.ts"],"sourcesContent":["// Regex that finds { and } so they can be removed on a lookup for string format\nconst FORMAT_ARGS_REGEX = /[\\{\\}]/g;\n\n// Regex that finds {#} so it can be replaced by the arguments in string format\nconst FORMAT_REGEX = /\\{\\d+\\}/g;\n\n/**\n * String format method, used for scenarios where at runtime you\n * need to evaluate a formatted string given a tokenized string. This\n * usually only is needed in localization scenarios.\n\n * @example\n * ```tsx\n * \"I love {0} every {1}\".format(\"CXP\")\n * ```\n * will result in a Debug Exception.\n *\n * @public\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function format(s: string, ...values: any[]): string {\n  let args = values;\n  // Callback match function\n  function replaceFunc(match: string): string {\n    // looks up in the args\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let replacement = args[match.replace(FORMAT_ARGS_REGEX, '') as any];\n\n    // catches undefined in nondebug and null in debug and nondebug\n    if (replacement === null || replacement === undefined) {\n      replacement = '';\n    }\n\n    return replacement;\n  }\n  return s.replace(FORMAT_REGEX, replaceFunc);\n}\n"]},"metadata":{},"sourceType":"module"}