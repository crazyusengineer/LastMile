{"ast":null,"code":"import { __assign } from \"tslib\";\nexport var InjectionMode = {\n  /**\n   * Avoids style injection, use getRules() to read the styles.\n   */\n  none: 0,\n  /**\n   * Inserts rules using the insertRule api.\n   */\n  insertNode: 1,\n  /**\n   * Appends rules using appendChild.\n   */\n  appendChild: 2\n};\nvar STYLESHEET_SETTING = '__stylesheet__';\n/**\n * MSIE 11 doesn't cascade styles based on DOM ordering, but rather on the order that each style node\n * is created. As such, to maintain consistent priority, IE11 should reuse a single style node.\n */\nvar REUSE_STYLE_NODE = typeof navigator !== 'undefined' && /rv:11.0/.test(navigator.userAgent);\nvar _global = {};\n// Grab window.\ntry {\n  _global = window || {};\n} catch (_a) {\n  /* leave as blank object */\n}\nvar _stylesheet;\n/**\n * Represents the state of styles registered in the page. Abstracts\n * the surface for adding styles to the stylesheet, exposes helpers\n * for reading the styles registered in server rendered scenarios.\n *\n * @public\n */\nvar Stylesheet = /** @class */function () {\n  function Stylesheet(config, serializedStylesheet) {\n    var _a, _b, _c, _d, _e, _f;\n    this._rules = [];\n    this._preservedRules = [];\n    this._counter = 0;\n    this._keyToClassName = {};\n    this._onInsertRuleCallbacks = [];\n    this._onResetCallbacks = [];\n    this._classNameToArgs = {};\n    this._config = __assign({\n      // If there is no document we won't have an element to inject into.\n      injectionMode: typeof document === 'undefined' ? InjectionMode.none : InjectionMode.insertNode,\n      defaultPrefix: 'css',\n      namespace: undefined,\n      cspSettings: undefined\n    }, config);\n    this._classNameToArgs = (_a = serializedStylesheet === null || serializedStylesheet === void 0 ? void 0 : serializedStylesheet.classNameToArgs) !== null && _a !== void 0 ? _a : this._classNameToArgs;\n    this._counter = (_b = serializedStylesheet === null || serializedStylesheet === void 0 ? void 0 : serializedStylesheet.counter) !== null && _b !== void 0 ? _b : this._counter;\n    this._keyToClassName = (_d = (_c = this._config.classNameCache) !== null && _c !== void 0 ? _c : serializedStylesheet === null || serializedStylesheet === void 0 ? void 0 : serializedStylesheet.keyToClassName) !== null && _d !== void 0 ? _d : this._keyToClassName;\n    this._preservedRules = (_e = serializedStylesheet === null || serializedStylesheet === void 0 ? void 0 : serializedStylesheet.preservedRules) !== null && _e !== void 0 ? _e : this._preservedRules;\n    this._rules = (_f = serializedStylesheet === null || serializedStylesheet === void 0 ? void 0 : serializedStylesheet.rules) !== null && _f !== void 0 ? _f : this._rules;\n  }\n  /**\n   * Gets the singleton instance.\n   */\n  Stylesheet.getInstance = function () {\n    _stylesheet = _global[STYLESHEET_SETTING];\n    if (!_stylesheet || _stylesheet._lastStyleElement && _stylesheet._lastStyleElement.ownerDocument !== document) {\n      var fabricConfig = (_global === null || _global === void 0 ? void 0 : _global.FabricConfig) || {};\n      var stylesheet = new Stylesheet(fabricConfig.mergeStyles, fabricConfig.serializedStylesheet);\n      _stylesheet = stylesheet;\n      _global[STYLESHEET_SETTING] = stylesheet;\n    }\n    return _stylesheet;\n  };\n  /**\n   * Serializes the Stylesheet instance into a format which allows rehydration on creation.\n   * @returns string representation of `ISerializedStylesheet` interface.\n   */\n  Stylesheet.prototype.serialize = function () {\n    return JSON.stringify({\n      classNameToArgs: this._classNameToArgs,\n      counter: this._counter,\n      keyToClassName: this._keyToClassName,\n      preservedRules: this._preservedRules,\n      rules: this._rules\n    });\n  };\n  /**\n   * Configures the stylesheet.\n   */\n  Stylesheet.prototype.setConfig = function (config) {\n    this._config = __assign(__assign({}, this._config), config);\n  };\n  /**\n   * Configures a reset callback.\n   *\n   * @param callback - A callback which will be called when the Stylesheet is reset.\n   * @returns function which when called un-registers provided callback.\n   */\n  Stylesheet.prototype.onReset = function (callback) {\n    var _this = this;\n    this._onResetCallbacks.push(callback);\n    return function () {\n      _this._onResetCallbacks = _this._onResetCallbacks.filter(function (cb) {\n        return cb !== callback;\n      });\n    };\n  };\n  /**\n   * Configures an insert rule callback.\n   *\n   * @param callback - A callback which will be called when a rule is inserted.\n   * @returns function which when called un-registers provided callback.\n   */\n  Stylesheet.prototype.onInsertRule = function (callback) {\n    var _this = this;\n    this._onInsertRuleCallbacks.push(callback);\n    return function () {\n      _this._onInsertRuleCallbacks = _this._onInsertRuleCallbacks.filter(function (cb) {\n        return cb !== callback;\n      });\n    };\n  };\n  /**\n   * Generates a unique classname.\n   *\n   * @param displayName - Optional value to use as a prefix.\n   */\n  Stylesheet.prototype.getClassName = function (displayName) {\n    var namespace = this._config.namespace;\n    var prefix = displayName || this._config.defaultPrefix;\n    return \"\" + (namespace ? namespace + '-' : '') + prefix + \"-\" + this._counter++;\n  };\n  /**\n   * Used internally to cache information about a class which was\n   * registered with the stylesheet.\n   */\n  Stylesheet.prototype.cacheClassName = function (className, key, args, rules) {\n    this._keyToClassName[key] = className;\n    this._classNameToArgs[className] = {\n      args: args,\n      rules: rules\n    };\n  };\n  /**\n   * Gets the appropriate classname given a key which was previously\n   * registered using cacheClassName.\n   */\n  Stylesheet.prototype.classNameFromKey = function (key) {\n    return this._keyToClassName[key];\n  };\n  /**\n   * Gets all classnames cache with the stylesheet.\n   */\n  Stylesheet.prototype.getClassNameCache = function () {\n    return this._keyToClassName;\n  };\n  /**\n   * Gets the arguments associated with a given classname which was\n   * previously registered using cacheClassName.\n   */\n  Stylesheet.prototype.argsFromClassName = function (className) {\n    var entry = this._classNameToArgs[className];\n    return entry && entry.args;\n  };\n  /**\n   * Gets the rules associated with a given classname which was\n   * previously registered using cacheClassName.\n   */\n  Stylesheet.prototype.insertedRulesFromClassName = function (className) {\n    var entry = this._classNameToArgs[className];\n    return entry && entry.rules;\n  };\n  /**\n   * Inserts a css rule into the stylesheet.\n   * @param preserve - Preserves the rule beyond a reset boundary.\n   */\n  Stylesheet.prototype.insertRule = function (rule, preserve) {\n    var injectionMode = this._config.injectionMode;\n    var element = injectionMode !== InjectionMode.none ? this._getStyleElement() : undefined;\n    if (preserve) {\n      this._preservedRules.push(rule);\n    }\n    if (element) {\n      switch (injectionMode) {\n        case InjectionMode.insertNode:\n          var sheet = element.sheet;\n          try {\n            sheet.insertRule(rule, sheet.cssRules.length);\n          } catch (e) {\n            // The browser will throw exceptions on unsupported rules (such as a moz prefix in webkit.)\n            // We need to swallow the exceptions for this scenario, otherwise we'd need to filter\n            // which could be slower and bulkier.\n          }\n          break;\n        case InjectionMode.appendChild:\n          element.appendChild(document.createTextNode(rule));\n          break;\n      }\n    } else {\n      this._rules.push(rule);\n    }\n    // eslint-disable-next-line deprecation/deprecation\n    if (this._config.onInsertRule) {\n      // eslint-disable-next-line deprecation/deprecation\n      this._config.onInsertRule(rule);\n    }\n    this._onInsertRuleCallbacks.forEach(function (callback) {\n      return callback();\n    });\n  };\n  /**\n   * Gets all rules registered with the stylesheet; only valid when\n   * using InsertionMode.none.\n   */\n  Stylesheet.prototype.getRules = function (includePreservedRules) {\n    return (includePreservedRules ? this._preservedRules.join('') : '') + this._rules.join('');\n  };\n  /**\n   * Resets the internal state of the stylesheet. Only used in server\n   * rendered scenarios where we're using InsertionMode.none.\n   */\n  Stylesheet.prototype.reset = function () {\n    this._rules = [];\n    this._counter = 0;\n    this._classNameToArgs = {};\n    this._keyToClassName = {};\n    this._onResetCallbacks.forEach(function (callback) {\n      return callback();\n    });\n  };\n  // Forces the regeneration of incoming styles without totally resetting the stylesheet.\n  Stylesheet.prototype.resetKeys = function () {\n    this._keyToClassName = {};\n  };\n  Stylesheet.prototype._getStyleElement = function () {\n    var _this = this;\n    if (!this._styleElement && typeof document !== 'undefined') {\n      this._styleElement = this._createStyleElement();\n      if (!REUSE_STYLE_NODE) {\n        // Reset the style element on the next frame.\n        window.requestAnimationFrame(function () {\n          _this._styleElement = undefined;\n        });\n      }\n    }\n    return this._styleElement;\n  };\n  Stylesheet.prototype._createStyleElement = function () {\n    var head = document.head;\n    var styleElement = document.createElement('style');\n    var nodeToInsertBefore = null;\n    styleElement.setAttribute('data-merge-styles', 'true');\n    var cspSettings = this._config.cspSettings;\n    if (cspSettings) {\n      if (cspSettings.nonce) {\n        styleElement.setAttribute('nonce', cspSettings.nonce);\n      }\n    }\n    if (this._lastStyleElement) {\n      // If the `nextElementSibling` is null, then the insertBefore will act as a regular append.\n      // https://developer.mozilla.org/en-US/docs/Web/API/Node/insertBefore#Syntax\n      nodeToInsertBefore = this._lastStyleElement.nextElementSibling;\n    } else {\n      var placeholderStyleTag = this._findPlaceholderStyleTag();\n      if (placeholderStyleTag) {\n        nodeToInsertBefore = placeholderStyleTag.nextElementSibling;\n      } else {\n        nodeToInsertBefore = head.childNodes[0];\n      }\n    }\n    head.insertBefore(styleElement, head.contains(nodeToInsertBefore) ? nodeToInsertBefore : null);\n    this._lastStyleElement = styleElement;\n    return styleElement;\n  };\n  Stylesheet.prototype._findPlaceholderStyleTag = function () {\n    var head = document.head;\n    if (head) {\n      return head.querySelector('style[data-merge-styles]');\n    }\n    return null;\n  };\n  return Stylesheet;\n}();\nexport { Stylesheet };","map":{"version":3,"mappings":"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","names":["InjectionMode","none","insertNode","appendChild","STYLESHEET_SETTING","REUSE_STYLE_NODE","navigator","test","userAgent","_global","window","_stylesheet","config","serializedStylesheet","_config","injectionMode","document","defaultPrefix","namespace","undefined","cspSettings","_classNameToArgs","classNameToArgs","_counter","counter","_keyToClassName","classNameCache","keyToClassName","_preservedRules","preservedRules","_rules","rules","Stylesheet","_lastStyleElement","ownerDocument","fabricConfig","FabricConfig","stylesheet","mergeStyles","JSON","stringify","callback","_onResetCallbacks","push","_this","filter","_onInsertRuleCallbacks","displayName","prefix","className","key","args","entry","rule","preserve","element","_getStyleElement","sheet","insertRule","cssRules","length","e","createTextNode","onInsertRule","forEach","includePreservedRules","join","_styleElement","_createStyleElement","requestAnimationFrame","head","styleElement","createElement","nodeToInsertBefore","setAttribute","nonce","nextElementSibling","placeholderStyleTag","_findPlaceholderStyleTag","childNodes","insertBefore","contains","querySelector"],"sources":["/Users/edward/Zhuo/NYU/FA22/design_project/project/node_modules/@fluentui/merge-styles/src/Stylesheet.ts"],"sourcesContent":["import { IStyle } from './IStyle';\n\nexport const InjectionMode = {\n  /**\n   * Avoids style injection, use getRules() to read the styles.\n   */\n  none: 0 as 0,\n\n  /**\n   * Inserts rules using the insertRule api.\n   */\n  insertNode: 1 as 1,\n\n  /**\n   * Appends rules using appendChild.\n   */\n  appendChild: 2 as 2,\n};\n\nexport type InjectionMode = typeof InjectionMode[keyof typeof InjectionMode];\n\n/**\n * CSP settings for the stylesheet\n */\nexport interface ICSPSettings {\n  /**\n   * Nonce to inject into script tag\n   */\n  nonce?: string;\n}\n\n/**\n * Stylesheet config.\n *\n * @public\n */\nexport interface IStyleSheetConfig {\n  /**\n   * Injection mode for how rules are inserted.\n   */\n  injectionMode?: InjectionMode;\n\n  /**\n   * Default 'displayName' to use for a className.\n   * @defaultvalue 'css'\n   */\n  defaultPrefix?: string;\n\n  /**\n   * Defines the default direction of rules for auto-rtlifying things.\n   * While typically this is represented as a DIR attribute in the markup,\n   * the DIR is not enough to control whether padding goes on the left or\n   * right. Use this to set the default direction when rules are registered.\n   */\n  rtl?: boolean;\n\n  /**\n   * Default 'namespace' to attach before the className.\n   */\n  namespace?: string;\n\n  /**\n   * CSP settings\n   */\n  cspSettings?: ICSPSettings;\n\n  /**\n   * Callback executed when a rule is inserted.\n   * @deprecated Use `Stylesheet.onInsertRule` instead.\n   */\n  onInsertRule?: (rule: string) => void;\n\n  /**\n   * Initial value for classnames cache. Key is serialized css rules associated with a classname.\n   */\n  classNameCache?: { [key: string]: string };\n}\n\n/**\n * Representation of Stylesheet used for rehydration.\n */\nexport interface ISerializedStylesheet {\n  classNameToArgs: Stylesheet['_classNameToArgs'];\n  counter: Stylesheet['_counter'];\n  keyToClassName: Stylesheet['_keyToClassName'];\n  preservedRules: Stylesheet['_preservedRules'];\n  rules: Stylesheet['_rules'];\n}\n\nconst STYLESHEET_SETTING = '__stylesheet__';\n/**\n * MSIE 11 doesn't cascade styles based on DOM ordering, but rather on the order that each style node\n * is created. As such, to maintain consistent priority, IE11 should reuse a single style node.\n */\nconst REUSE_STYLE_NODE = typeof navigator !== 'undefined' && /rv:11.0/.test(navigator.userAgent);\n\nlet _global: (Window | {}) & {\n  [STYLESHEET_SETTING]?: Stylesheet;\n  FabricConfig?: {\n    mergeStyles?: IStyleSheetConfig;\n    serializedStylesheet?: ISerializedStylesheet;\n  };\n} = {};\n\n// Grab window.\ntry {\n  _global = window || {};\n} catch {\n  /* leave as blank object */\n}\n\nlet _stylesheet: Stylesheet | undefined;\n\n/**\n * Represents the state of styles registered in the page. Abstracts\n * the surface for adding styles to the stylesheet, exposes helpers\n * for reading the styles registered in server rendered scenarios.\n *\n * @public\n */\nexport class Stylesheet {\n  private _lastStyleElement?: HTMLStyleElement;\n  private _styleElement?: HTMLStyleElement;\n  private _rules: string[] = [];\n  private _preservedRules: string[] = [];\n  private _config: IStyleSheetConfig;\n  private _counter = 0;\n  private _keyToClassName: { [key: string]: string } = {};\n  private _onInsertRuleCallbacks: Function[] = [];\n  private _onResetCallbacks: Function[] = [];\n  private _classNameToArgs: { [key: string]: { args: any; rules: string[] } } = {};\n\n  /**\n   * Gets the singleton instance.\n   */\n  public static getInstance(): Stylesheet {\n    _stylesheet = _global[STYLESHEET_SETTING] as Stylesheet;\n\n    if (!_stylesheet || (_stylesheet._lastStyleElement && _stylesheet._lastStyleElement.ownerDocument !== document)) {\n      const fabricConfig = _global?.FabricConfig || {};\n\n      const stylesheet = new Stylesheet(fabricConfig.mergeStyles, fabricConfig.serializedStylesheet);\n      _stylesheet = stylesheet;\n      _global[STYLESHEET_SETTING] = stylesheet;\n    }\n\n    return _stylesheet;\n  }\n\n  constructor(config?: IStyleSheetConfig, serializedStylesheet?: ISerializedStylesheet) {\n    this._config = {\n      // If there is no document we won't have an element to inject into.\n      injectionMode: typeof document === 'undefined' ? InjectionMode.none : InjectionMode.insertNode,\n      defaultPrefix: 'css',\n      namespace: undefined,\n      cspSettings: undefined,\n      ...config,\n    };\n\n    this._classNameToArgs = serializedStylesheet?.classNameToArgs ?? this._classNameToArgs;\n    this._counter = serializedStylesheet?.counter ?? this._counter;\n    this._keyToClassName = this._config.classNameCache ?? serializedStylesheet?.keyToClassName ?? this._keyToClassName;\n    this._preservedRules = serializedStylesheet?.preservedRules ?? this._preservedRules;\n    this._rules = serializedStylesheet?.rules ?? this._rules;\n  }\n\n  /**\n   * Serializes the Stylesheet instance into a format which allows rehydration on creation.\n   * @returns string representation of `ISerializedStylesheet` interface.\n   */\n  public serialize(): string {\n    return JSON.stringify({\n      classNameToArgs: this._classNameToArgs,\n      counter: this._counter,\n      keyToClassName: this._keyToClassName,\n      preservedRules: this._preservedRules,\n      rules: this._rules,\n    });\n  }\n\n  /**\n   * Configures the stylesheet.\n   */\n  public setConfig(config?: IStyleSheetConfig): void {\n    this._config = {\n      ...this._config,\n      ...config,\n    };\n  }\n\n  /**\n   * Configures a reset callback.\n   *\n   * @param callback - A callback which will be called when the Stylesheet is reset.\n   * @returns function which when called un-registers provided callback.\n   */\n  public onReset(callback: Function): Function {\n    this._onResetCallbacks.push(callback);\n\n    return () => {\n      this._onResetCallbacks = this._onResetCallbacks.filter(cb => cb !== callback);\n    };\n  }\n\n  /**\n   * Configures an insert rule callback.\n   *\n   * @param callback - A callback which will be called when a rule is inserted.\n   * @returns function which when called un-registers provided callback.\n   */\n  public onInsertRule(callback: Function): Function {\n    this._onInsertRuleCallbacks.push(callback);\n\n    return () => {\n      this._onInsertRuleCallbacks = this._onInsertRuleCallbacks.filter(cb => cb !== callback);\n    };\n  }\n\n  /**\n   * Generates a unique classname.\n   *\n   * @param displayName - Optional value to use as a prefix.\n   */\n  public getClassName(displayName?: string): string {\n    const { namespace } = this._config;\n    const prefix = displayName || this._config.defaultPrefix;\n\n    return `${namespace ? namespace + '-' : ''}${prefix}-${this._counter++}`;\n  }\n\n  /**\n   * Used internally to cache information about a class which was\n   * registered with the stylesheet.\n   */\n  public cacheClassName(className: string, key: string, args: IStyle[], rules: string[]): void {\n    this._keyToClassName[key] = className;\n    this._classNameToArgs[className] = {\n      args,\n      rules,\n    };\n  }\n\n  /**\n   * Gets the appropriate classname given a key which was previously\n   * registered using cacheClassName.\n   */\n  public classNameFromKey(key: string): string | undefined {\n    return this._keyToClassName[key];\n  }\n\n  /**\n   * Gets all classnames cache with the stylesheet.\n   */\n  public getClassNameCache(): { [key: string]: string } {\n    return this._keyToClassName;\n  }\n\n  /**\n   * Gets the arguments associated with a given classname which was\n   * previously registered using cacheClassName.\n   */\n  public argsFromClassName(className: string): IStyle[] | undefined {\n    const entry = this._classNameToArgs[className];\n\n    return entry && entry.args;\n  }\n\n  /**\n   * Gets the rules associated with a given classname which was\n   * previously registered using cacheClassName.\n   */\n  public insertedRulesFromClassName(className: string): string[] | undefined {\n    const entry = this._classNameToArgs[className];\n\n    return entry && entry.rules;\n  }\n\n  /**\n   * Inserts a css rule into the stylesheet.\n   * @param preserve - Preserves the rule beyond a reset boundary.\n   */\n  public insertRule(rule: string, preserve?: boolean): void {\n    const { injectionMode } = this._config;\n    const element = injectionMode !== InjectionMode.none ? this._getStyleElement() : undefined;\n\n    if (preserve) {\n      this._preservedRules.push(rule);\n    }\n\n    if (element) {\n      switch (injectionMode) {\n        case InjectionMode.insertNode:\n          const { sheet } = element!;\n\n          try {\n            (sheet as CSSStyleSheet).insertRule(rule, (sheet as CSSStyleSheet).cssRules.length);\n          } catch (e) {\n            // The browser will throw exceptions on unsupported rules (such as a moz prefix in webkit.)\n            // We need to swallow the exceptions for this scenario, otherwise we'd need to filter\n            // which could be slower and bulkier.\n          }\n          break;\n\n        case InjectionMode.appendChild:\n          element.appendChild(document.createTextNode(rule));\n          break;\n      }\n    } else {\n      this._rules.push(rule);\n    }\n\n    // eslint-disable-next-line deprecation/deprecation\n    if (this._config.onInsertRule) {\n      // eslint-disable-next-line deprecation/deprecation\n      this._config.onInsertRule(rule);\n    }\n\n    this._onInsertRuleCallbacks.forEach(callback => callback());\n  }\n\n  /**\n   * Gets all rules registered with the stylesheet; only valid when\n   * using InsertionMode.none.\n   */\n  public getRules(includePreservedRules?: boolean): string {\n    return (includePreservedRules ? this._preservedRules.join('') : '') + this._rules.join('');\n  }\n\n  /**\n   * Resets the internal state of the stylesheet. Only used in server\n   * rendered scenarios where we're using InsertionMode.none.\n   */\n  public reset(): void {\n    this._rules = [];\n    this._counter = 0;\n    this._classNameToArgs = {};\n    this._keyToClassName = {};\n\n    this._onResetCallbacks.forEach(callback => callback());\n  }\n\n  // Forces the regeneration of incoming styles without totally resetting the stylesheet.\n  public resetKeys(): void {\n    this._keyToClassName = {};\n  }\n\n  private _getStyleElement(): HTMLStyleElement | undefined {\n    if (!this._styleElement && typeof document !== 'undefined') {\n      this._styleElement = this._createStyleElement();\n\n      if (!REUSE_STYLE_NODE) {\n        // Reset the style element on the next frame.\n        window.requestAnimationFrame(() => {\n          this._styleElement = undefined;\n        });\n      }\n    }\n    return this._styleElement;\n  }\n\n  private _createStyleElement(): HTMLStyleElement {\n    const head: HTMLHeadElement = document.head;\n    const styleElement = document.createElement('style');\n    let nodeToInsertBefore: Node | null = null;\n\n    styleElement.setAttribute('data-merge-styles', 'true');\n\n    const { cspSettings } = this._config;\n    if (cspSettings) {\n      if (cspSettings.nonce) {\n        styleElement.setAttribute('nonce', cspSettings.nonce);\n      }\n    }\n    if (this._lastStyleElement) {\n      // If the `nextElementSibling` is null, then the insertBefore will act as a regular append.\n      // https://developer.mozilla.org/en-US/docs/Web/API/Node/insertBefore#Syntax\n      nodeToInsertBefore = this._lastStyleElement.nextElementSibling;\n    } else {\n      const placeholderStyleTag: Element | null = this._findPlaceholderStyleTag();\n\n      if (placeholderStyleTag) {\n        nodeToInsertBefore = placeholderStyleTag.nextElementSibling;\n      } else {\n        nodeToInsertBefore = head.childNodes[0];\n      }\n    }\n\n    head!.insertBefore(styleElement, head!.contains(nodeToInsertBefore) ? nodeToInsertBefore : null);\n    this._lastStyleElement = styleElement;\n\n    return styleElement;\n  }\n\n  private _findPlaceholderStyleTag(): Element | null {\n    const head: HTMLHeadElement = document.head;\n    if (head) {\n      return head.querySelector('style[data-merge-styles]');\n    }\n    return null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}