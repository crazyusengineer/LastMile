{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { parseGap, parsePadding } from './StackUtils';\nimport { getGlobalClassNames } from '../../Styling';\nvar nameMap = {\n  start: 'flex-start',\n  end: 'flex-end'\n};\nvar GlobalClassNames = {\n  root: 'ms-Stack',\n  inner: 'ms-Stack-inner'\n};\nexport var styles = function (props, theme, tokens) {\n  var _a, _b, _c, _d, _e, _f, _g;\n  var verticalFill = props.verticalFill,\n    horizontal = props.horizontal,\n    reversed = props.reversed,\n    grow = props.grow,\n    wrap = props.wrap,\n    horizontalAlign = props.horizontalAlign,\n    verticalAlign = props.verticalAlign,\n    disableShrink = props.disableShrink,\n    className = props.className;\n  var classNames = getGlobalClassNames(GlobalClassNames, theme);\n  /* eslint-disable deprecation/deprecation */\n  var childrenGap = tokens && tokens.childrenGap ? tokens.childrenGap : props.gap;\n  var maxHeight = tokens && tokens.maxHeight ? tokens.maxHeight : props.maxHeight;\n  var maxWidth = tokens && tokens.maxWidth ? tokens.maxWidth : props.maxWidth;\n  var padding = tokens && tokens.padding ? tokens.padding : props.padding;\n  /* eslint-enable deprecation/deprecation */\n  var _h = parseGap(childrenGap, theme),\n    rowGap = _h.rowGap,\n    columnGap = _h.columnGap;\n  var horizontalMargin = \"\" + -0.5 * columnGap.value + columnGap.unit;\n  var verticalMargin = \"\" + -0.5 * rowGap.value + rowGap.unit;\n  // styles to be applied to all direct children regardless of wrap or direction\n  var childStyles = {\n    textOverflow: 'ellipsis'\n  };\n  // selectors to be applied regardless of wrap or direction\n  var commonSelectors = {\n    // flexShrink styles are applied by the StackItem\n    '> *:not(.ms-StackItem)': {\n      flexShrink: disableShrink ? 0 : 1\n    }\n  };\n  if (wrap) {\n    return {\n      root: [classNames.root, {\n        flexWrap: 'wrap',\n        maxWidth: maxWidth,\n        maxHeight: maxHeight,\n        width: 'auto',\n        overflow: 'visible',\n        height: '100%'\n      }, horizontalAlign && (_a = {}, _a[horizontal ? 'justifyContent' : 'alignItems'] = nameMap[horizontalAlign] || horizontalAlign, _a), verticalAlign && (_b = {}, _b[horizontal ? 'alignItems' : 'justifyContent'] = nameMap[verticalAlign] || verticalAlign, _b), className, {\n        // not allowed to be overridden by className\n        // since this is necessary in order to prevent collapsing margins\n        display: 'flex'\n      }, horizontal && {\n        height: verticalFill ? '100%' : 'auto'\n      }],\n      inner: [classNames.inner, {\n        display: 'flex',\n        flexWrap: 'wrap',\n        marginLeft: horizontalMargin,\n        marginRight: horizontalMargin,\n        marginTop: verticalMargin,\n        marginBottom: verticalMargin,\n        overflow: 'visible',\n        boxSizing: 'border-box',\n        padding: parsePadding(padding, theme),\n        // avoid unnecessary calc() calls if horizontal gap is 0\n        width: columnGap.value === 0 ? '100%' : \"calc(100% + \" + columnGap.value + columnGap.unit + \")\",\n        maxWidth: '100vw',\n        selectors: __assign({\n          '> *': __assign({\n            margin: \"\" + 0.5 * rowGap.value + rowGap.unit + \" \" + 0.5 * columnGap.value + columnGap.unit\n          }, childStyles)\n        }, commonSelectors)\n      }, horizontalAlign && (_c = {}, _c[horizontal ? 'justifyContent' : 'alignItems'] = nameMap[horizontalAlign] || horizontalAlign, _c), verticalAlign && (_d = {}, _d[horizontal ? 'alignItems' : 'justifyContent'] = nameMap[verticalAlign] || verticalAlign, _d), horizontal && {\n        flexDirection: reversed ? 'row-reverse' : 'row',\n        // avoid unnecessary calc() calls if vertical gap is 0\n        height: rowGap.value === 0 ? '100%' : \"calc(100% + \" + rowGap.value + rowGap.unit + \")\",\n        selectors: {\n          '> *': {\n            maxWidth: columnGap.value === 0 ? '100%' : \"calc(100% - \" + columnGap.value + columnGap.unit + \")\"\n          }\n        }\n      }, !horizontal && {\n        flexDirection: reversed ? 'column-reverse' : 'column',\n        height: \"calc(100% + \" + rowGap.value + rowGap.unit + \")\",\n        selectors: {\n          '> *': {\n            maxHeight: rowGap.value === 0 ? '100%' : \"calc(100% - \" + rowGap.value + rowGap.unit + \")\"\n          }\n        }\n      }]\n    };\n  }\n  return {\n    root: [classNames.root, {\n      display: 'flex',\n      flexDirection: horizontal ? reversed ? 'row-reverse' : 'row' : reversed ? 'column-reverse' : 'column',\n      flexWrap: 'nowrap',\n      width: 'auto',\n      height: verticalFill ? '100%' : 'auto',\n      maxWidth: maxWidth,\n      maxHeight: maxHeight,\n      padding: parsePadding(padding, theme),\n      boxSizing: 'border-box',\n      selectors: __assign((_e = {\n        '> *': childStyles\n      }, _e[reversed ? '> *:not(:last-child)' : '> *:not(:first-child)'] = [horizontal && {\n        marginLeft: \"\" + columnGap.value + columnGap.unit\n      }, !horizontal && {\n        marginTop: \"\" + rowGap.value + rowGap.unit\n      }], _e), commonSelectors)\n    }, grow && {\n      flexGrow: grow === true ? 1 : grow\n    }, horizontalAlign && (_f = {}, _f[horizontal ? 'justifyContent' : 'alignItems'] = nameMap[horizontalAlign] || horizontalAlign, _f), verticalAlign && (_g = {}, _g[horizontal ? 'alignItems' : 'justifyContent'] = nameMap[verticalAlign] || verticalAlign, _g), className]\n    // TODO: this cast may be hiding some potential issues with styling and name\n    //        lookups and should be removed\n  };\n};","map":{"version":3,"mappings":"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","names":["parseGap","parsePadding","getGlobalClassNames","nameMap","start","end","GlobalClassNames","root","inner","styles","props","theme","tokens","horizontal","reversed","grow","wrap","horizontalAlign","verticalAlign","disableShrink","className","classNames","childrenGap","gap","maxHeight","maxWidth","padding","rowGap","columnGap","horizontalMargin","value","unit","verticalMargin","childStyles","textOverflow","commonSelectors","flexShrink","flexWrap","width","overflow","height","_a","_b","display","verticalFill","marginLeft","marginRight","marginTop","marginBottom","boxSizing","selectors","margin","_c","_d","flexDirection","flexGrow","_f","_g"],"sources":["/Users/edward/Zhuo/NYU/FA22/design_project/project/node_modules/@fluentui/react/lib/components/src/components/Stack/Stack.styles.ts"],"sourcesContent":["import { parseGap, parsePadding } from './StackUtils';\nimport { getGlobalClassNames } from '../../Styling';\nimport type { IStackComponent, IStackStyles, IStackStylesReturnType } from './Stack.types';\n\nconst nameMap: { [key: string]: string } = {\n  start: 'flex-start',\n  end: 'flex-end',\n};\n\nconst GlobalClassNames = {\n  root: 'ms-Stack',\n  inner: 'ms-Stack-inner',\n};\n\nexport const styles: IStackComponent['styles'] = (props, theme, tokens): IStackStylesReturnType => {\n  const {\n    verticalFill,\n    horizontal,\n    reversed,\n    grow,\n    wrap,\n    horizontalAlign,\n    verticalAlign,\n    disableShrink,\n    className,\n  } = props;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  /* eslint-disable deprecation/deprecation */\n  const childrenGap = tokens && tokens.childrenGap ? tokens.childrenGap : props.gap;\n  const maxHeight = tokens && tokens.maxHeight ? tokens.maxHeight : props.maxHeight;\n  const maxWidth = tokens && tokens.maxWidth ? tokens.maxWidth : props.maxWidth;\n  const padding = tokens && tokens.padding ? tokens.padding : props.padding;\n  /* eslint-enable deprecation/deprecation */\n\n  const { rowGap, columnGap } = parseGap(childrenGap, theme);\n\n  const horizontalMargin = `${-0.5 * columnGap.value}${columnGap.unit}`;\n  const verticalMargin = `${-0.5 * rowGap.value}${rowGap.unit}`;\n\n  // styles to be applied to all direct children regardless of wrap or direction\n  const childStyles = {\n    textOverflow: 'ellipsis',\n  };\n\n  // selectors to be applied regardless of wrap or direction\n  const commonSelectors = {\n    // flexShrink styles are applied by the StackItem\n    '> *:not(.ms-StackItem)': {\n      flexShrink: disableShrink ? 0 : 1,\n    },\n  };\n\n  if (wrap) {\n    return {\n      root: [\n        classNames.root,\n        {\n          flexWrap: 'wrap',\n          maxWidth,\n          maxHeight,\n          width: 'auto',\n          overflow: 'visible',\n          height: '100%',\n        },\n        horizontalAlign && {\n          [horizontal ? 'justifyContent' : 'alignItems']: nameMap[horizontalAlign] || horizontalAlign,\n        },\n        verticalAlign && {\n          [horizontal ? 'alignItems' : 'justifyContent']: nameMap[verticalAlign] || verticalAlign,\n        },\n        className,\n        {\n          // not allowed to be overridden by className\n          // since this is necessary in order to prevent collapsing margins\n          display: 'flex',\n        },\n        horizontal && {\n          height: verticalFill ? '100%' : 'auto',\n        },\n      ],\n\n      inner: [\n        classNames.inner,\n        {\n          display: 'flex',\n          flexWrap: 'wrap',\n          marginLeft: horizontalMargin,\n          marginRight: horizontalMargin,\n          marginTop: verticalMargin,\n          marginBottom: verticalMargin,\n          overflow: 'visible',\n          boxSizing: 'border-box',\n          padding: parsePadding(padding, theme),\n          // avoid unnecessary calc() calls if horizontal gap is 0\n          width: columnGap.value === 0 ? '100%' : `calc(100% + ${columnGap.value}${columnGap.unit})`,\n          maxWidth: '100vw',\n\n          selectors: {\n            '> *': {\n              margin: `${0.5 * rowGap.value}${rowGap.unit} ${0.5 * columnGap.value}${columnGap.unit}`,\n\n              ...childStyles,\n            },\n            ...commonSelectors,\n          },\n        },\n        horizontalAlign && {\n          [horizontal ? 'justifyContent' : 'alignItems']: nameMap[horizontalAlign] || horizontalAlign,\n        },\n        verticalAlign && {\n          [horizontal ? 'alignItems' : 'justifyContent']: nameMap[verticalAlign] || verticalAlign,\n        },\n        horizontal && {\n          flexDirection: reversed ? 'row-reverse' : 'row',\n\n          // avoid unnecessary calc() calls if vertical gap is 0\n          height: rowGap.value === 0 ? '100%' : `calc(100% + ${rowGap.value}${rowGap.unit})`,\n\n          selectors: {\n            '> *': {\n              maxWidth: columnGap.value === 0 ? '100%' : `calc(100% - ${columnGap.value}${columnGap.unit})`,\n            },\n          },\n        },\n        !horizontal && {\n          flexDirection: reversed ? 'column-reverse' : 'column',\n          height: `calc(100% + ${rowGap.value}${rowGap.unit})`,\n\n          selectors: {\n            '> *': {\n              maxHeight: rowGap.value === 0 ? '100%' : `calc(100% - ${rowGap.value}${rowGap.unit})`,\n            },\n          },\n        },\n      ],\n    } as IStackStyles;\n  }\n\n  return {\n    root: [\n      classNames.root,\n      {\n        display: 'flex',\n        flexDirection: horizontal ? (reversed ? 'row-reverse' : 'row') : reversed ? 'column-reverse' : 'column',\n        flexWrap: 'nowrap',\n        width: 'auto',\n        height: verticalFill ? '100%' : 'auto',\n        maxWidth,\n        maxHeight,\n        padding: parsePadding(padding, theme),\n        boxSizing: 'border-box',\n\n        selectors: {\n          '> *': childStyles,\n\n          // apply gap margin to every direct child except the first direct child if the direction is not reversed,\n          // and the last direct one if it is\n          [reversed ? '> *:not(:last-child)' : '> *:not(:first-child)']: [\n            horizontal && {\n              marginLeft: `${columnGap.value}${columnGap.unit}`,\n            },\n            !horizontal && {\n              marginTop: `${rowGap.value}${rowGap.unit}`,\n            },\n          ],\n\n          ...commonSelectors,\n        },\n      },\n      grow && {\n        flexGrow: grow === true ? 1 : grow,\n      },\n      horizontalAlign && {\n        [horizontal ? 'justifyContent' : 'alignItems']: nameMap[horizontalAlign] || horizontalAlign,\n      },\n      verticalAlign && {\n        [horizontal ? 'alignItems' : 'justifyContent']: nameMap[verticalAlign] || verticalAlign,\n      },\n      className,\n    ],\n    // TODO: this cast may be hiding some potential issues with styling and name\n    //        lookups and should be removed\n  } as IStackStyles;\n};\n"]},"metadata":{},"sourceType":"module"}