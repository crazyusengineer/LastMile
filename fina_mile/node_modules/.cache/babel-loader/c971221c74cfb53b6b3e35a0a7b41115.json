{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { GlobalSettings } from '../GlobalSettings';\nvar CustomizationsGlobalKey = 'customizations';\nvar NO_CUSTOMIZATIONS = {\n  settings: {},\n  scopedSettings: {},\n  inCustomizerContext: false\n};\nvar _allSettings = GlobalSettings.getValue(CustomizationsGlobalKey, {\n  settings: {},\n  scopedSettings: {},\n  inCustomizerContext: false\n});\nvar _events = [];\nvar Customizations = /** @class */function () {\n  function Customizations() {}\n  Customizations.reset = function () {\n    _allSettings.settings = {};\n    _allSettings.scopedSettings = {};\n  };\n  /** Apply global Customization settings.\n   * @example Customizations.applySettings(\\{ theme: \\{...\\} \\});\n   */\n  Customizations.applySettings = function (settings) {\n    _allSettings.settings = __assign(__assign({}, _allSettings.settings), settings);\n    Customizations._raiseChange();\n  };\n  /** Apply Customizations to a particular named scope, like a component.\n   * @example Customizations.applyScopedSettings('Nav', \\{ styles: () =\\> \\{\\} \\});\n   */\n  Customizations.applyScopedSettings = function (scopeName, settings) {\n    _allSettings.scopedSettings[scopeName] = __assign(__assign({}, _allSettings.scopedSettings[scopeName]), settings);\n    Customizations._raiseChange();\n  };\n  Customizations.getSettings = function (properties, scopeName, localSettings) {\n    if (localSettings === void 0) {\n      localSettings = NO_CUSTOMIZATIONS;\n    }\n    var settings = {};\n    var localScopedSettings = scopeName && localSettings.scopedSettings[scopeName] || {};\n    var globalScopedSettings = scopeName && _allSettings.scopedSettings[scopeName] || {};\n    for (var _i = 0, properties_1 = properties; _i < properties_1.length; _i++) {\n      var property = properties_1[_i];\n      settings[property] = localScopedSettings[property] || localSettings.settings[property] || globalScopedSettings[property] || _allSettings.settings[property];\n    }\n    return settings;\n  };\n  /** Used to run some code that sets Customizations without triggering an update until the end.\n   * Useful for applying Customizations that don't affect anything currently rendered, or for\n   * applying many customizations at once.\n   * @param suppressUpdate - Do not raise the change event at the end, preventing all updates\n   */\n  Customizations.applyBatchedUpdates = function (code, suppressUpdate) {\n    Customizations._suppressUpdates = true;\n    try {\n      code();\n    } catch (_a) {\n      /* do nothing */\n    }\n    Customizations._suppressUpdates = false;\n    if (!suppressUpdate) {\n      Customizations._raiseChange();\n    }\n  };\n  Customizations.observe = function (onChange) {\n    _events.push(onChange);\n  };\n  Customizations.unobserve = function (onChange) {\n    _events = _events.filter(function (cb) {\n      return cb !== onChange;\n    });\n  };\n  Customizations._raiseChange = function () {\n    if (!Customizations._suppressUpdates) {\n      _events.forEach(function (cb) {\n        return cb();\n      });\n    }\n  };\n  return Customizations;\n}();\nexport { Customizations };","map":{"version":3,"mappings":";AAAA,SAASA,cAAc,QAAQ,mBAAmB;AAsBlD,IAAMC,uBAAuB,GAAG,gBAAgB;AAChD,IAAMC,iBAAiB,GAAG;EAAEC,QAAQ,EAAE,EAAE;EAAEC,cAAc,EAAE,EAAE;EAAEC,mBAAmB,EAAE;AAAK,CAAE;AAE1F,IAAIC,YAAY,GAAGN,cAAc,CAACO,QAAQ,CAAkBN,uBAAuB,EAAE;EACnFE,QAAQ,EAAE,EAAE;EACZC,cAAc,EAAE,EAAE;EAClBC,mBAAmB,EAAE;CACtB,CAAC;AAEF,IAAIG,OAAO,GAAmB,EAAE;AAEhC;EAAA,2BA4EA;EAzEgBC,oBAAK,GAAnB;IACEH,YAAY,CAACH,QAAQ,GAAG,EAAE;IAC1BG,YAAY,CAACF,cAAc,GAAG,EAAE;EAClC,CAAC;EAED;;;EAGcK,4BAAa,GAA3B,UAA4BN,QAAmB;IAC7CG,YAAY,CAACH,QAAQ,yBAAQG,YAAY,CAACH,QAAQ,GAAKA,QAAQ,CAAE;IACjEM,cAAc,CAACC,YAAY,EAAE;EAC/B,CAAC;EAED;;;EAGcD,kCAAmB,GAAjC,UAAkCE,SAAiB,EAAER,QAAmB;IACtEG,YAAY,CAACF,cAAc,CAACO,SAAS,CAAC,yBAAQL,YAAY,CAACF,cAAc,CAACO,SAAS,CAAC,GAAKR,QAAQ,CAAE;IACnGM,cAAc,CAACC,YAAY,EAAE;EAC/B,CAAC;EAEaD,0BAAW,GAAzB,UACEG,UAAoB,EACpBD,SAAkB,EAClBE,aAAkD;IAAlD;MAAAA,iCAAkD;IAAA;IAGlD,IAAMV,QAAQ,GAAc,EAAE;IAC9B,IAAMW,mBAAmB,GAAIH,SAAS,IAAIE,aAAa,CAACT,cAAc,CAACO,SAAS,CAAC,IAAK,EAAE;IACxF,IAAMI,oBAAoB,GAAIJ,SAAS,IAAIL,YAAY,CAACF,cAAc,CAACO,SAAS,CAAC,IAAK,EAAE;IAExF,KAAqB,UAAU,EAAVK,yBAAU,EAAVC,wBAAU,EAAVA,IAAU,EAAE;MAA5B,IAAIC,QAAQ;MACff,QAAQ,CAACe,QAAQ,CAAC,GAChBJ,mBAAmB,CAACI,QAAQ,CAAC,IAC7BL,aAAa,CAACV,QAAQ,CAACe,QAAQ,CAAC,IAChCH,oBAAoB,CAACG,QAAQ,CAAC,IAC9BZ,YAAY,CAACH,QAAQ,CAACe,QAAQ,CAAC;;IAGnC,OAAOf,QAAQ;EACjB,CAAC;EAED;;;;;EAKcM,kCAAmB,GAAjC,UAAkCU,IAAgB,EAAEC,cAAwB;IAC1EX,cAAc,CAACY,gBAAgB,GAAG,IAAI;IACtC,IAAI;MACFF,IAAI,EAAE;KACP,CAAC,WAAM;MACN;;IAEFV,cAAc,CAACY,gBAAgB,GAAG,KAAK;IACvC,IAAI,CAACD,cAAc,EAAE;MACnBX,cAAc,CAACC,YAAY,EAAE;;EAEjC,CAAC;EAEaD,sBAAO,GAArB,UAAsBa,QAAoB;IACxCd,OAAO,CAACe,IAAI,CAACD,QAAQ,CAAC;EACxB,CAAC;EAEab,wBAAS,GAAvB,UAAwBa,QAAoB;IAC1Cd,OAAO,GAAGA,OAAO,CAACgB,MAAM,CAAC,UAACC,EAAc;MAAK,SAAE,KAAKH,QAAQ;IAAf,CAAe,CAAC;EAC/D,CAAC;EAEcb,2BAAY,GAA3B;IACE,IAAI,CAACA,cAAc,CAACY,gBAAgB,EAAE;MACpCb,OAAO,CAACkB,OAAO,CAAC,UAACD,EAAc;QAAK,SAAE,EAAE;MAAJ,CAAI,CAAC;;EAE7C,CAAC;EACH,qBAAC;AAAD,CAAC,EA5ED","names":["GlobalSettings","CustomizationsGlobalKey","NO_CUSTOMIZATIONS","settings","scopedSettings","inCustomizerContext","_allSettings","getValue","_events","Customizations","_raiseChange","scopeName","properties","localSettings","localScopedSettings","globalScopedSettings","properties_1","_i","property","code","suppressUpdate","_suppressUpdates","onChange","push","filter","cb","forEach"],"sources":["/Users/edward/Zhuo/NYU/FA22/design_project/project/node_modules/@fluentui/react/node_modules/@fluentui/utilities/lib/src/customizations/Customizations.ts"],"sourcesContent":["import { GlobalSettings } from '../GlobalSettings';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type ISettings = { [key: string]: any };\nexport type ISettingsFunction = (settings: ISettings) => ISettings;\n\n/**\n * @deprecated Use ISettings.\n */\nexport type Settings = ISettings;\n\n/**\n * @deprecated Use ISettingsFunction.\n */\nexport type SettingsFunction = ISettingsFunction;\n\nexport interface ICustomizations {\n  settings: ISettings;\n  scopedSettings: { [key: string]: ISettings };\n  inCustomizerContext?: boolean;\n}\n\nconst CustomizationsGlobalKey = 'customizations';\nconst NO_CUSTOMIZATIONS = { settings: {}, scopedSettings: {}, inCustomizerContext: false };\n\nlet _allSettings = GlobalSettings.getValue<ICustomizations>(CustomizationsGlobalKey, {\n  settings: {},\n  scopedSettings: {},\n  inCustomizerContext: false,\n});\n\nlet _events: (() => void)[] = [];\n\nexport class Customizations {\n  private static _suppressUpdates: boolean;\n\n  public static reset(): void {\n    _allSettings.settings = {};\n    _allSettings.scopedSettings = {};\n  }\n\n  /** Apply global Customization settings.\n   * @example Customizations.applySettings(\\{ theme: \\{...\\} \\});\n   */\n  public static applySettings(settings: ISettings): void {\n    _allSettings.settings = { ..._allSettings.settings, ...settings };\n    Customizations._raiseChange();\n  }\n\n  /** Apply Customizations to a particular named scope, like a component.\n   * @example Customizations.applyScopedSettings('Nav', \\{ styles: () =\\> \\{\\} \\});\n   */\n  public static applyScopedSettings(scopeName: string, settings: ISettings): void {\n    _allSettings.scopedSettings[scopeName] = { ..._allSettings.scopedSettings[scopeName], ...settings };\n    Customizations._raiseChange();\n  }\n\n  public static getSettings(\n    properties: string[],\n    scopeName?: string,\n    localSettings: ICustomizations = NO_CUSTOMIZATIONS,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): any {\n    const settings: ISettings = {};\n    const localScopedSettings = (scopeName && localSettings.scopedSettings[scopeName]) || {};\n    const globalScopedSettings = (scopeName && _allSettings.scopedSettings[scopeName]) || {};\n\n    for (let property of properties) {\n      settings[property] =\n        localScopedSettings[property] ||\n        localSettings.settings[property] ||\n        globalScopedSettings[property] ||\n        _allSettings.settings[property];\n    }\n\n    return settings;\n  }\n\n  /** Used to run some code that sets Customizations without triggering an update until the end.\n   * Useful for applying Customizations that don't affect anything currently rendered, or for\n   * applying many customizations at once.\n   * @param suppressUpdate - Do not raise the change event at the end, preventing all updates\n   */\n  public static applyBatchedUpdates(code: () => void, suppressUpdate?: boolean): void {\n    Customizations._suppressUpdates = true;\n    try {\n      code();\n    } catch {\n      /* do nothing */\n    }\n    Customizations._suppressUpdates = false;\n    if (!suppressUpdate) {\n      Customizations._raiseChange();\n    }\n  }\n\n  public static observe(onChange: () => void): void {\n    _events.push(onChange);\n  }\n\n  public static unobserve(onChange: () => void): void {\n    _events = _events.filter((cb: () => void) => cb !== onChange);\n  }\n\n  private static _raiseChange(): void {\n    if (!Customizations._suppressUpdates) {\n      _events.forEach((cb: () => void) => cb());\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}