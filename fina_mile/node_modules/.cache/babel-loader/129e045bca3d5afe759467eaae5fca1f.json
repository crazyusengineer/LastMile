{"ast":null,"code":"import { mergeSettings, mergeScopedSettings } from './mergeSettings';\n/**\n * Merge props and customizations giving priority to props over context.\n * NOTE: This function will always perform multiple merge operations. Use with caution.\n * @param props - New settings to merge in.\n * @param parentContext - Context containing current settings.\n * @returns Merged customizations.\n */\nexport function mergeCustomizations(props, parentContext) {\n  var _a = (parentContext || {}).customizations,\n    customizations = _a === void 0 ? {\n      settings: {},\n      scopedSettings: {}\n    } : _a;\n  return {\n    customizations: {\n      settings: mergeSettings(customizations.settings, props.settings),\n      scopedSettings: mergeScopedSettings(customizations.scopedSettings, props.scopedSettings),\n      inCustomizerContext: true\n    }\n  };\n}","map":{"version":3,"mappings":"AAAA,SAASA,aAAa,EAAEC,mBAAmB,QAAQ,iBAAiB;AAIpE;;;;;;;AAOA,OAAM,SAAUC,mBAAmB,CAACC,KAAuB,EAAEC,aAAiC;EACpF,SAA0D,cAAa,IAAI,EAAE,gBAAxB;IAArDC,cAAc,mBAAG;MAAEC,QAAQ,EAAE,EAAE;MAAEC,cAAc,EAAE;IAAE,CAAE;EAE7D,OAAO;IACLF,cAAc,EAAE;MACdC,QAAQ,EAAEN,aAAa,CAACK,cAAc,CAACC,QAAQ,EAAEH,KAAK,CAACG,QAAQ,CAAC;MAChEC,cAAc,EAAEN,mBAAmB,CAACI,cAAc,CAACE,cAAc,EAAEJ,KAAK,CAACI,cAAc,CAAC;MACxFC,mBAAmB,EAAE;;GAExB;AACH","names":["mergeSettings","mergeScopedSettings","mergeCustomizations","props","parentContext","customizations","settings","scopedSettings","inCustomizerContext"],"sources":["/Users/edward/Zhuo/NYU/FA22/design_project/project/node_modules/@fluentui/style-utilities/node_modules/@fluentui/utilities/lib/src/customizations/mergeCustomizations.ts"],"sourcesContent":["import { mergeSettings, mergeScopedSettings } from './mergeSettings';\nimport type { ICustomizerProps } from './Customizer.types';\nimport type { ICustomizerContext } from './CustomizerContext';\n\n/**\n * Merge props and customizations giving priority to props over context.\n * NOTE: This function will always perform multiple merge operations. Use with caution.\n * @param props - New settings to merge in.\n * @param parentContext - Context containing current settings.\n * @returns Merged customizations.\n */\nexport function mergeCustomizations(props: ICustomizerProps, parentContext: ICustomizerContext): ICustomizerContext {\n  const { customizations = { settings: {}, scopedSettings: {} } } = parentContext || {};\n\n  return {\n    customizations: {\n      settings: mergeSettings(customizations.settings, props.settings),\n      scopedSettings: mergeScopedSettings(customizations.scopedSettings, props.scopedSettings),\n      inCustomizerContext: true,\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}