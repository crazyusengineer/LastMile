{"ast":null,"code":"import * as React from 'react';\nimport { useConst } from './useConst';\n/**\n * Hook to store a value and generate callbacks for setting the value to true or false.\n * The identity of the callbacks will always stay the same.\n *\n * @param initialState - Initial value\n * @returns Array with the current value and an object containing the updater callbacks.\n */\nexport function useBoolean(initialState) {\n  var _a = React.useState(initialState),\n    value = _a[0],\n    setValue = _a[1];\n  var setTrue = useConst(function () {\n    return function () {\n      setValue(true);\n    };\n  });\n  var setFalse = useConst(function () {\n    return function () {\n      setValue(false);\n    };\n  });\n  var toggle = useConst(function () {\n    return function () {\n      setValue(function (currentValue) {\n        return !currentValue;\n      });\n    };\n  });\n  return [value, {\n    setTrue: setTrue,\n    setFalse: setFalse,\n    toggle: toggle\n  }];\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,QAAQ,QAAQ,YAAY;AAYrC;;;;;;;AAOA,OAAM,SAAUC,UAAU,CAACC,YAAqB;EACxC,SAAoBH,KAAK,CAACI,QAAQ,CAACD,YAAY,CAAC;IAA/CE,KAAK;IAAEC,QAAQ,QAAgC;EAEtD,IAAMC,OAAO,GAAGN,QAAQ,CAAC;IAAM;MAC7BK,QAAQ,CAAC,IAAI,CAAC;IAChB,CAAC;EAF8B,CAE9B,CAAC;EACF,IAAME,QAAQ,GAAGP,QAAQ,CAAC;IAAM;MAC9BK,QAAQ,CAAC,KAAK,CAAC;IACjB,CAAC;EAF+B,CAE/B,CAAC;EACF,IAAMG,MAAM,GAAGR,QAAQ,CAAC;IAAM;MAC5BK,QAAQ,CAAC,sBAAY;QAAI,QAACI,YAAY;MAAb,CAAa,CAAC;IACzC,CAAC;EAF6B,CAE7B,CAAC;EAEF,OAAO,CAACL,KAAK,EAAE;IAAEE,OAAO;IAAEC,QAAQ;IAAEC,MAAM;EAAA,CAAE,CAAC;AAC/C","names":["React","useConst","useBoolean","initialState","useState","value","setValue","setTrue","setFalse","toggle","currentValue"],"sources":["/Users/edward/Zhuo/NYU/FA22/design_project/project/node_modules/@fluentui/react/node_modules/@fluentui/react-hooks/src/useBoolean.ts"],"sourcesContent":["import * as React from 'react';\nimport { useConst } from './useConst';\n\n/** Updater callbacks returned by `useBoolean`. */\nexport interface IUseBooleanCallbacks {\n  /** Set the value to true. Always has the same identity. */\n  setTrue: () => void;\n  /** Set the value to false. Always has the same identity. */\n  setFalse: () => void;\n  /** Toggle the value. Always has the same identity. */\n  toggle: () => void;\n}\n\n/**\n * Hook to store a value and generate callbacks for setting the value to true or false.\n * The identity of the callbacks will always stay the same.\n *\n * @param initialState - Initial value\n * @returns Array with the current value and an object containing the updater callbacks.\n */\nexport function useBoolean(initialState: boolean): [boolean, IUseBooleanCallbacks] {\n  const [value, setValue] = React.useState(initialState);\n\n  const setTrue = useConst(() => () => {\n    setValue(true);\n  });\n  const setFalse = useConst(() => () => {\n    setValue(false);\n  });\n  const toggle = useConst(() => () => {\n    setValue(currentValue => !currentValue);\n  });\n\n  return [value, { setTrue, setFalse, toggle }];\n}\n"]},"metadata":{},"sourceType":"module"}