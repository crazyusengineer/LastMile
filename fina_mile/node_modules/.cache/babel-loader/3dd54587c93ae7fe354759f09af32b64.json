{"ast":null,"code":"import { fontFace } from '@fluentui/merge-styles';\nimport { FontWeights, LocalizedFontFamilies, LocalizedFontNames } from './FluentFonts';\nimport { createFontStyles } from './createFontStyles';\nimport { getLanguage, getWindow } from '@fluentui/utilities';\n// Default urls.\nvar DefaultBaseUrl = 'https://static2.sharepointonline.com/files/fabric/assets';\n// Standard font styling.\nexport var DefaultFontStyles = createFontStyles(getLanguage());\nfunction _registerFontFace(fontFamily, url, fontWeight, localFontName) {\n  fontFamily = \"'\" + fontFamily + \"'\";\n  var localFontSrc = localFontName !== undefined ? \"local('\" + localFontName + \"'),\" : '';\n  fontFace({\n    fontFamily: fontFamily,\n    src: localFontSrc + (\"url('\" + url + \".woff2') format('woff2'),\") + (\"url('\" + url + \".woff') format('woff')\"),\n    fontWeight: fontWeight,\n    fontStyle: 'normal',\n    fontDisplay: 'swap'\n  });\n}\nfunction _registerFontFaceSet(baseUrl, fontFamily, cdnFolder, cdnFontName, localFontName) {\n  if (cdnFontName === void 0) {\n    cdnFontName = 'segoeui';\n  }\n  var urlBase = baseUrl + \"/\" + cdnFolder + \"/\" + cdnFontName;\n  _registerFontFace(fontFamily, urlBase + '-light', FontWeights.light, localFontName && localFontName + ' Light');\n  _registerFontFace(fontFamily, urlBase + '-semilight', FontWeights.semilight, localFontName && localFontName + ' SemiLight');\n  _registerFontFace(fontFamily, urlBase + '-regular', FontWeights.regular, localFontName);\n  _registerFontFace(fontFamily, urlBase + '-semibold', FontWeights.semibold, localFontName && localFontName + ' SemiBold');\n  _registerFontFace(fontFamily, urlBase + '-bold', FontWeights.bold, localFontName && localFontName + ' Bold');\n}\nexport function registerDefaultFontFaces(baseUrl) {\n  if (baseUrl) {\n    var fontUrl = baseUrl + \"/fonts\";\n    // Produce @font-face definitions for all supported web fonts.\n    _registerFontFaceSet(fontUrl, LocalizedFontNames.Thai, 'leelawadeeui-thai', 'leelawadeeui');\n    _registerFontFaceSet(fontUrl, LocalizedFontNames.Arabic, 'segoeui-arabic');\n    _registerFontFaceSet(fontUrl, LocalizedFontNames.Cyrillic, 'segoeui-cyrillic');\n    _registerFontFaceSet(fontUrl, LocalizedFontNames.EastEuropean, 'segoeui-easteuropean');\n    _registerFontFaceSet(fontUrl, LocalizedFontNames.Greek, 'segoeui-greek');\n    _registerFontFaceSet(fontUrl, LocalizedFontNames.Hebrew, 'segoeui-hebrew');\n    _registerFontFaceSet(fontUrl, LocalizedFontNames.Vietnamese, 'segoeui-vietnamese');\n    _registerFontFaceSet(fontUrl, LocalizedFontNames.WestEuropean, 'segoeui-westeuropean', 'segoeui', 'Segoe UI');\n    _registerFontFaceSet(fontUrl, LocalizedFontFamilies.Selawik, 'selawik', 'selawik');\n    _registerFontFaceSet(fontUrl, LocalizedFontNames.Armenian, 'segoeui-armenian');\n    _registerFontFaceSet(fontUrl, LocalizedFontNames.Georgian, 'segoeui-georgian');\n    // Leelawadee UI (Thai) does not have a 'light' weight, so we override\n    // the font-face generated above to use the 'semilight' weight instead.\n    _registerFontFace('Leelawadee UI Web', fontUrl + \"/leelawadeeui-thai/leelawadeeui-semilight\", FontWeights.light);\n    // Leelawadee UI (Thai) does not have a 'semibold' weight, so we override\n    // the font-face generated above to use the 'bold' weight instead.\n    _registerFontFace('Leelawadee UI Web', fontUrl + \"/leelawadeeui-thai/leelawadeeui-bold\", FontWeights.semibold);\n  }\n}\n/**\n * Reads the fontBaseUrl from window.FabricConfig.fontBaseUrl or falls back to a default.\n */\nfunction _getFontBaseUrl() {\n  var _a, _b;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  var fabricConfig = (_a = getWindow()) === null || _a === void 0 ? void 0 : _a.FabricConfig;\n  return (_b = fabricConfig === null || fabricConfig === void 0 ? void 0 : fabricConfig.fontBaseUrl) !== null && _b !== void 0 ? _b : DefaultBaseUrl;\n}\n/**\n * Register the font faces.\n */\nregisterDefaultFontFaces(_getFontBaseUrl());","map":{"version":3,"mappings":"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","names":["fontFace","FontWeights","LocalizedFontFamilies","LocalizedFontNames","createFontStyles","getLanguage","getWindow","DefaultBaseUrl","DefaultFontStyles","_registerFontFace","fontFamily","url","fontWeight","localFontName","localFontSrc","undefined","src","fontStyle","fontDisplay","_registerFontFaceSet","baseUrl","cdnFolder","cdnFontName","urlBase","light","semilight","regular","semibold","bold","registerDefaultFontFaces","fontUrl","Thai","Arabic","Cyrillic","EastEuropean","Greek","Hebrew","Vietnamese","WestEuropean","Selawik","Armenian","Georgian","_getFontBaseUrl","fabricConfig","FabricConfig","fontBaseUrl"],"sources":["/Users/edward/Zhuo/NYU/FA22/design_project/project/node_modules/@fluentui/style-utilities/node_modules/@fluentui/theme/lib/src/fonts/DefaultFontStyles.ts"],"sourcesContent":["import { fontFace } from '@fluentui/merge-styles';\nimport { FontWeights, LocalizedFontFamilies, LocalizedFontNames } from './FluentFonts';\nimport { createFontStyles } from './createFontStyles';\nimport { getLanguage, getWindow } from '@fluentui/utilities';\nimport type { IFontWeight } from '@fluentui/merge-styles';\nimport type { IFontStyles } from '../types/IFontStyles';\nimport type { IFabricConfig } from '../types/IFabricConfig';\n\n// Default urls.\nconst DefaultBaseUrl = 'https://static2.sharepointonline.com/files/fabric/assets';\n\n// Standard font styling.\nexport const DefaultFontStyles: IFontStyles = createFontStyles(getLanguage());\n\nfunction _registerFontFace(fontFamily: string, url: string, fontWeight?: IFontWeight, localFontName?: string): void {\n  fontFamily = `'${fontFamily}'`;\n\n  const localFontSrc = localFontName !== undefined ? `local('${localFontName}'),` : '';\n\n  fontFace({\n    fontFamily,\n    src: localFontSrc + `url('${url}.woff2') format('woff2'),` + `url('${url}.woff') format('woff')`,\n    fontWeight,\n    fontStyle: 'normal',\n    fontDisplay: 'swap',\n  });\n}\n\nfunction _registerFontFaceSet(\n  baseUrl: string,\n  fontFamily: string,\n  cdnFolder: string,\n  cdnFontName: string = 'segoeui',\n  localFontName?: string,\n): void {\n  const urlBase = `${baseUrl}/${cdnFolder}/${cdnFontName}`;\n\n  _registerFontFace(fontFamily, urlBase + '-light', FontWeights.light, localFontName && localFontName + ' Light');\n  _registerFontFace(\n    fontFamily,\n    urlBase + '-semilight',\n    FontWeights.semilight,\n    localFontName && localFontName + ' SemiLight',\n  );\n  _registerFontFace(fontFamily, urlBase + '-regular', FontWeights.regular, localFontName);\n  _registerFontFace(\n    fontFamily,\n    urlBase + '-semibold',\n    FontWeights.semibold,\n    localFontName && localFontName + ' SemiBold',\n  );\n  _registerFontFace(fontFamily, urlBase + '-bold', FontWeights.bold, localFontName && localFontName + ' Bold');\n}\n\nexport function registerDefaultFontFaces(baseUrl: string): void {\n  if (baseUrl) {\n    const fontUrl = `${baseUrl}/fonts`;\n\n    // Produce @font-face definitions for all supported web fonts.\n    _registerFontFaceSet(fontUrl, LocalizedFontNames.Thai, 'leelawadeeui-thai', 'leelawadeeui');\n    _registerFontFaceSet(fontUrl, LocalizedFontNames.Arabic, 'segoeui-arabic');\n    _registerFontFaceSet(fontUrl, LocalizedFontNames.Cyrillic, 'segoeui-cyrillic');\n    _registerFontFaceSet(fontUrl, LocalizedFontNames.EastEuropean, 'segoeui-easteuropean');\n    _registerFontFaceSet(fontUrl, LocalizedFontNames.Greek, 'segoeui-greek');\n    _registerFontFaceSet(fontUrl, LocalizedFontNames.Hebrew, 'segoeui-hebrew');\n    _registerFontFaceSet(fontUrl, LocalizedFontNames.Vietnamese, 'segoeui-vietnamese');\n    _registerFontFaceSet(fontUrl, LocalizedFontNames.WestEuropean, 'segoeui-westeuropean', 'segoeui', 'Segoe UI');\n    _registerFontFaceSet(fontUrl, LocalizedFontFamilies.Selawik, 'selawik', 'selawik');\n    _registerFontFaceSet(fontUrl, LocalizedFontNames.Armenian, 'segoeui-armenian');\n    _registerFontFaceSet(fontUrl, LocalizedFontNames.Georgian, 'segoeui-georgian');\n\n    // Leelawadee UI (Thai) does not have a 'light' weight, so we override\n    // the font-face generated above to use the 'semilight' weight instead.\n    _registerFontFace('Leelawadee UI Web', `${fontUrl}/leelawadeeui-thai/leelawadeeui-semilight`, FontWeights.light);\n\n    // Leelawadee UI (Thai) does not have a 'semibold' weight, so we override\n    // the font-face generated above to use the 'bold' weight instead.\n    _registerFontFace('Leelawadee UI Web', `${fontUrl}/leelawadeeui-thai/leelawadeeui-bold`, FontWeights.semibold);\n  }\n}\n\n/**\n * Reads the fontBaseUrl from window.FabricConfig.fontBaseUrl or falls back to a default.\n */\nfunction _getFontBaseUrl(): string {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const fabricConfig: IFabricConfig | undefined = (getWindow() as any)?.FabricConfig;\n\n  return fabricConfig?.fontBaseUrl ?? DefaultBaseUrl;\n}\n\n/**\n * Register the font faces.\n */\nregisterDefaultFontFaces(_getFontBaseUrl());\n"]},"metadata":{},"sourceType":"module"}