{"ast":null,"code":"import { HighContrastSelector } from './CommonStyles';\nimport { IsFocusVisibleClassName } from '@fluentui/utilities';\nimport { ZIndexes } from './zIndexes';\nexport function getFocusStyle(theme, insetOrOptions, position, highContrastStyle, borderColor, outlineColor, isFocusedOnly, borderRadius) {\n  if (typeof insetOrOptions === 'number' || !insetOrOptions) {\n    return _getFocusStyleInternal(theme, {\n      inset: insetOrOptions,\n      position: position,\n      highContrastStyle: highContrastStyle,\n      borderColor: borderColor,\n      outlineColor: outlineColor,\n      isFocusedOnly: isFocusedOnly,\n      borderRadius: borderRadius\n    });\n  } else {\n    return _getFocusStyleInternal(theme, insetOrOptions);\n  }\n}\nfunction _getFocusStyleInternal(theme, options) {\n  var _a, _b;\n  if (options === void 0) {\n    options = {};\n  }\n  var borderRadius = options.borderRadius,\n    _c = options.inset,\n    inset = _c === void 0 ? 0 : _c,\n    _d = options.width,\n    width = _d === void 0 ? 1 : _d,\n    _e = options.position,\n    position = _e === void 0 ? 'relative' : _e,\n    highContrastStyle = options.highContrastStyle,\n    _f = options.borderColor,\n    borderColor = _f === void 0 ? theme.palette.white : _f,\n    _g = options.outlineColor,\n    outlineColor = _g === void 0 ? theme.palette.neutralSecondary : _g,\n    _h = options.isFocusedOnly,\n    isFocusedOnly = _h === void 0 ? true : _h;\n  return {\n    // Clear browser-specific focus styles and use 'transparent' as placeholder for focus style.\n    outline: 'transparent',\n    // Requirement because pseudo-element is absolutely positioned.\n    position: position,\n    selectors: (_a = {\n      // Clear the focus border in Firefox.\n      // Reference: http://stackoverflow.com/a/199319/1436671\n      '::-moz-focus-inner': {\n        border: '0'\n      }\n    },\n    // When the element that uses this mixin is in a :focus state, add a pseudo-element to\n    // create a border.\n    _a[\".\" + IsFocusVisibleClassName + \" &\" + (isFocusedOnly ? ':focus' : '') + \":after\"] = {\n      content: '\"\"',\n      position: 'absolute',\n      left: inset + 1,\n      top: inset + 1,\n      bottom: inset + 1,\n      right: inset + 1,\n      border: width + \"px solid \" + borderColor,\n      outline: width + \"px solid \" + outlineColor,\n      zIndex: ZIndexes.FocusStyle,\n      borderRadius: borderRadius,\n      selectors: (_b = {}, _b[HighContrastSelector] = highContrastStyle, _b)\n    }, _a)\n  };\n}\n/**\n * Generates style to clear browser specific focus styles.\n */\nexport function focusClear() {\n  return {\n    selectors: {\n      '&::-moz-focus-inner': {\n        // Clear the focus border in Firefox. Reference: http://stackoverflow.com/a/199319/1436671\n        border: 0\n      },\n      '&': {\n        // Clear browser specific focus styles and use transparent as placeholder for focus style\n        outline: 'transparent'\n      }\n    }\n  };\n}\n/**\n * Generates a style which can be used to set a border on focus.\n *\n * @param theme - The theme object to use.\n * @param inset - The number of pixels to inset the border (default 0)\n * @param width - The border width in pixels (default 1)\n * @param color - Color of the outline (default `theme.palette.neutralSecondary`)\n * @returns The style object.\n */\nexport function getFocusOutlineStyle(theme, inset, width, color) {\n  var _a;\n  if (inset === void 0) {\n    inset = 0;\n  }\n  if (width === void 0) {\n    width = 1;\n  }\n  return {\n    selectors: (_a = {}, _a[\":global(\" + IsFocusVisibleClassName + \") &:focus\"] = {\n      outline: width + \" solid \" + (color || theme.palette.neutralSecondary),\n      outlineOffset: -inset + \"px\"\n    }, _a)\n  };\n}\n/**\n * Generates text input border styles on focus.\n *\n * @param borderColor - Color of the border.\n * @param borderRadius - Radius of the border.\n * @param borderType - Type of the border.\n * @param borderPosition - Position of the border relative to the input element (default to -1\n * as it's the most common border width of the input element)\n * @returns The style object.\n */\nexport var getInputFocusStyle = function (borderColor, borderRadius, borderType, borderPosition) {\n  var _a, _b, _c;\n  if (borderType === void 0) {\n    borderType = 'border';\n  }\n  if (borderPosition === void 0) {\n    borderPosition = -1;\n  }\n  var isBorderBottom = borderType === 'borderBottom';\n  return {\n    borderColor: borderColor,\n    selectors: {\n      ':after': (_a = {\n        pointerEvents: 'none',\n        content: \"''\",\n        position: 'absolute',\n        left: isBorderBottom ? 0 : borderPosition,\n        top: borderPosition,\n        bottom: borderPosition,\n        right: isBorderBottom ? 0 : borderPosition\n      }, _a[borderType] = \"2px solid \" + borderColor, _a.borderRadius = borderRadius, _a.width = borderType === 'borderBottom' ? '100%' : undefined, _a.selectors = (_b = {}, _b[HighContrastSelector] = (_c = {}, _c[borderType === 'border' ? 'borderColor' : 'borderBottomColor'] = 'Highlight', _c), _b), _a)\n    }\n  };\n};","map":{"version":3,"mappings":"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","names":["HighContrastSelector","IsFocusVisibleClassName","ZIndexes","getFocusStyle","theme","insetOrOptions","position","highContrastStyle","borderColor","outlineColor","isFocusedOnly","borderRadius","_getFocusStyleInternal","inset","options","_c","_d","width","_e","_f","palette","white","_g","neutralSecondary","_h","outline","selectors","border","_a","content","left","top","bottom","right","zIndex","FocusStyle","_b","focusClear","getFocusOutlineStyle","color","outlineOffset","getInputFocusStyle","borderType","borderPosition","isBorderBottom","pointerEvents","undefined"],"sources":["/Users/edward/Zhuo/NYU/FA22/design_project/project/node_modules/@fluentui/style-utilities/lib/src/styles/getFocusStyle.ts"],"sourcesContent":["import { HighContrastSelector } from './CommonStyles';\nimport { IsFocusVisibleClassName } from '@fluentui/utilities';\nimport { ZIndexes } from './zIndexes';\nimport type { IRawStyle } from '@fluentui/merge-styles';\nimport type { IGetFocusStylesOptions, ITheme } from '../interfaces/index';\n\n/**\n * Generates a focus style which can be used to define an :after focus border.\n *\n * @param theme - The theme object to use.\n * @param options - Options to customize the focus border.\n * @returns The style object.\n */\nexport function getFocusStyle(theme: ITheme, options?: IGetFocusStylesOptions): IRawStyle;\n/**\n * Generates a focus style which can be used to define an :after focus border.\n *\n * @param theme - The theme object to use.\n * @param inset - The number of pixels to inset the border.\n * @param position - The positioning applied to the container. Must\n * be 'relative' or 'absolute' so that the focus border can live around it.\n * @param highContrastStyle - Style for high contrast mode.\n * @param borderColor - Color of the border.\n * @param outlineColor - Color of the outline.\n * @param isFocusedOnly - If the styles should apply on focus or not.\n * @param borderRadius - If the style should include a rounded border.\n * @returns The style object.\n * @deprecated Use the object parameter version instead.\n */\nexport function getFocusStyle(\n  theme: ITheme,\n  inset?: number,\n  position?: 'relative' | 'absolute',\n  highContrastStyle?: IRawStyle | undefined,\n  borderColor?: string,\n  outlineColor?: string,\n  isFocusedOnly?: boolean,\n  borderRadius?: string | number | undefined,\n): IRawStyle;\nexport function getFocusStyle(\n  theme: ITheme,\n  insetOrOptions?: number | IGetFocusStylesOptions,\n  position?: 'relative' | 'absolute',\n  highContrastStyle?: IRawStyle,\n  borderColor?: string,\n  outlineColor?: string,\n  isFocusedOnly?: boolean,\n  borderRadius?: string | number | undefined,\n): IRawStyle {\n  if (typeof insetOrOptions === 'number' || !insetOrOptions) {\n    return _getFocusStyleInternal(theme, {\n      inset: insetOrOptions,\n      position,\n      highContrastStyle,\n      borderColor,\n      outlineColor,\n      isFocusedOnly,\n      borderRadius,\n    });\n  } else {\n    return _getFocusStyleInternal(theme, insetOrOptions);\n  }\n}\n\nfunction _getFocusStyleInternal(theme: ITheme, options: IGetFocusStylesOptions = {}): IRawStyle {\n  const {\n    borderRadius,\n    inset = 0,\n    width = 1,\n    position = 'relative',\n    highContrastStyle,\n    borderColor = theme.palette.white,\n    outlineColor = theme.palette.neutralSecondary,\n    isFocusedOnly = true,\n  } = options;\n\n  return {\n    // Clear browser-specific focus styles and use 'transparent' as placeholder for focus style.\n    outline: 'transparent',\n    // Requirement because pseudo-element is absolutely positioned.\n    position,\n\n    selectors: {\n      // Clear the focus border in Firefox.\n      // Reference: http://stackoverflow.com/a/199319/1436671\n      '::-moz-focus-inner': {\n        border: '0',\n      },\n\n      // When the element that uses this mixin is in a :focus state, add a pseudo-element to\n      // create a border.\n      [`.${IsFocusVisibleClassName} &${isFocusedOnly ? ':focus' : ''}:after`]: {\n        content: '\"\"',\n        position: 'absolute',\n        left: inset + 1,\n        top: inset + 1,\n        bottom: inset + 1,\n        right: inset + 1,\n        border: `${width}px solid ${borderColor}`,\n        outline: `${width}px solid ${outlineColor}`,\n        zIndex: ZIndexes.FocusStyle,\n        borderRadius: borderRadius,\n        selectors: {\n          [HighContrastSelector]: highContrastStyle,\n        },\n      },\n    },\n  };\n}\n\n/**\n * Generates style to clear browser specific focus styles.\n */\nexport function focusClear(): IRawStyle {\n  return {\n    selectors: {\n      '&::-moz-focus-inner': {\n        // Clear the focus border in Firefox. Reference: http://stackoverflow.com/a/199319/1436671\n        border: 0,\n      },\n      '&': {\n        // Clear browser specific focus styles and use transparent as placeholder for focus style\n        outline: 'transparent',\n      },\n    },\n  };\n}\n\n/**\n * Generates a style which can be used to set a border on focus.\n *\n * @param theme - The theme object to use.\n * @param inset - The number of pixels to inset the border (default 0)\n * @param width - The border width in pixels (default 1)\n * @param color - Color of the outline (default `theme.palette.neutralSecondary`)\n * @returns The style object.\n */\nexport function getFocusOutlineStyle(theme: ITheme, inset: number = 0, width: number = 1, color?: string): IRawStyle {\n  return {\n    selectors: {\n      [`:global(${IsFocusVisibleClassName}) &:focus`]: {\n        outline: `${width} solid ${color || theme.palette.neutralSecondary}`,\n        outlineOffset: `${-inset}px`,\n      },\n    },\n  };\n}\n\n/**\n * Generates text input border styles on focus.\n *\n * @param borderColor - Color of the border.\n * @param borderRadius - Radius of the border.\n * @param borderType - Type of the border.\n * @param borderPosition - Position of the border relative to the input element (default to -1\n * as it's the most common border width of the input element)\n * @returns The style object.\n */\nexport const getInputFocusStyle = (\n  borderColor: string,\n  borderRadius: string | number,\n  borderType: 'border' | 'borderBottom' = 'border',\n  borderPosition: number = -1,\n): IRawStyle => {\n  const isBorderBottom = borderType === 'borderBottom';\n\n  return {\n    borderColor,\n    selectors: {\n      ':after': {\n        pointerEvents: 'none',\n        content: \"''\",\n        position: 'absolute',\n        left: isBorderBottom ? 0 : borderPosition,\n        top: borderPosition,\n        bottom: borderPosition,\n        right: isBorderBottom ? 0 : borderPosition,\n        [borderType]: `2px solid ${borderColor}`,\n        borderRadius,\n        width: borderType === 'borderBottom' ? '100%' : undefined,\n        selectors: {\n          [HighContrastSelector]: {\n            [borderType === 'border' ? 'borderColor' : 'borderBottomColor']: 'Highlight',\n          },\n        },\n      },\n    },\n  };\n};\n"]},"metadata":{},"sourceType":"module"}