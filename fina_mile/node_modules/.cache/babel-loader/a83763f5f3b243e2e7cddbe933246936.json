{"ast":null,"code":"import { getWindow } from './dom/getWindow';\n/**\n * Storing global state in local module variables has issues when more than one copy\n * if the module gets loaded on the page (due to a bundling error or simply by consuming\n * a prebundled script.)\n *\n * This file contains helpers to deal with the getting and setting local state, and allows\n * callers to get called back when it mutates.\n */\nvar GLOBAL_SETTINGS_PROP_NAME = '__globalSettings__';\nvar CALLBACK_STATE_PROP_NAME = '__callbacks__';\nvar _counter = 0;\n/**\n * Global settings helper, which stores settings in the global (window) namespace.\n * If window is not provided, it will store settings in module scope. Provides a\n * way to observe changes as well when their values change.\n *\n * @public\n * {@docCategory GlobalSettings}\n */\nvar GlobalSettings = /** @class */function () {\n  function GlobalSettings() {}\n  GlobalSettings.getValue = function (key, defaultValue) {\n    var globalSettings = _getGlobalSettings();\n    if (globalSettings[key] === undefined) {\n      globalSettings[key] = typeof defaultValue === 'function' ? defaultValue() : defaultValue;\n    }\n    return globalSettings[key];\n  };\n  GlobalSettings.setValue = function (key, value) {\n    var globalSettings = _getGlobalSettings();\n    var callbacks = globalSettings[CALLBACK_STATE_PROP_NAME];\n    var oldValue = globalSettings[key];\n    if (value !== oldValue) {\n      globalSettings[key] = value;\n      var changeDescription = {\n        oldValue: oldValue,\n        value: value,\n        key: key\n      };\n      for (var id in callbacks) {\n        if (callbacks.hasOwnProperty(id)) {\n          callbacks[id](changeDescription);\n        }\n      }\n    }\n    return value;\n  };\n  GlobalSettings.addChangeListener = function (cb) {\n    // Note: we use generated ids on the callbacks to create a map of the callbacks, which optimizes removal.\n    // (It's faster to delete a key than it is to look up the index of an object and splice an array.)\n    var id = cb.__id__;\n    var callbacks = _getCallbacks();\n    if (!id) {\n      id = cb.__id__ = String(_counter++);\n    }\n    callbacks[id] = cb;\n  };\n  GlobalSettings.removeChangeListener = function (cb) {\n    var callbacks = _getCallbacks();\n    delete callbacks[cb.__id__];\n  };\n  return GlobalSettings;\n}();\nexport { GlobalSettings };\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _getGlobalSettings() {\n  var _a;\n  var win = getWindow();\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  var globalObj = win || {};\n  if (!globalObj[GLOBAL_SETTINGS_PROP_NAME]) {\n    globalObj[GLOBAL_SETTINGS_PROP_NAME] = (_a = {}, _a[CALLBACK_STATE_PROP_NAME] = {}, _a);\n  }\n  return globalObj[GLOBAL_SETTINGS_PROP_NAME];\n}\nfunction _getCallbacks() {\n  var globalSettings = _getGlobalSettings();\n  return globalSettings[CALLBACK_STATE_PROP_NAME];\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAS,QAAQ,iBAAiB;AAE3C;;;;;;;;AASA,IAAMC,yBAAyB,GAAG,oBAAoB;AACtD,IAAMC,wBAAwB,GAAG,eAAe;AAEhD,IAAIC,QAAQ,GAAG,CAAC;AA2BhB;;;;;;;;AAQA;EAAA,2BAoDA;EAnDgBC,uBAAQ,GAAtB,UAA0BC,GAAW,EAAEC,YAA4B;IACjE,IAAMC,cAAc,GAAGC,kBAAkB,EAAE;IAE3C,IAAID,cAAc,CAACF,GAAG,CAAC,KAAKI,SAAS,EAAE;MACrCF,cAAc,CAACF,GAAG,CAAC,GAAG,OAAOC,YAAY,KAAK,UAAU,GAAIA,YAAyB,EAAE,GAAGA,YAAY;;IAGxG,OAAOC,cAAc,CAACF,GAAG,CAAC;EAC5B,CAAC;EAEaD,uBAAQ,GAAtB,UAA0BC,GAAW,EAAEK,KAAQ;IAC7C,IAAMH,cAAc,GAAGC,kBAAkB,EAAE;IAC3C,IAAMG,SAAS,GAAGJ,cAAc,CAACL,wBAAwB,CAAC;IAC1D,IAAIU,QAAQ,GAAGL,cAAc,CAACF,GAAG,CAAC;IAElC,IAAIK,KAAK,KAAKE,QAAQ,EAAE;MACtBL,cAAc,CAACF,GAAG,CAAC,GAAGK,KAAK;MAE3B,IAAIG,iBAAiB,GAAG;QACtBD,QAAQ;QACRF,KAAK;QACLL,GAAG;OACJ;MAED,KAAK,IAAIS,EAAE,IAAIH,SAAS,EAAE;QACxB,IAAIA,SAAS,CAACI,cAAc,CAACD,EAAE,CAAC,EAAE;UAChCH,SAAS,CAACG,EAAE,CAAC,CAACD,iBAAiB,CAAC;;;;IAKtC,OAAOH,KAAK;EACd,CAAC;EAEaN,gCAAiB,GAA/B,UAAgCY,EAAwB;IACtD;IACA;IACA,IAAIF,EAAE,GAAGE,EAAE,CAACC,MAAM;IAClB,IAAMN,SAAS,GAAGO,aAAa,EAAE;IAEjC,IAAI,CAACJ,EAAE,EAAE;MACPA,EAAE,GAAGE,EAAE,CAACC,MAAM,GAAGE,MAAM,CAAChB,QAAQ,EAAE,CAAC;;IAGrCQ,SAAS,CAACG,EAAE,CAAC,GAAGE,EAAE;EACpB,CAAC;EAEaZ,mCAAoB,GAAlC,UAAmCY,EAAwB;IACzD,IAAML,SAAS,GAAGO,aAAa,EAAE;IACjC,OAAOP,SAAS,CAACK,EAAE,CAACC,MAAgB,CAAC;EACvC,CAAC;EACH,qBAAC;AAAD,CAAC,EApDD;;AAsDA;AACA,SAAST,kBAAkB;;EACzB,IAAMY,GAAG,GAAGpB,SAAS,EAAE;EACvB;EACA,IAAMqB,SAAS,GAA2BD,GAAG,IAAI,EAAE;EAEnD,IAAI,CAACC,SAAS,CAACpB,yBAAyB,CAAC,EAAE;IACzCoB,SAAS,CAACpB,yBAAyB,CAAC,aAClCqB,GAACpB,wBAAwB,IAAG,EAAE,KAC/B;;EAGH,OAAOmB,SAAS,CAACpB,yBAAyB,CAAC;AAC7C;AAEA,SAASiB,aAAa;EACpB,IAAMX,cAAc,GAAGC,kBAAkB,EAAE;EAC3C,OAAOD,cAAc,CAACL,wBAAwB,CAAC;AACjD","names":["getWindow","GLOBAL_SETTINGS_PROP_NAME","CALLBACK_STATE_PROP_NAME","_counter","GlobalSettings","key","defaultValue","globalSettings","_getGlobalSettings","undefined","value","callbacks","oldValue","changeDescription","id","hasOwnProperty","cb","__id__","_getCallbacks","String","win","globalObj","_a"],"sources":["/Users/edward/Zhuo/NYU/FA22/design_project/project/node_modules/@fluentui/style-utilities/node_modules/@fluentui/utilities/src/GlobalSettings.ts"],"sourcesContent":["import { getWindow } from './dom/getWindow';\n\n/**\n * Storing global state in local module variables has issues when more than one copy\n * if the module gets loaded on the page (due to a bundling error or simply by consuming\n * a prebundled script.)\n *\n * This file contains helpers to deal with the getting and setting local state, and allows\n * callers to get called back when it mutates.\n */\n\nconst GLOBAL_SETTINGS_PROP_NAME = '__globalSettings__';\nconst CALLBACK_STATE_PROP_NAME = '__callbacks__';\n\nlet _counter = 0;\n\n/**\n * Change description used for change callbacks in GlobalSettings.\n *\n * @public\n * {@docCategory IChangeDescription}\n */\nexport interface IChangeDescription {\n  key: string;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  oldValue: any;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  value: any;\n}\n\n/**\n * Change event callback.\n *\n * @public\n * {@docCategory IChangeEventCallback}\n */\nexport interface IChangeEventCallback {\n  __id__?: string;\n  (changeDescription?: IChangeDescription): void;\n}\n\n/**\n * Global settings helper, which stores settings in the global (window) namespace.\n * If window is not provided, it will store settings in module scope. Provides a\n * way to observe changes as well when their values change.\n *\n * @public\n * {@docCategory GlobalSettings}\n */\nexport class GlobalSettings {\n  public static getValue<T>(key: string, defaultValue?: T | (() => T)): T {\n    const globalSettings = _getGlobalSettings();\n\n    if (globalSettings[key] === undefined) {\n      globalSettings[key] = typeof defaultValue === 'function' ? (defaultValue as Function)() : defaultValue;\n    }\n\n    return globalSettings[key];\n  }\n\n  public static setValue<T>(key: string, value: T): T {\n    const globalSettings = _getGlobalSettings();\n    const callbacks = globalSettings[CALLBACK_STATE_PROP_NAME];\n    let oldValue = globalSettings[key];\n\n    if (value !== oldValue) {\n      globalSettings[key] = value;\n\n      let changeDescription = {\n        oldValue,\n        value,\n        key,\n      };\n\n      for (let id in callbacks) {\n        if (callbacks.hasOwnProperty(id)) {\n          callbacks[id](changeDescription);\n        }\n      }\n    }\n\n    return value;\n  }\n\n  public static addChangeListener(cb: IChangeEventCallback): void {\n    // Note: we use generated ids on the callbacks to create a map of the callbacks, which optimizes removal.\n    // (It's faster to delete a key than it is to look up the index of an object and splice an array.)\n    let id = cb.__id__;\n    const callbacks = _getCallbacks();\n\n    if (!id) {\n      id = cb.__id__ = String(_counter++);\n    }\n\n    callbacks[id] = cb;\n  }\n\n  public static removeChangeListener(cb: IChangeEventCallback): void {\n    const callbacks = _getCallbacks();\n    delete callbacks[cb.__id__ as string];\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _getGlobalSettings(): { [key: string]: any } {\n  const win = getWindow();\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const globalObj: { [key: string]: any } = win || {};\n\n  if (!globalObj[GLOBAL_SETTINGS_PROP_NAME]) {\n    globalObj[GLOBAL_SETTINGS_PROP_NAME] = {\n      [CALLBACK_STATE_PROP_NAME]: {},\n    };\n  }\n\n  return globalObj[GLOBAL_SETTINGS_PROP_NAME];\n}\n\nfunction _getCallbacks(): { [key: string]: () => void } {\n  const globalSettings = _getGlobalSettings();\n  return globalSettings[CALLBACK_STATE_PROP_NAME];\n}\n"]},"metadata":{},"sourceType":"module"}