{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { IconType } from './Icon.types';\nimport { Image } from '../Image/Image';\nimport { ImageLoadState } from '../Image/Image.types';\nimport { getNativeProps, htmlElementProperties, classNamesFunction } from '../../Utilities';\nimport { getIconContent } from './FontIcon';\nvar getClassNames = classNamesFunction({\n  // Icon is used a lot by other components.\n  // It's likely to see expected cases which pass different className to the Icon.\n  // Therefore setting a larger cache size.\n  cacheSize: 100\n});\nvar IconBase = /** @class */function (_super) {\n  __extends(IconBase, _super);\n  function IconBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this._onImageLoadingStateChange = function (state) {\n      if (_this.props.imageProps && _this.props.imageProps.onLoadingStateChange) {\n        _this.props.imageProps.onLoadingStateChange(state);\n      }\n      if (state === ImageLoadState.error) {\n        _this.setState({\n          imageLoadError: true\n        });\n      }\n    };\n    _this.state = {\n      imageLoadError: false\n    };\n    return _this;\n  }\n  IconBase.prototype.render = function () {\n    var _a = this.props,\n      children = _a.children,\n      className = _a.className,\n      styles = _a.styles,\n      iconName = _a.iconName,\n      imageErrorAs = _a.imageErrorAs,\n      theme = _a.theme;\n    var isPlaceholder = typeof iconName === 'string' && iconName.length === 0;\n    var isImage =\n    // eslint-disable-next-line deprecation/deprecation\n    !!this.props.imageProps || this.props.iconType === IconType.image || this.props.iconType === IconType.Image;\n    var iconContent = getIconContent(iconName) || {};\n    var iconClassName = iconContent.iconClassName,\n      iconContentChildren = iconContent.children,\n      mergeImageProps = iconContent.mergeImageProps;\n    var classNames = getClassNames(styles, {\n      theme: theme,\n      className: className,\n      iconClassName: iconClassName,\n      isImage: isImage,\n      isPlaceholder: isPlaceholder\n    });\n    var RootType = isImage ? 'span' : 'i';\n    var nativeProps = getNativeProps(this.props, htmlElementProperties, ['aria-label']);\n    var imageLoadError = this.state.imageLoadError;\n    var imageProps = __assign(__assign({}, this.props.imageProps), {\n      onLoadingStateChange: this._onImageLoadingStateChange\n    });\n    var ImageType = imageLoadError && imageErrorAs || Image;\n    // eslint-disable-next-line deprecation/deprecation\n    var ariaLabel = this.props['aria-label'] || this.props.ariaLabel;\n    var accessibleName = imageProps.alt || ariaLabel || this.props.title;\n    var hasName = !!(accessibleName || this.props['aria-labelledby'] || imageProps['aria-label'] || imageProps['aria-labelledby']);\n    var containerProps = hasName ? {\n      role: isImage || mergeImageProps ? undefined : 'img',\n      'aria-label': isImage || mergeImageProps ? undefined : accessibleName\n    } : {\n      'aria-hidden': true\n    };\n    var finalIconContentChildren = iconContentChildren;\n    if (mergeImageProps && iconContentChildren && typeof iconContentChildren === 'object' && accessibleName) {\n      finalIconContentChildren = React.cloneElement(iconContentChildren, {\n        alt: accessibleName\n      });\n    }\n    return React.createElement(RootType, __assign({\n      \"data-icon-name\": iconName\n    }, containerProps, nativeProps, mergeImageProps ? {\n      title: undefined,\n      'aria-label': undefined\n    } : {}, {\n      className: classNames.root\n    }), isImage ? React.createElement(ImageType, __assign({}, imageProps)) : children || finalIconContentChildren);\n  };\n  return IconBase;\n}(React.Component);\nexport { IconBase };","map":{"version":3,"mappings":"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","names":["React","IconType","Image","ImageLoadState","getNativeProps","htmlElementProperties","classNamesFunction","getIconContent","getClassNames","cacheSize","__extends","props","_super","_this","state","imageProps","onLoadingStateChange","error","setState","imageLoadError","IconBase","children","className","styles","iconName","imageErrorAs","theme","isPlaceholder","length","isImage","iconType","image","iconContent","iconContentChildren","mergeImageProps","classNames","iconClassName","RootType","nativeProps","_onImageLoadingStateChange","ImageType","ariaLabel","accessibleName","alt","title","hasName","containerProps","role","undefined","finalIconContentChildren","cloneElement","root","Component"],"sources":["/Users/edward/Zhuo/NYU/FA22/design_project/project/node_modules/@fluentui/react/lib/components/src/components/Icon/Icon.base.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { IconType } from './Icon.types';\nimport { Image } from '../Image/Image';\nimport { ImageLoadState } from '../Image/Image.types';\nimport { getNativeProps, htmlElementProperties, classNamesFunction } from '../../Utilities';\nimport { getIconContent } from './FontIcon';\nimport type { IIconProps, IIconStyleProps, IIconStyles } from './Icon.types';\nimport type { IImageProps } from '../Image/Image.types';\n\nexport interface IIconState {\n  imageLoadError: boolean;\n}\n\nconst getClassNames = classNamesFunction<IIconStyleProps, IIconStyles>({\n  // Icon is used a lot by other components.\n  // It's likely to see expected cases which pass different className to the Icon.\n  // Therefore setting a larger cache size.\n  cacheSize: 100,\n});\n\nexport class IconBase extends React.Component<IIconProps, IIconState> {\n  constructor(props: IIconProps) {\n    super(props);\n    this.state = {\n      imageLoadError: false,\n    };\n  }\n\n  public render() {\n    const { children, className, styles, iconName, imageErrorAs, theme } = this.props;\n    const isPlaceholder = typeof iconName === 'string' && iconName.length === 0;\n    const isImage =\n      // eslint-disable-next-line deprecation/deprecation\n      !!this.props.imageProps || this.props.iconType === IconType.image || this.props.iconType === IconType.Image;\n    const iconContent = getIconContent(iconName) || {};\n    const { iconClassName, children: iconContentChildren, mergeImageProps } = iconContent;\n\n    const classNames = getClassNames(styles, {\n      theme: theme!,\n      className,\n      iconClassName,\n      isImage,\n      isPlaceholder,\n    });\n\n    const RootType = isImage ? 'span' : 'i';\n    const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, htmlElementProperties, [\n      'aria-label',\n    ]);\n    const { imageLoadError } = this.state;\n    const imageProps: IImageProps = {\n      ...this.props.imageProps,\n      onLoadingStateChange: this._onImageLoadingStateChange,\n    };\n    const ImageType = (imageLoadError && imageErrorAs) || Image;\n\n    // eslint-disable-next-line deprecation/deprecation\n    const ariaLabel = this.props['aria-label'] || this.props.ariaLabel;\n    const accessibleName = imageProps.alt || ariaLabel || this.props.title;\n    const hasName = !!(\n      accessibleName ||\n      this.props['aria-labelledby'] ||\n      imageProps['aria-label'] ||\n      imageProps['aria-labelledby']\n    );\n    const containerProps = hasName\n      ? {\n          role: isImage || mergeImageProps ? undefined : 'img',\n          'aria-label': isImage || mergeImageProps ? undefined : accessibleName,\n        }\n      : {\n          'aria-hidden': true,\n        };\n\n    let finalIconContentChildren = iconContentChildren;\n\n    if (mergeImageProps && iconContentChildren && typeof iconContentChildren === 'object' && accessibleName) {\n      finalIconContentChildren = React.cloneElement(iconContentChildren, {\n        alt: accessibleName,\n      });\n    }\n\n    return (\n      <RootType\n        data-icon-name={iconName}\n        {...containerProps}\n        {...nativeProps}\n        {...(mergeImageProps\n          ? {\n              title: undefined,\n              'aria-label': undefined,\n            }\n          : {})}\n        className={classNames.root}\n      >\n        {isImage ? <ImageType {...imageProps} /> : children || finalIconContentChildren}\n      </RootType>\n    );\n  }\n\n  private _onImageLoadingStateChange = (state: ImageLoadState): void => {\n    if (this.props.imageProps && this.props.imageProps.onLoadingStateChange) {\n      this.props.imageProps.onLoadingStateChange(state);\n    }\n    if (state === ImageLoadState.error) {\n      this.setState({ imageLoadError: true });\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}