{"ast":null,"code":"var now = function () {\n  return typeof performance !== 'undefined' && !!performance.now ? performance.now() : Date.now();\n};\nvar RESET_INTERVAL = 3 * 60 * 1000; // auto reset every 3 minutes\n/**\n * Performance helper class for measuring things.\n *\n * @public\n * {@docCategory FabricPerformance}\n */\nvar FabricPerformance = /** @class */function () {\n  function FabricPerformance() {}\n  /**\n   * Measures execution time of the given syncronous function. If the same logic is executed multiple times,\n   * each individual measurement will be collected as well the overall numbers.\n   * @param name - The name of this measurement\n   * @param func - The logic to be measured for execution time\n   */\n  FabricPerformance.measure = function (name, func) {\n    if (FabricPerformance._timeoutId) {\n      FabricPerformance.setPeriodicReset();\n    }\n    var start = now();\n    func();\n    var end = now();\n    var measurement = FabricPerformance.summary[name] || {\n      totalDuration: 0,\n      count: 0,\n      all: []\n    };\n    var duration = end - start;\n    measurement.totalDuration += duration;\n    measurement.count++;\n    measurement.all.push({\n      duration: duration,\n      timeStamp: end\n    });\n    FabricPerformance.summary[name] = measurement;\n  };\n  FabricPerformance.reset = function () {\n    FabricPerformance.summary = {};\n    clearTimeout(FabricPerformance._timeoutId);\n    FabricPerformance._timeoutId = NaN;\n  };\n  FabricPerformance.setPeriodicReset = function () {\n    FabricPerformance._timeoutId = setTimeout(function () {\n      return FabricPerformance.reset();\n    }, RESET_INTERVAL);\n  };\n  FabricPerformance.summary = {};\n  return FabricPerformance;\n}();\nexport { FabricPerformance };","map":{"version":3,"mappings":"AAgCA,IAAMA,GAAG,GAAiB;EACxB,cAAOC,WAAW,KAAK,WAAW,IAAI,CAAC,CAACA,WAAW,CAACD,GAAG,GAAGC,WAAW,CAACD,GAAG,EAAE,GAAGE,IAAI,CAACF,GAAG,EAAE;AAAxF,CAAwF;AAE1F,IAAMG,cAAc,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;AAEtC;;;;;;AAMA;EAAA,8BAyCA;EArCE;;;;;;EAMcC,yBAAO,GAArB,UAAsBC,IAAY,EAAEC,IAAgB;IAClD,IAAIF,iBAAiB,CAACG,UAAU,EAAE;MAChCH,iBAAiB,CAACI,gBAAgB,EAAE;;IAEtC,IAAMC,KAAK,GAAGT,GAAG,EAAE;IACnBM,IAAI,EAAE;IACN,IAAMI,GAAG,GAAGV,GAAG,EAAE;IACjB,IAAMW,WAAW,GAAqBP,iBAAiB,CAACQ,OAAO,CAACP,IAAI,CAAC,IAAI;MACvEQ,aAAa,EAAE,CAAC;MAChBC,KAAK,EAAE,CAAC;MACRC,GAAG,EAAE;KACN;IACD,IAAMC,QAAQ,GAAGN,GAAG,GAAGD,KAAK;IAC5BE,WAAW,CAACE,aAAa,IAAIG,QAAQ;IACrCL,WAAW,CAACG,KAAK,EAAE;IACnBH,WAAW,CAACI,GAAG,CAACE,IAAI,CAAC;MACnBD,QAAQ,EAAEA,QAAQ;MAClBE,SAAS,EAAER;KACZ,CAAC;IACFN,iBAAiB,CAACQ,OAAO,CAACP,IAAI,CAAC,GAAGM,WAAW;EAC/C,CAAC;EAEaP,uBAAK,GAAnB;IACEA,iBAAiB,CAACQ,OAAO,GAAG,EAAE;IAC9BO,YAAY,CAACf,iBAAiB,CAACG,UAAU,CAAC;IAC1CH,iBAAiB,CAACG,UAAU,GAAGa,GAAG;EACpC,CAAC;EAEahB,kCAAgB,GAA9B;IACEA,iBAAiB,CAACG,UAAU,GAAGc,UAAU,CAAC;MAAM,wBAAiB,CAACC,KAAK,EAAE;IAAzB,CAAyB,EAAEnB,cAAc,CAAC;EAC5F,CAAC;EAvCaC,yBAAO,GAAiB,EAAE;EAwC1C,wBAAC;CAAA,EAzCD;SAAaA,iBAAiB","names":["now","performance","Date","RESET_INTERVAL","FabricPerformance","name","func","_timeoutId","setPeriodicReset","start","end","measurement","summary","totalDuration","count","all","duration","push","timeStamp","clearTimeout","NaN","setTimeout","reset"],"sources":["/Users/edward/Zhuo/NYU/FA22/design_project/project/node_modules/@fluentui/react/node_modules/@fluentui/utilities/src/FabricPerformance.ts"],"sourcesContent":["declare const setTimeout: (cb: () => void, delay: number) => number;\n\n/**\n * PerfData interface.\n *\n * @internal\n */\nexport interface IPerfData {\n  duration: number;\n  timeStamp: number;\n}\n\n/**\n * PerfMeasurement interface.\n *\n * @internal\n */\nexport interface IPerfMeasurement {\n  totalDuration: number;\n  count: number;\n  all: IPerfData[];\n}\n\n/**\n * PerfSummary interface.\n *\n * @internal\n */\nexport interface IPerfSummary {\n  [key: string]: IPerfMeasurement;\n}\n\nconst now: () => number = () =>\n  typeof performance !== 'undefined' && !!performance.now ? performance.now() : Date.now();\n\nconst RESET_INTERVAL = 3 * 60 * 1000; // auto reset every 3 minutes\n\n/**\n * Performance helper class for measuring things.\n *\n * @public\n * {@docCategory FabricPerformance}\n */\nexport class FabricPerformance {\n  public static summary: IPerfSummary = {};\n  private static _timeoutId: number;\n\n  /**\n   * Measures execution time of the given syncronous function. If the same logic is executed multiple times,\n   * each individual measurement will be collected as well the overall numbers.\n   * @param name - The name of this measurement\n   * @param func - The logic to be measured for execution time\n   */\n  public static measure(name: string, func: () => void): void {\n    if (FabricPerformance._timeoutId) {\n      FabricPerformance.setPeriodicReset();\n    }\n    const start = now();\n    func();\n    const end = now();\n    const measurement: IPerfMeasurement = FabricPerformance.summary[name] || {\n      totalDuration: 0,\n      count: 0,\n      all: [],\n    };\n    const duration = end - start;\n    measurement.totalDuration += duration;\n    measurement.count++;\n    measurement.all.push({\n      duration: duration,\n      timeStamp: end,\n    });\n    FabricPerformance.summary[name] = measurement;\n  }\n\n  public static reset(): void {\n    FabricPerformance.summary = {};\n    clearTimeout(FabricPerformance._timeoutId);\n    FabricPerformance._timeoutId = NaN;\n  }\n\n  public static setPeriodicReset(): void {\n    FabricPerformance._timeoutId = setTimeout(() => FabricPerformance.reset(), RESET_INTERVAL);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}